<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Together</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Together</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Services Architecture Diagram</title>
      <link>http://localhost:1313/docs/summary/aws-services-diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/summary/aws-services-diagram/</guid>
      <description>&lt;h1 id=&#34;s∆°-ƒë·ªì-ki·∫øn-tr√∫c-d·ªãch-v·ª•-aws&#34;&gt;S∆° ƒê·ªì Ki·∫øn Tr√∫c D·ªãch V·ª• AWS&lt;a class=&#34;anchor&#34; href=&#34;#s%c6%a1-%c4%91%e1%bb%93-ki%e1%ba%bfn-tr%c3%bac-d%e1%bb%8bch-v%e1%bb%a5-aws&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;ki·∫øn-tr√∫c-h·ªá-th·ªëng&#34;&gt;Ki·∫øn Tr√∫c H·ªá Th·ªëng&lt;a class=&#34;anchor&#34; href=&#34;#ki%e1%ba%bfn-tr%c3%bac-h%e1%bb%87-th%e1%bb%91ng&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xD;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;graph TB&#xD;&#xA;    subgraph &amp;#34;T·∫ßng Client&amp;#34;&#xD;&#xA;        WebApp[Web App&amp;lt;br/&amp;gt;Next.js]&#xD;&#xA;        MobileApp[Mobile App&amp;lt;br/&amp;gt;React Native - T∆∞∆°ng lai]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;CDN &amp;amp; Hosting&amp;#34;&#xD;&#xA;        CloudFront[Amazon CloudFront&amp;lt;br/&amp;gt;CDN]&#xD;&#xA;        Amplify[AWS Amplify&amp;lt;br/&amp;gt;Hosting &amp;amp; CI/CD]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;T·∫ßng API Gateway&amp;#34;&#xD;&#xA;        APIGateway[Amazon API Gateway&amp;lt;br/&amp;gt;REST API]&#xD;&#xA;        WSGateway[API Gateway&amp;lt;br/&amp;gt;WebSocket - T∆∞∆°ng lai]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;X√°c Th·ª±c&amp;#34;&#xD;&#xA;        CognitoUser[Amazon Cognito&amp;lt;br/&amp;gt;User Pool]&#xD;&#xA;        CognitoIdentity[Cognito Identity Pool]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;T·∫ßng Compute&amp;#34;&#xD;&#xA;        LambdaAuth[Lambda: Auth Handler&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaRecipe[Lambda: Recipe CRUD&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaAI[Lambda: AI Suggestion&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaProfile[Lambda: User Profile&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaSocial[Lambda: Social/Friends&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaPost[Lambda: Posts &amp;amp; Comments&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaNotification[Lambda: Notifications&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaAdmin[Lambda: Admin Operations&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaCooking[Lambda: Cooking History&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaRating[Lambda: Rating &amp;amp; Approval&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;        LambdaIngredient[Lambda: Ingredient Validation&amp;lt;br/&amp;gt;Node.js 20]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;D·ªãch V·ª• AI&amp;#34;&#xD;&#xA;        Bedrock[Amazon Bedrock&amp;lt;br/&amp;gt;Claude 3.5 Sonnet/Haiku]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;T·∫ßng Database&amp;#34;&#xD;&#xA;        DynamoDB[Amazon DynamoDB&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;B·∫£ng: Users&amp;lt;br/&amp;gt;B·∫£ng: UserData&amp;lt;br/&amp;gt;B·∫£ng: Recipes&amp;lt;br/&amp;gt;B·∫£ng: RecipeRatings&amp;lt;br/&amp;gt;B·∫£ng: UserCookingHistory&amp;lt;br/&amp;gt;B·∫£ng: MasterIngredients&amp;lt;br/&amp;gt;B·∫£ng: AI_Suggestions&amp;lt;br/&amp;gt;B·∫£ng: Privacy&amp;lt;br/&amp;gt;B·∫£ng: Friendships&amp;lt;br/&amp;gt;B·∫£ng: Posts&amp;lt;br/&amp;gt;B·∫£ng: Comments&amp;lt;br/&amp;gt;B·∫£ng: Reactions&amp;lt;br/&amp;gt;B·∫£ng: Notifications]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;L∆∞u Tr·ªØ&amp;#34;&#xD;&#xA;        S3[Amazon S3&amp;lt;br/&amp;gt;User Uploads &amp;amp; Assets]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;Gi√°m S√°t &amp;amp; Logging&amp;#34;&#xD;&#xA;        CloudWatch[Amazon CloudWatch&amp;lt;br/&amp;gt;Logs &amp;amp; Metrics]&#xD;&#xA;        XRay[AWS X-Ray&amp;lt;br/&amp;gt;Tracing]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    subgraph &amp;#34;B·∫£o M·∫≠t&amp;#34;&#xD;&#xA;        WAF[AWS WAF&amp;lt;br/&amp;gt;Web Application Firewall]&#xD;&#xA;        Secrets[AWS Secrets Manager&amp;lt;br/&amp;gt;API Keys]&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;    WebApp --&amp;gt; CloudFront&#xD;&#xA;    CloudFront --&amp;gt; Amplify&#xD;&#xA;    WebApp --&amp;gt; APIGateway&#xD;&#xA;    APIGateway --&amp;gt; CognitoUser&#xD;&#xA;    CognitoUser --&amp;gt; LambdaAuth&#xD;&#xA;    CognitoIdentity --&amp;gt; S3&#xD;&#xA;&#xD;&#xA;    APIGateway --&amp;gt; LambdaRecipe&#xD;&#xA;    APIGateway --&amp;gt; LambdaAI&#xD;&#xA;    APIGateway --&amp;gt; LambdaProfile&#xD;&#xA;    APIGateway --&amp;gt; LambdaSocial&#xD;&#xA;    APIGateway --&amp;gt; LambdaPost&#xD;&#xA;    APIGateway --&amp;gt; LambdaNotification&#xD;&#xA;    APIGateway --&amp;gt; LambdaAdmin&#xD;&#xA;    APIGateway --&amp;gt; LambdaCooking&#xD;&#xA;    APIGateway --&amp;gt; LambdaRating&#xD;&#xA;    APIGateway --&amp;gt; LambdaIngredient&#xD;&#xA;&#xD;&#xA;    LambdaAI --&amp;gt; Bedrock&#xD;&#xA;&#xD;&#xA;    LambdaRecipe --&amp;gt; DynamoDB&#xD;&#xA;    LambdaAI --&amp;gt; DynamoDB&#xD;&#xA;    LambdaProfile --&amp;gt; DynamoDB&#xD;&#xA;    LambdaSocial --&amp;gt; DynamoDB&#xD;&#xA;    LambdaPost --&amp;gt; DynamoDB&#xD;&#xA;    LambdaNotification --&amp;gt; DynamoDB&#xD;&#xA;    LambdaAdmin --&amp;gt; DynamoDB&#xD;&#xA;    LambdaCooking --&amp;gt; DynamoDB&#xD;&#xA;    LambdaRating --&amp;gt; DynamoDB&#xD;&#xA;    LambdaIngredient --&amp;gt; DynamoDB&#xD;&#xA;&#xD;&#xA;    LambdaRecipe --&amp;gt; S3&#xD;&#xA;&#xD;&#xA;    LambdaAuth --&amp;gt; CloudWatch&#xD;&#xA;    LambdaRecipe --&amp;gt; CloudWatch&#xD;&#xA;    LambdaAI --&amp;gt; CloudWatch&#xD;&#xA;    LambdaCooking --&amp;gt; CloudWatch&#xD;&#xA;    LambdaRating --&amp;gt; CloudWatch&#xD;&#xA;&#xD;&#xA;    APIGateway --&amp;gt; WAF&lt;/pre&gt;&lt;h2 id=&#34;ph√¢n-t√≠ch-chi-ti·∫øt-c√°c-d·ªãch-v·ª•&#34;&gt;Ph√¢n T√≠ch Chi Ti·∫øt C√°c D·ªãch V·ª•&lt;a class=&#34;anchor&#34; href=&#34;#ph%c3%a2n-t%c3%adch-chi-ti%e1%ba%bft-c%c3%a1c-d%e1%bb%8bch-v%e1%bb%a5&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-frontend--cdn&#34;&gt;1. Frontend &amp;amp; CDN&lt;a class=&#34;anchor&#34; href=&#34;#1-frontend--cdn&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;AWS Amplify:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>K·∫ø Ho·∫°ch Tri·ªÉn Khai AI Agent</title>
      <link>http://localhost:1313/docs/summary/ai-agent-implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/summary/ai-agent-implementation/</guid>
      <description>&lt;h1 id=&#34;k·∫ø-ho·∫°ch-tri·ªÉn-khai-ai-agent&#34;&gt;K·∫æ HO·∫†CH TRI·ªÇN KHAI AI AGENT&lt;a class=&#34;anchor&#34; href=&#34;#k%e1%ba%bf-ho%e1%ba%a1ch-tri%e1%bb%83n-khai-ai-agent&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;H·ªá Th·ªëng G·ª£i √ù C√¥ng Th·ª©c Th√¥ng Minh&lt;/p&gt;&#xA;&lt;h2 id=&#34;-t·ªïng-quan&#34;&gt;üìã T·ªîNG QUAN&lt;a class=&#34;anchor&#34; href=&#34;#-t%e1%bb%95ng-quan&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;T√≠nh nƒÉng&lt;/strong&gt;: AI Agent g·ª£i √Ω m√≥n ƒÉn th√¥ng minh d·ª±a tr√™n:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Th√¥ng tin c√° nh√¢n (gi·ªõi t√≠nh, tu·ªïi, qu·ªëc gia)&lt;/li&gt;&#xA;&lt;li&gt;S·ªü th√≠ch ·∫©m th·ª±c (m√≥n canh, m√≥n chi√™n, m√≥n h·∫•p‚Ä¶)&lt;/li&gt;&#xA;&lt;li&gt;Nguy√™n li·ªáu nh·∫≠p ƒë∆°n gi·∫£n (ch·ªâ t√™n, kh√¥ng qu·∫£n l√Ω s·ªë l∆∞·ª£ng/h·∫°n d√πng)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Ph·∫°m vi:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;‚úÖ User nh·∫≠p danh s√°ch nguy√™n li·ªáu&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ System check nguy√™n li·ªáu h·ª£p l·ªá&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ G·ª£i √Ω 4 m√≥n t·ª´ database + 1 m√≥n AI t·∫°o m·ªõi&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ Auto-approval c√¥ng th·ª©c d·ª±a tr√™n rating (&amp;gt;= 4 sao)&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ Error handling cho nguy√™n li·ªáu kh√¥ng h·ª£p l·ªá&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Th·ªùi gian&lt;/strong&gt;: 2 tu·∫ßn (Tu·∫ßn 3-4 trong deployment plan)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Database Schema Diagram</title>
      <link>http://localhost:1313/docs/summary/database-diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/summary/database-diagram/</guid>
      <description>&lt;h1 id=&#34;s∆°-ƒë·ªì-c·∫•u-tr√∫c-c∆°-s·ªü-d·ªØ-li·ªáu&#34;&gt;S∆° ƒê·ªì C·∫•u Tr√∫c C∆° S·ªü D·ªØ Li·ªáu&lt;a class=&#34;anchor&#34; href=&#34;#s%c6%a1-%c4%91%e1%bb%93-c%e1%ba%a5u-tr%c3%bac-c%c6%a1-s%e1%bb%9f-d%e1%bb%af-li%e1%bb%87u&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;erd-s∆°-ƒë·ªì-quan-h·ªá-th·ª±c-th·ªÉ&#34;&gt;ERD (S∆° ƒê·ªì Quan H·ªá Th·ª±c Th·ªÉ)&lt;a class=&#34;anchor&#34; href=&#34;#erd-s%c6%a1-%c4%91%e1%bb%93-quan-h%e1%bb%87-th%e1%bb%b1c-th%e1%bb%83&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-dbml&#34; data-lang=&#34;dbml&#34;&gt;// B·∫£ng Ng∆∞·ªùi D√πng&#xD;&#xA;Table users {&#xD;&#xA;  user_id varchar(36) [pk, note: &amp;#39;UUID t·ª´ Cognito&amp;#39;]&#xD;&#xA;  email varchar(255) [unique, not null]&#xD;&#xA;  username varchar(50) [unique, not null]&#xD;&#xA;  full_name varchar(100)&#xD;&#xA;  date_of_birth date&#xD;&#xA;  gender enum(&amp;#39;male&amp;#39;, &amp;#39;female&amp;#39;, &amp;#39;other&amp;#39;)&#xD;&#xA;  country varchar(50)&#xD;&#xA;  avatar_url varchar(500)&#xD;&#xA;  role enum(&amp;#39;user&amp;#39;, &amp;#39;admin&amp;#39;) [default: &amp;#39;user&amp;#39;]&#xD;&#xA;  is_active boolean [default: true]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;  last_login timestamp&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    email&#xD;&#xA;    username&#xD;&#xA;    role&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// T√πy Ch·ªçn Ng∆∞·ªùi D√πng&#xD;&#xA;Table user_preferences {&#xD;&#xA;  preference_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  dietary_restrictions json [note: &amp;#39;chay, thu·∫ßn chay, halal, kosher, v.v.&amp;#39;]&#xD;&#xA;  allergies json [note: &amp;#39;Danh s√°ch d·ªã ·ª©ng&amp;#39;]&#xD;&#xA;  favorite_cuisines json [note: &amp;#39;√ù, Vi·ªát Nam, Nh·∫≠t B·∫£n, v.v.&amp;#39;]&#xD;&#xA;  preferred_cooking_methods json [note: &amp;#39;x√†o, h·∫•p, canh, kho, chi√™n - ∆∞u ti√™n khi AI suggest&amp;#39;]&#xD;&#xA;  preferred_recipe_count int [default: 1, note: &amp;#39;1-5 m√≥n mu·ªën n·∫•u m·ªói l·∫ßn, FREE: 1, PREMIUM: 5&amp;#39;]&#xD;&#xA;  spice_level enum(&amp;#39;none&amp;#39;, &amp;#39;mild&amp;#39;, &amp;#39;medium&amp;#39;, &amp;#39;hot&amp;#39;, &amp;#39;very_hot&amp;#39;)&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// C√†i ƒê·∫∑t Quy·ªÅn Ri√™ng T∆∞&#xD;&#xA;Table privacy_settings {&#xD;&#xA;  setting_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null, unique]&#xD;&#xA;  profile_visibility enum(&amp;#39;public&amp;#39;, &amp;#39;friends&amp;#39;, &amp;#39;private&amp;#39;) [default: &amp;#39;public&amp;#39;, note: &amp;#39;Ai c√≥ th·ªÉ xem h·ªì s∆°&amp;#39;]&#xD;&#xA;  email_visibility enum(&amp;#39;public&amp;#39;, &amp;#39;friends&amp;#39;, &amp;#39;private&amp;#39;) [default: &amp;#39;private&amp;#39;]&#xD;&#xA;  date_of_birth_visibility enum(&amp;#39;public&amp;#39;, &amp;#39;friends&amp;#39;, &amp;#39;private&amp;#39;) [default: &amp;#39;friends&amp;#39;]&#xD;&#xA;  gender_visibility enum(&amp;#39;public&amp;#39;, &amp;#39;friends&amp;#39;, &amp;#39;private&amp;#39;) [default: &amp;#39;public&amp;#39;]&#xD;&#xA;  country_visibility enum(&amp;#39;public&amp;#39;, &amp;#39;friends&amp;#39;, &amp;#39;private&amp;#39;) [default: &amp;#39;public&amp;#39;]&#xD;&#xA;  recipes_visibility enum(&amp;#39;public&amp;#39;, &amp;#39;friends&amp;#39;, &amp;#39;private&amp;#39;) [default: &amp;#39;public&amp;#39;]&#xD;&#xA;  ingredients_visibility enum(&amp;#39;public&amp;#39;, &amp;#39;friends&amp;#39;, &amp;#39;private&amp;#39;) [default: &amp;#39;friends&amp;#39;]&#xD;&#xA;  preferences_visibility enum(&amp;#39;public&amp;#39;, &amp;#39;friends&amp;#39;, &amp;#39;private&amp;#39;) [default: &amp;#39;friends&amp;#39;]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    user_id&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Quan H·ªá B·∫°n B√®&#xD;&#xA;Table friendships {&#xD;&#xA;  friendship_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  friend_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  status enum(&amp;#39;pending&amp;#39;, &amp;#39;accepted&amp;#39;, &amp;#39;blocked&amp;#39;) [default: &amp;#39;pending&amp;#39;]&#xD;&#xA;  requested_at timestamp [default: `now()`]&#xD;&#xA;  responded_at timestamp&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    (user_id, friend_id) [unique]&#xD;&#xA;    user_id&#xD;&#xA;    friend_id&#xD;&#xA;    status&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Nguy√™n Li·ªáu Ng∆∞·ªùi D√πng (Danh s√°ch ƒë∆°n gi·∫£n - kh√¥ng theo d√µi s·ªë l∆∞·ª£ng)&#xD;&#xA;Table user_ingredients {&#xD;&#xA;  ingredient_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  ingredient_name varchar(256) [not null]&#xD;&#xA;  added_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    (user_id, ingredient_name) [unique]&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// C√¥ng Th·ª©c (Do ng∆∞·ªùi d√πng t·∫°o &amp;amp; AI t·∫°o)&#xD;&#xA;Table recipes {&#xD;&#xA;  recipe_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, note: &amp;#39;Ng∆∞·ªùi t·∫°o - null n·∫øu l√† c√¥ng th·ª©c h·ªá th·ªëng&amp;#39;]&#xD;&#xA;  title varchar(200) [not null]&#xD;&#xA;  normalized_title varchar(200) [note: &amp;#39;Ch·ªØ th∆∞·ªùng, kh√¥ng d·∫•u ƒë·ªÉ t√¨m ki·∫øm&amp;#39;]&#xD;&#xA;  description text&#xD;&#xA;  cuisine_type varchar(50)&#xD;&#xA;  cooking_method varchar(50) [note: &amp;#39;x√†o, h·∫•p, lu·ªôc, chi√™n, n∆∞·ªõng, kho, rim, tr·ªôn, canh, l·∫©u&amp;#39;]&#xD;&#xA;  meal_type varchar(50) [note: &amp;#39;m√≥n ch√≠nh, m√≥n ph·ª•, canh, khai v·ªã, tr√°ng mi·ªáng&amp;#39;]&#xD;&#xA;  prep_time_minutes int&#xD;&#xA;  cook_time_minutes int&#xD;&#xA;  servings int&#xD;&#xA;  calories_per_serving int&#xD;&#xA;  instructions json [note: &amp;#39;M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng b∆∞·ªõc&amp;#39;]&#xD;&#xA;  is_public boolean [default: false]&#xD;&#xA;  is_ai_generated boolean [default: false]&#xD;&#xA;  is_approved boolean [default: false, note: &amp;#39;Auto-approved n·∫øu rating &amp;gt;= 4 sao&amp;#39;]&#xD;&#xA;  approval_type enum(&amp;#39;manual&amp;#39;, &amp;#39;auto_rating&amp;#39;, &amp;#39;auto_popular&amp;#39;, &amp;#39;system&amp;#39;) [note: &amp;#39;C√°ch th·ª©c approval&amp;#39;]&#xD;&#xA;  average_rating decimal(2,1) [default: 0.0, note: &amp;#39;Rating trung b√¨nh&amp;#39;]&#xD;&#xA;  rating_count int [default: 0, note: &amp;#39;S·ªë l∆∞·ª£ng ƒë√°nh gi√°&amp;#39;]&#xD;&#xA;  ai_cache_hit_count int [default: 0, note: &amp;#39;S·ªë l·∫ßn t√°i s·ª≠ d·ª•ng t·ª´ cache&amp;#39;]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;  approved_at timestamp [note: &amp;#39;Th·ªùi ƒëi·ªÉm ƒë∆∞·ª£c approve&amp;#39;]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    user_id&#xD;&#xA;    normalized_title&#xD;&#xA;    cuisine_type&#xD;&#xA;    cooking_method&#xD;&#xA;    meal_type&#xD;&#xA;    is_approved&#xD;&#xA;    average_rating&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// B·ªô Nh·ªõ Cache C√¥ng Th·ª©c (C√¥ng th·ª©c AI t·∫°o ƒë·ªÉ t√°i s·ª≠ d·ª•ng)&#xD;&#xA;Table recipe_cache {&#xD;&#xA;  cache_id varchar(36) [pk]&#xD;&#xA;  recipe_name varchar(200) [not null]&#xD;&#xA;  normalized_name varchar(200) [unique, not null, note: &amp;#39;Kh√≥a t√¨m ki·∫øm&amp;#39;]&#xD;&#xA;  recipe_data json [note: &amp;#39;JSON c√¥ng th·ª©c ƒë·∫ßy ƒë·ªß t·ª´ AI&amp;#39;]&#xD;&#xA;  ingredients_hash varchar(64) [note: &amp;#39;Hash c·ªßa danh s√°ch nguy√™n li·ªáu&amp;#39;]&#xD;&#xA;  cuisine_type varchar(50)&#xD;&#xA;  hit_count int [default: 0, note: &amp;#39;B·ªô ƒë·∫øm t√°i s·ª≠ d·ª•ng&amp;#39;]&#xD;&#xA;  last_accessed timestamp&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    normalized_name&#xD;&#xA;    ingredients_hash&#xD;&#xA;    cuisine_type&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Nguy√™n Li·ªáu C√¥ng Th·ª©c&#xD;&#xA;Table recipe_ingredients {&#xD;&#xA;  id varchar(36) [pk]&#xD;&#xA;  recipe_id varchar(36) [ref: &amp;gt; recipes.recipe_id, not null]&#xD;&#xA;  ingredient_name varchar(100) [not null]&#xD;&#xA;  quantity varchar(50) [note: &amp;#39;2 ch√©n, 500g, v.v.&amp;#39;]&#xD;&#xA;  unit varchar(20)&#xD;&#xA;  is_optional boolean [default: false]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    recipe_id&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// L·ªãch S·ª≠ G·ª£i √ù AI (Enhanced)&#xD;&#xA;Table ai_suggestions {&#xD;&#xA;  suggestion_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  recipe_id varchar(36) [ref: &amp;gt; recipes.recipe_id]&#xD;&#xA;  cache_id varchar(36) [ref: &amp;gt; recipe_cache.cache_id, note: &amp;#39;N·∫øu t·ª´ cache&amp;#39;]&#xD;&#xA;  prompt_text text [note: &amp;#39;ƒê·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng cho AI&amp;#39;]&#xD;&#xA;  ingredients_used json [note: &amp;#39;Danh s√°ch nguy√™n li·ªáu t·ª´ user_ingredients&amp;#39;]&#xD;&#xA;  requested_recipe_count int [default: 1, note: &amp;#39;1-5 m√≥n user y√™u c·∫ßu&amp;#39;]&#xD;&#xA;  recipes_from_db int [default: 0, note: &amp;#39;S·ªë m√≥n t·ª´ database&amp;#39;]&#xD;&#xA;  recipes_from_ai int [default: 0, note: &amp;#39;S·ªë m√≥n AI t·∫°o m·ªõi&amp;#39;]&#xD;&#xA;  invalid_ingredients json [note: &amp;#39;Nguy√™n li·ªáu kh√¥ng h·ª£p l·ªá - logged&amp;#39;]&#xD;&#xA;  ai_response json [note: &amp;#39;Ph·∫£n h·ªìi AI ƒë·∫ßy ƒë·ªß&amp;#39;]&#xD;&#xA;  was_from_cache boolean [default: false, note: &amp;#39;True n·∫øu t√°i s·ª≠ d·ª•ng t·ª´ cache&amp;#39;]&#xD;&#xA;  was_accepted boolean [default: false]&#xD;&#xA;  feedback_rating int [note: &amp;#39;1-5 sao&amp;#39;]&#xD;&#xA;  feedback_comment text&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    user_id&#xD;&#xA;    created_at&#xD;&#xA;    cache_id&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// L·ªãch S·ª≠ N·∫•u ƒÇn C√° Nh√¢n (Thay th·∫ø favorites - m·ªü r·ªông h∆°n)&#xD;&#xA;Table user_cooking_history {&#xD;&#xA;  history_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  recipe_id varchar(36) [ref: &amp;gt; recipes.recipe_id, not null]&#xD;&#xA;  suggestion_id varchar(36) [ref: &amp;gt; ai_suggestions.suggestion_id, note: &amp;#39;N·∫øu t·ª´ AI suggestion&amp;#39;]&#xD;&#xA;  status enum(&amp;#39;planned&amp;#39;, &amp;#39;cooking&amp;#39;, &amp;#39;completed&amp;#39;, &amp;#39;failed&amp;#39;) [default: &amp;#39;planned&amp;#39;]&#xD;&#xA;  personal_rating int [note: &amp;#39;1-5 sao - ƒë√°nh gi√° c√° nh√¢n&amp;#39;]&#xD;&#xA;  personal_notes text [note: &amp;#39;Ghi ch√∫ c√° nh√¢n&amp;#39;]&#xD;&#xA;  is_favorite boolean [default: false, note: &amp;#39;ƒê√°nh d·∫•u y√™u th√≠ch&amp;#39;]&#xD;&#xA;  cook_date timestamp [note: &amp;#39;Ng√†y n·∫•u th·ª±c t·∫ø&amp;#39;]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    user_id&#xD;&#xA;    recipe_id&#xD;&#xA;    status&#xD;&#xA;    is_favorite&#xD;&#xA;    cook_date&#xD;&#xA;    (user_id, recipe_id) [note: &amp;#39;Cho ph√©p multiple entries - l·ªãch s·ª≠ n·∫•u nhi·ªÅu l·∫ßn&amp;#39;]&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// ƒê√°nh Gi√° C√¥ng Th·ª©c (Cho auto-approval system)&#xD;&#xA;Table recipe_ratings {&#xD;&#xA;  rating_id varchar(36) [pk]&#xD;&#xA;  recipe_id varchar(36) [ref: &amp;gt; recipes.recipe_id, not null]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  history_id varchar(36) [ref: &amp;gt; user_cooking_history.history_id, note: &amp;#39;Link ƒë·∫øn l·ªãch s·ª≠ n·∫•u&amp;#39;]&#xD;&#xA;  rating int [not null, note: &amp;#39;1-5 sao&amp;#39;]&#xD;&#xA;  comment text&#xD;&#xA;  is_verified_cook boolean [default: false, note: &amp;#39;User ƒë√£ th·ª±c s·ª± n·∫•u m√≥n n√†y&amp;#39;]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    recipe_id&#xD;&#xA;    user_id&#xD;&#xA;    rating&#xD;&#xA;    (recipe_id, user_id) [unique, note: &amp;#39;M·ªói user ch·ªâ rate 1 l·∫ßn m·ªói recipe&amp;#39;]&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// K·∫ø Ho·∫°ch B·ªØa ƒÇn&#xD;&#xA;Table meal_plans {&#xD;&#xA;  plan_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  plan_name varchar(100)&#xD;&#xA;  start_date date [not null]&#xD;&#xA;  end_date date [not null]&#xD;&#xA;  is_active boolean [default: true]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    user_id&#xD;&#xA;    start_date&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// M·ª•c K·∫ø Ho·∫°ch B·ªØa ƒÇn&#xD;&#xA;Table meal_plan_items {&#xD;&#xA;  item_id varchar(36) [pk]&#xD;&#xA;  plan_id varchar(36) [ref: &amp;gt; meal_plans.plan_id, not null]&#xD;&#xA;  recipe_id varchar(36) [ref: &amp;gt; recipes.recipe_id, not null]&#xD;&#xA;  meal_date date [not null]&#xD;&#xA;  meal_type enum(&amp;#39;breakfast&amp;#39;, &amp;#39;lunch&amp;#39;, &amp;#39;dinner&amp;#39;, &amp;#39;snack&amp;#39;)&#xD;&#xA;  notes text&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    plan_id&#xD;&#xA;    meal_date&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Master Ingredients (Danh s√°ch nguy√™n li·ªáu h·ª£p l·ªá cho validation)&#xD;&#xA;Table master_ingredients {&#xD;&#xA;  ingredient_id varchar(36) [pk]&#xD;&#xA;  name varchar(256) [unique, not null]&#xD;&#xA;  normalized_name varchar(256) [unique, not null, note: &amp;#39;Kh√¥ng d·∫•u, ch·ªØ th∆∞·ªùng&amp;#39;]&#xD;&#xA;  category varchar(50) [note: &amp;#39;th·ªãt, rau, gia v·ªã, s·ªØa, v.v.&amp;#39;]&#xD;&#xA;  aliases json [note: &amp;#39;C√°c t√™n g·ªçi kh√°c: [&amp;#34;th·ªãt b√≤&amp;#34;, &amp;#34;b√≤&amp;#34;, &amp;#34;beef&amp;#34;]&amp;#39;]&#xD;&#xA;  is_active boolean [default: true]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    normalized_name&#xD;&#xA;    category&#xD;&#xA;    is_active&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Nh·∫≠t K√Ω Ho·∫°t ƒê·ªông Ng∆∞·ªùi D√πng (Enhanced v·ªõi invalid ingredient tracking)&#xD;&#xA;Table activity_logs {&#xD;&#xA;  log_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  activity_type enum(&amp;#39;login&amp;#39;, &amp;#39;recipe_view&amp;#39;, &amp;#39;recipe_create&amp;#39;, &amp;#39;ai_suggestion&amp;#39;, &amp;#39;ingredient_add&amp;#39;, &amp;#39;recipe_cook&amp;#39;, &amp;#39;recipe_rate&amp;#39;, &amp;#39;invalid_ingredient&amp;#39;)&#xD;&#xA;  activity_data json&#xD;&#xA;  ip_address varchar(45)&#xD;&#xA;  user_agent text&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    user_id&#xD;&#xA;    created_at&#xD;&#xA;    activity_type&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Invalid Ingredients Reports (Optional - Post MVP)&#xD;&#xA;Table invalid_ingredients_reports {&#xD;&#xA;  report_id varchar(36) [pk]&#xD;&#xA;  ingredient_name varchar(256) [not null]&#xD;&#xA;  normalized_name varchar(256) [not null, note: &amp;#39;Ch·ªØ th∆∞·ªùng, kh√¥ng d·∫•u&amp;#39;]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  user_report_count int [default: 1, note: &amp;#39;S·ªë l·∫ßn user n√†y report&amp;#39;]&#xD;&#xA;  total_reports int [default: 1, note: &amp;#39;T·ªïng s·ªë reports t·ª´ t·∫•t c·∫£ users&amp;#39;]&#xD;&#xA;  status enum(&amp;#39;pending&amp;#39;, &amp;#39;reviewed&amp;#39;, &amp;#39;added_to_master&amp;#39;, &amp;#39;spam&amp;#39;) [default: &amp;#39;pending&amp;#39;]&#xD;&#xA;  admin_notes text&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    (normalized_name, user_id) [unique]&#xD;&#xA;    total_reports&#xD;&#xA;    status&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// B√†i ƒêƒÉng (Posts)&#xD;&#xA;Table posts {&#xD;&#xA;  post_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  recipe_id varchar(36) [ref: &amp;gt; recipes.recipe_id, note: &amp;#39;Optional - n·∫øu chia s·∫ª c√¥ng th·ª©c&amp;#39;]&#xD;&#xA;  content text [note: &amp;#39;N·ªôi dung b√†i ƒëƒÉng&amp;#39;]&#xD;&#xA;  images json [note: &amp;#39;M·∫£ng URLs ·∫£nh&amp;#39;]&#xD;&#xA;  is_public boolean [default: true]&#xD;&#xA;  likes_count int [default: 0]&#xD;&#xA;  comments_count int [default: 0]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    user_id&#xD;&#xA;    recipe_id&#xD;&#xA;    created_at&#xD;&#xA;    is_public&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// B√¨nh Lu·∫≠n (Comments)&#xD;&#xA;Table comments {&#xD;&#xA;  comment_id varchar(36) [pk]&#xD;&#xA;  post_id varchar(36) [ref: &amp;gt; posts.post_id, not null]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  parent_comment_id varchar(36) [ref: &amp;gt; comments.comment_id, note: &amp;#39;Cho reply/thread&amp;#39;]&#xD;&#xA;  content text [not null]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;  updated_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    post_id&#xD;&#xA;    user_id&#xD;&#xA;    parent_comment_id&#xD;&#xA;    created_at&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// L∆∞·ª£t Th√≠ch/Reactions&#xD;&#xA;Table reactions {&#xD;&#xA;  reaction_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  target_type enum(&amp;#39;post&amp;#39;, &amp;#39;recipe&amp;#39;, &amp;#39;comment&amp;#39;) [not null]&#xD;&#xA;  target_id varchar(36) [not null, note: &amp;#39;ID c·ªßa post/recipe/comment&amp;#39;]&#xD;&#xA;  reaction_type enum(&amp;#39;like&amp;#39;, &amp;#39;love&amp;#39;, &amp;#39;wow&amp;#39;, &amp;#39;sad&amp;#39;, &amp;#39;angry&amp;#39;) [default: &amp;#39;like&amp;#39;]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    (user_id, target_type, target_id) [unique]&#xD;&#xA;    target_type&#xD;&#xA;    target_id&#xD;&#xA;    user_id&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Th√¥ng B√°o (Notifications)&#xD;&#xA;Table notifications {&#xD;&#xA;  notification_id varchar(36) [pk]&#xD;&#xA;  user_id varchar(36) [ref: &amp;gt; users.user_id, not null]&#xD;&#xA;  actor_id varchar(36) [ref: &amp;gt; users.user_id, note: &amp;#39;Ng∆∞·ªùi th·ª±c hi·ªán h√†nh ƒë·ªông&amp;#39;]&#xD;&#xA;  type enum(&amp;#39;friend_request&amp;#39;, &amp;#39;friend_accept&amp;#39;, &amp;#39;comment&amp;#39;, &amp;#39;like&amp;#39;, &amp;#39;mention&amp;#39;, &amp;#39;recipe_share&amp;#39;) [not null]&#xD;&#xA;  target_type enum(&amp;#39;post&amp;#39;, &amp;#39;recipe&amp;#39;, &amp;#39;comment&amp;#39;, &amp;#39;friend_request&amp;#39;) [not null]&#xD;&#xA;  target_id varchar(36) [not null]&#xD;&#xA;  content text [note: &amp;#39;N·ªôi dung th√¥ng b√°o&amp;#39;]&#xD;&#xA;  is_read boolean [default: false]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    user_id&#xD;&#xA;    is_read&#xD;&#xA;    created_at&#xD;&#xA;    type&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Ng∆∞·ªùi Theo D√µi (Followers) - N·∫øu mu·ªën m√¥ h√¨nh follow ngo√†i friendship&#xD;&#xA;Table user_followers {&#xD;&#xA;  follow_id varchar(36) [pk]&#xD;&#xA;  follower_id varchar(36) [ref: &amp;gt; users.user_id, not null, note: &amp;#39;Ng∆∞·ªùi theo d√µi&amp;#39;]&#xD;&#xA;  following_id varchar(36) [ref: &amp;gt; users.user_id, not null, note: &amp;#39;Ng∆∞·ªùi ƒë∆∞·ª£c theo d√µi&amp;#39;]&#xD;&#xA;  created_at timestamp [default: `now()`]&#xD;&#xA;&#xD;&#xA;  indexes {&#xD;&#xA;    (follower_id, following_id) [unique]&#xD;&#xA;    follower_id&#xD;&#xA;    following_id&#xD;&#xA;  }&#xD;&#xA;}&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;c√¥ng-ngh·ªá-c∆°-s·ªü-d·ªØ-li·ªáu&#34;&gt;C√¥ng Ngh·ªá C∆° S·ªü D·ªØ Li·ªáu&lt;a class=&#34;anchor&#34; href=&#34;#c%c3%b4ng-ngh%e1%bb%87-c%c6%a1-s%e1%bb%9f-d%e1%bb%af-li%e1%bb%87u&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;C∆° S·ªü D·ªØ Li·ªáu Ch√≠nh: Amazon DynamoDB (NoSQL)&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ph√¢n T√≠ch Chi Ph√≠</title>
      <link>http://localhost:1313/docs/summary/cost-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/summary/cost-analysis/</guid>
      <description>&lt;h1 id=&#34;ph√¢n-t√≠ch-chi-ph√≠-d·ª±-√°n&#34;&gt;PH√ÇN T√çCH CHI PH√ç D·ª∞ √ÅN&lt;a class=&#34;anchor&#34; href=&#34;#ph%c3%a2n-t%c3%adch-chi-ph%c3%ad-d%e1%bb%b1-%c3%a1n&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;-chi-ph√≠-h√†ng-th√°ng-1000-users---enhanced&#34;&gt;üí∞ Chi Ph√≠ H√†ng Th√°ng (1,000 users) - ENHANCED&lt;a class=&#34;anchor&#34; href=&#34;#-chi-ph%c3%ad-h%c3%a0ng-th%c3%a1ng-1000-users---enhanced&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;D·ªãch V·ª•&lt;/th&gt;&#xA;          &lt;th&gt;Chi Ph√≠ ∆Ø·ªõc T√≠nh&lt;/th&gt;&#xA;          &lt;th&gt;Ghi Ch√∫&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;AWS Amplify&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$15&lt;/td&gt;&#xA;          &lt;td&gt;Hosting Next.js + CI/CD&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Amazon CloudFront&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$8&lt;/td&gt;&#xA;          &lt;td&gt;CDN, 1TB data transfer&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Amazon API Gateway&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$10&lt;/td&gt;&#xA;          &lt;td&gt;~180K requests/th√°ng&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;AWS Lambda Functions&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$25&lt;/td&gt;&#xA;          &lt;td&gt;11 Lambda functions&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Amazon Bedrock (Flexible)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$12-30&lt;/td&gt;&#xA;          &lt;td&gt;&lt;strong&gt;FLEXIBLE mix&lt;/strong&gt; (60% DB coverage) ‚≠ê&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Amazon DynamoDB&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$45&lt;/td&gt;&#xA;          &lt;td&gt;On-demand v·ªõi categories, invalid reports ‚≠ê&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Amazon S3&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$10&lt;/td&gt;&#xA;          &lt;td&gt;100GB storage&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Amazon Cognito&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;FREE&lt;/td&gt;&#xA;          &lt;td&gt;&amp;lt; 50,000 MAU&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Amazon CloudWatch&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$12&lt;/td&gt;&#xA;          &lt;td&gt;Enhanced logging v·ªõi invalid ingredients ‚≠ê&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;AWS WAF&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$6&lt;/td&gt;&#xA;          &lt;td&gt;Web Application Firewall&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;AWS Secrets Manager&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;$2&lt;/td&gt;&#xA;          &lt;td&gt;API keys storage&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;t·ªïng-chi-ph√≠-enhanced&#34;&gt;T·ªïng Chi Ph√≠ (Enhanced)&lt;a class=&#34;anchor&#34; href=&#34;#t%e1%bb%95ng-chi-ph%c3%ad-enhanced&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;K·ªãch B·∫£n&lt;/th&gt;&#xA;          &lt;th&gt;Chi Ph√≠/Th√°ng&lt;/th&gt;&#xA;          &lt;th&gt;Note&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Best Case (DB ƒë·ªß 80%)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;strong&gt;~$135&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ti·∫øt ki·ªám AI ‚úÖ&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Average Case (DB 60%)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;strong&gt;~$150&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Recommended ‚úÖ&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Worst Case (DB r·ªóng)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;strong&gt;~$180&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Cold start&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;üí° Khuy·∫øn ngh·ªã&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
