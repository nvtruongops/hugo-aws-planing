[{"id":0,"href":"/docs/summary/aws-services-diagram/","title":"AWS Services Architecture Diagram","section":"Summary","content":"Sơ Đồ Kiến Trúc Dịch Vụ AWS#\rKiến Trúc Hệ Thống#\rgraph TB\rsubgraph \u0026#34;Tầng Client\u0026#34;\rWebApp[Web App\u0026lt;br/\u0026gt;Next.js]\rMobileApp[Mobile App\u0026lt;br/\u0026gt;React Native - Tương lai]\rend\rsubgraph \u0026#34;CDN \u0026amp; Hosting\u0026#34;\rCloudFront[Amazon CloudFront\u0026lt;br/\u0026gt;CDN]\rAmplify[AWS Amplify\u0026lt;br/\u0026gt;Hosting \u0026amp; CI/CD]\rend\rsubgraph \u0026#34;Tầng API Gateway\u0026#34;\rAPIGateway[Amazon API Gateway\u0026lt;br/\u0026gt;REST API]\rWSGateway[API Gateway\u0026lt;br/\u0026gt;WebSocket - Tương lai]\rend\rsubgraph \u0026#34;Xác Thực\u0026#34;\rCognitoUser[Amazon Cognito\u0026lt;br/\u0026gt;User Pool]\rCognitoIdentity[Cognito Identity Pool]\rend\rsubgraph \u0026#34;Tầng Compute\u0026#34;\rLambdaAuth[Lambda: Auth Handler\u0026lt;br/\u0026gt;Node.js 20]\rLambdaRecipe[Lambda: Recipe CRUD\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAI[Lambda: AI Suggestion\u0026lt;br/\u0026gt;Node.js 20]\rLambdaProfile[Lambda: User Profile\u0026lt;br/\u0026gt;Node.js 20]\rLambdaSocial[Lambda: Social/Friends\u0026lt;br/\u0026gt;Node.js 20]\rLambdaPost[Lambda: Posts \u0026amp; Comments\u0026lt;br/\u0026gt;Node.js 20]\rLambdaNotification[Lambda: Notifications\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAdmin[Lambda: Admin Operations\u0026lt;br/\u0026gt;Node.js 20]\rend\rsubgraph \u0026#34;Dịch Vụ AI\u0026#34;\rBedrock[Amazon Bedrock\u0026lt;br/\u0026gt;Claude 3.5 Sonnet/Haiku]\rend\rsubgraph \u0026#34;Tầng Database\u0026#34;\rDynamoDB[Amazon DynamoDB\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Bảng: Users\u0026lt;br/\u0026gt;Bảng: UserData\u0026lt;br/\u0026gt;Bảng: Recipes\u0026lt;br/\u0026gt;Bảng: AI_Suggestions\u0026lt;br/\u0026gt;Bảng: Privacy\u0026lt;br/\u0026gt;Bảng: Friendships\u0026lt;br/\u0026gt;Bảng: Posts\u0026lt;br/\u0026gt;Bảng: Comments\u0026lt;br/\u0026gt;Bảng: Reactions\u0026lt;br/\u0026gt;Bảng: Notifications]\rend\rsubgraph \u0026#34;Lưu Trữ\u0026#34;\rS3[Amazon S3\u0026lt;br/\u0026gt;User Uploads \u0026amp; Assets]\rend\rsubgraph \u0026#34;Giám Sát \u0026amp; Logging\u0026#34;\rCloudWatch[Amazon CloudWatch\u0026lt;br/\u0026gt;Logs \u0026amp; Metrics]\rXRay[AWS X-Ray\u0026lt;br/\u0026gt;Tracing]\rend\rsubgraph \u0026#34;Bảo Mật\u0026#34;\rWAF[AWS WAF\u0026lt;br/\u0026gt;Web Application Firewall]\rSecrets[AWS Secrets Manager\u0026lt;br/\u0026gt;API Keys]\rend\rWebApp --\u0026gt; CloudFront\rCloudFront --\u0026gt; Amplify\rWebApp --\u0026gt; APIGateway\rAPIGateway --\u0026gt; CognitoUser\rCognitoUser --\u0026gt; LambdaAuth\rCognitoIdentity --\u0026gt; S3\rAPIGateway --\u0026gt; LambdaRecipe\rAPIGateway --\u0026gt; LambdaAI\rAPIGateway --\u0026gt; LambdaProfile\rAPIGateway --\u0026gt; LambdaSocial\rAPIGateway --\u0026gt; LambdaPost\rAPIGateway --\u0026gt; LambdaNotification\rAPIGateway --\u0026gt; LambdaAdmin\rLambdaAI --\u0026gt; Bedrock\rLambdaRecipe --\u0026gt; DynamoDB\rLambdaAI --\u0026gt; DynamoDB\rLambdaProfile --\u0026gt; DynamoDB\rLambdaSocial --\u0026gt; DynamoDB\rLambdaPost --\u0026gt; DynamoDB\rLambdaNotification --\u0026gt; DynamoDB\rLambdaAdmin --\u0026gt; DynamoDB\rLambdaRecipe --\u0026gt; S3\rLambdaAuth --\u0026gt; CloudWatch\rLambdaRecipe --\u0026gt; CloudWatch\rLambdaAI --\u0026gt; CloudWatch\rAPIGateway --\u0026gt; WAFPhân Tích Chi Tiết Các Dịch Vụ#\r1. Frontend \u0026amp; CDN#\rAWS Amplify:\nHost ứng dụng Node.js Pipeline CI/CD (tự động deploy từ GitHub) Custom domain \u0026amp; SSL certificates Chi phí: ~$15/tháng Amazon CloudFront:\nCDN toàn cầu cho phân phối nội dung nhanh chóng Cache các static assets Chi phí: ~$5-10/tháng (1TB data transfer) 2. Xác Thực \u0026amp; Phân Quyền#\rAmazon Cognito User Pool:\nĐăng ký \u0026amp; đăng nhập người dùng Xác minh email Khôi phục mật khẩu Hỗ trợ MFA (tương lai) Chi phí: MIỄN PHÍ (\u0026lt; 50,000 ) Cognito Identity Pool:\nThông tin xác thực AWS tạm thời để truy cập S3 Quyền IAM chi tiết 3. Tầng API#\rAmazon API Gateway (REST):\nRESTful API endpoints Validation request Quản lý API key Throttling \u0026amp; rate limiting Cấu hình CORS Chi phí: ~$3.50 trên triệu requests API Endpoints#\rPOST /auth/register\rPOST /auth/login\rGET /user/profile\rPUT /user/profile\rPOST /user/ingredients\rGET /user/ingredients\rDELETE /user/ingredients/{id}\rPUT /user/privacy\rGET /user/privacy\rPOST /friends/request\rGET /friends\rPUT /friends/{id}/accept\rPUT /friends/{id}/reject\rDELETE /friends/{id}\rPOST /recipes\rGET /recipes/{id}\rPUT /recipes/{id}\rDELETE /recipes/{id}\rGET /recipes/search\rPOST /recipes/{id}/rate\rPOST /ai/suggest\rGET /ai/suggestions\rPOST /ai/feedback\rPOST /posts\rGET /posts/{id}\rPUT /posts/{id}\rDELETE /posts/{id}\rGET /posts/feed\rGET /posts/user/{userId}\rPOST /posts/{id}/comments\rGET /posts/{id}/comments\rPUT /comments/{id}\rDELETE /comments/{id}\rPOST /reactions\rDELETE /reactions/{id}\rGET /reactions/{targetType}/{targetId}\rGET /notifications\rPUT /notifications/{id}/read\rPUT /notifications/read-all4. Lambda Functions#\rLambda 1: Auth Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: Cognito Post-Authentication Mục đích: Tạo profile người dùng khi đăng nhập lần đầu Lambda 2: Recipe CRUD#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway Mục đích: Tạo, đọc, cập nhật, xóa recipes Upload ảnh recipe lên S3 Query DynamoDB Lambda 3: AI Suggestion Engine ⭐#\rRuntime: Node.js 20 Memory: 1024MB Timeout: 60s Triggers: API Gateway Mục đích: Gọi Amazon Bedrock (Claude 3.5) Tạo gợi ý công thức Phân tích nguyên liệu người dùng Lưu gợi ý vào DynamoDB Chi phí: Lambda tốn kém nhất (~70% chi phí compute) Lambda 4: User Profile Manager#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý profile \u0026amp; preferences người dùng Cập nhật danh sách nguyên liệu Xử lý upload avatar Quản lý cài đặt riêng tư Lambda 5: Social/Friends Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý yêu cầu kết bạn Chấp nhận/từ chối yêu cầu kết bạn Liệt kê danh sách bạn bè Lọc dữ liệu theo privacy settings Lambda 6: Posts \u0026amp; Comments Handler#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway Mục đích: Tạo, đọc, cập nhật, xóa bài đăng Quản lý bình luận (nested replies) Upload ảnh posts lên S3 Cập nhật counters (likes_count, comments_count) Lọc theo privacy settings Lambda 7: Notifications Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway, DynamoDB Streams Mục đích: Tạo thông báo khi có hoạt động (comment, like, friend request) Đánh dấu đã đọc/chưa đọc Lấy danh sách thông báo Push notifications (tương lai) Lambda 8: Admin Operations#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway (Chỉ Admin) Mục đích: Quản lý người dùng (ban/unban) Kiểm duyệt nội dung (posts, comments) Thống kê hệ thống Không cần phê duyệt recipes - Tự động approval dựa trên rating 5. Dịch Vụ AI/ML#\rAmazon Bedrock (Claude 3.5)#\rModel: Claude 3.5 Sonnet (hoặc Haiku để tiết kiệm chi phí) Use Case: AI agent gợi ý công thức Input: Profile người dùng + preferences + nguyên liệu Output: Gợi ý công thức với hướng dẫn Chi phí: Sonnet: $3 trên triệu input tokens, $15 trên triệu output tokens Haiku: $0.25 trên triệu input tokens, $1.25 trên triệu output tokens Ước tính: $25-50/tháng (1,000 users, 10 suggestions/user/tháng) Với Haiku: $3-7/tháng (tiết kiệm 70%) 6. Database#\rAmazon DynamoDB (NoSQL Database)#\rCác bảng:\nUsers (PK: user_id) - Tài khoản người dùng \u0026amp; roles UserData (PK: user_id, SK: data_type) - Preferences, nguyên liệu PrivacySettings (PK: user_id) - Cấu hình riêng tư Friendships (PK: user_id, SK: friend_id) - Kết nối mạng xã hội Recipes (PK: recipe_id, GSI: user_id) - Dữ liệu công thức RecipeRatings (PK: recipe_id, SK: user_id) - Đánh giá công thức AISuggestions (PK: user_id, SK: timestamp) - Lịch sử AI Posts (PK: post_id, GSI: user_id) - Bài đăng xã hội Comments (PK: post_id, SK: timestamp) - Bình luận Reactions (PK: target_id, SK: user_id) - Lượt thích Notifications (PK: user_id, SK: timestamp) - Thông báo Tính năng:\nAuto-scaling (on-demand mode) Point-in-time recovery (PITR) DynamoDB Streams (cho cập nhật real-time \u0026amp; notifications) Global Secondary Indexes (GSI) cho truy vấn Mã hóa at rest Chi phí: $25-40/tháng (on-demand pricing với social features) Tại sao chọn DynamoDB thay vì RDS?\n✅ Serverless (không cần quản lý server) ✅ Auto-scaling về zero cost khi idle ✅ Tích hợp tốt hơn với Lambda ✅ Độ trễ thấp hơn cho key-value access ✅ Tiết kiệm chi phí cho MVP ($15 vs $30+ cho RDS) 7. Lưu Trữ#\rAmazon S3#\rBuckets:\nrecipe-images-prod: Ảnh công thức user-avatars-prod: Ảnh đại diện post-images-prod: Ảnh bài đăng static-assets-prod: Assets ứng dụng Tính năng:\nVersioning enabled Lifecycle policies (xóa sau 90 ngày cho temp files) S3 Transfer Acceleration Chi phí: ~$10/tháng (100GB storage với social media images) 8. Bảo Mật#\rAWS WAF#\rBảo vệ:\nSQL injection XSS attacks Rate limiting (1000 requests/5min mỗi IP) Geographic restrictions (tùy chọn) Chi phí: $5/tháng + $1 trên triệu requests AWS Secrets Manager#\rSecrets:\nDatabase credentials (nếu dùng RDS) Third-party API keys (nếu cần) Chi phí: $0.40 mỗi secret mỗi tháng 9. Giám Sát \u0026amp; Logging#\rAmazon CloudWatch#\rLogs: Tất cả logs của Lambda functions Metrics: Metrics của API Gateway, Lambda, DynamoDB Alarms: Lambda errors \u0026gt; 1% API Gateway 5xx errors DynamoDB throttling Chi phí: ~$5-10/tháng AWS X-Ray#\rTracing: Tracing request từ đầu đến cuối Performance: Xác định bottlenecks Chi phí: $5 trên triệu traces (100k đầu miễn phí) Sơ Đồ Luồng Dữ Liệu#\rFlow 1: AI Recipe Suggestion (Smart Flow)#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaAI\rparticipant DynamoDB\rparticipant Bedrock\rUser-\u0026gt;\u0026gt;APIGateway: POST /ai/suggest (nguyên liệu)\rAPIGateway-\u0026gt;\u0026gt;LambdaAI: Xử lý request\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Query nguyên liệu người dùng\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Check nguyên liệu trùng database\ralt Nguyên liệu hợp lệ\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Tìm 4 món trong database\rLambdaAI-\u0026gt;\u0026gt;Bedrock: Tạo 1 món mới (AI)\rBedrock-\u0026gt;\u0026gt;LambdaAI: Công thức mới\rLambdaAI-\u0026gt;\u0026gt;User: Trả về 5 món (4 DB + 1 AI)\relse Nguyên liệu không hợp lệ/sai\rLambdaAI-\u0026gt;\u0026gt;User: Lỗi: \u0026#34;Nguyên liệu không hợp lệ. Gợi ý: [danh sách nguyên liệu gần đúng]\u0026#34;\rendFlow 2: Recipe Auto-Approval (Rating-based)#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaRecipe\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: Nấu món (AI generated)\rUser-\u0026gt;\u0026gt;APIGateway: Click \u0026#34;Hoàn thành\u0026#34;\rAPIGateway-\u0026gt;\u0026gt;User: Hiển thị form đánh giá\rUser-\u0026gt;\u0026gt;APIGateway: POST /recipes/{id}/rate (rating + comment)\rAPIGateway-\u0026gt;\u0026gt;LambdaRecipe: Lưu rating\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Save rating\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Calculate average rating\ralt Rating \u0026gt;= 4 sao\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Set recipe.is_approved = true\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Add to public recipes\rLambdaRecipe-\u0026gt;\u0026gt;User: \u0026#34;Công thức đã được thêm vào database!\u0026#34;\relse Rating \u0026lt; 4 sao\rLambdaRecipe-\u0026gt;\u0026gt;User: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34;\rendFlow 3: Social Interaction#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaPost\rparticipant LambdaNotification\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: POST /posts (chia sẻ công thức)\rAPIGateway-\u0026gt;\u0026gt;LambdaPost: Tạo post\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Save post\rLambdaPost-\u0026gt;\u0026gt;User: Post created\rUser-\u0026gt;\u0026gt;APIGateway: POST /posts/{id}/comments\rAPIGateway-\u0026gt;\u0026gt;LambdaPost: Tạo comment\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Save comment\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Update comments_count\rLambdaPost-\u0026gt;\u0026gt;LambdaNotification: Trigger notification\rLambdaNotification-\u0026gt;\u0026gt;DynamoDB: Create notification for post owner\rLambdaNotification-\u0026gt;\u0026gt;User: Push notificationFlow 4: Error Handling - Invalid Ingredients#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaAI\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: POST /ai/suggest {\u0026#34;ingredients\u0026#34;: [\u0026#34;abc xyz\u0026#34;, \u0026#34;123\u0026#34;]}\rAPIGateway-\u0026gt;\u0026gt;LambdaAI: Validate ingredients\ralt Nguyên liệu không tồn tại\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Fuzzy search similar ingredients\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Không tìm thấy nguyên liệu. Bạn có muốn: [gà, cá, tôm]?\u0026#34;\relse Nguyên liệu sai format\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Tên nguyên liệu không hợp lệ. Vui lòng nhập lại.\u0026#34;\relse Nguyên liệu quá ít (\u0026lt; 2)\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Cần ít nhất 2 nguyên liệu để tạo món ăn.\u0026#34;\rend"},{"id":1,"href":"/docs/summary/","title":"Summary","section":"Docs","content":"AWS Project Documentation#\rComplete documentation for Smart Cooking App project.\n"},{"id":2,"href":"/docs/summary/ai-agent-implementation/","title":"Kế Hoạch Triển Khai AI Agent","section":"Summary","content":"KẾ HOẠCH TRIỂN KHAI AI AGENT#\rHệ Thống Gợi Ý Công Thức Thông Minh\n   TỔNG QUAN#\rTính năng: AI Agent gợi ý món ăn thông minh dựa trên:\nThông tin cá nhân (giới tính, tuổi, quốc gia) Sở thích ẩm thực (món canh, món chiên, món hấp…) Nguyên liệu nhập đơn giản (chỉ tên, không quản lý số lượng/hạn dùng) Phạm vi:\n✅ User nhập danh sách nguyên liệu ✅ System check nguyên liệu hợp lệ ✅ Gợi ý 4 món từ database + 1 món AI tạo mới ✅ Auto-approval công thức dựa trên rating (\u0026gt;= 4 sao) ✅ Error handling cho nguyên liệu không hợp lệ Thời gian: 2 tuần (Tuần 3-4 trong deployment plan)\n   LUỒNG NGƯỜI DÙNG#\rFlow 1: Gợi Ý Món Ăn Thông Minh (Smart Suggestion)#\r┌─────────────────────────────────────────────────────────┐\r│ ĐẦU VÀO NGƯỜI DÙNG │\r├─────────────────────────────────────────────────────────┤\r│ Người dùng A: │\r│ • Nam, 1990 (34 tuổi), Vietnam │\r│ • Thích ăn: canh, món hấp │\r│ • Nguyên liệu nhập: Cá rô, bông súng, gừng, hành │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ VALIDATE \u0026amp; PROCESS │\r├─────────────────────────────────────────────────────────┤\r│ 1. Check nguyên liệu hợp lệ: │\r│ ✅ \u0026#34;Cá rô\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Bông súng\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Gừng\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Hành\u0026#34; → Có trong database │\r│ │\r│ 2. Tìm công thức: │\r│ - Query DynamoDB: 4 món match nguyên liệu │\r│ - Gọi AI Bedrock: 1 món mới sáng tạo │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ KẾT QUẢ GỢI Ý (5 MÓN) │\r├─────────────────────────────────────────────────────────┤\r│    Từ Database (4 món): │\r│ 1. Canh cá rô nấu bông súng │\r│ 2. Cá rô kho gừng │\r│ 3. Canh bông súng │\r│ 4. Cá rô chiên │\r│ │\r│    AI Generated (1 món mới): │\r│ 5. Cá rô hấp bông súng gừng hành │\r│ (Món độc đáo từ AI) │\r└─────────────────────────────────────────────────────────┘Flow 2: Auto-Approval Công Thức (Rating-based)#\r┌─────────────────────────────────────────────────────────┐\r│ USER NẤU MÓN AI TẠO │\r├─────────────────────────────────────────────────────────┤\r│ 1. User chọn món: \u0026#34;Cá rô hấp bông súng gừng hành\u0026#34; │\r│ 2. Làm theo hướng dẫn │\r│ 3. Click \u0026#34;Hoàn thành\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ ĐÁNH GIÁ CÔNG THỨC │\r├─────────────────────────────────────────────────────────┤\r│ Popup hiển thị: │\r│ • Rating: ⭐⭐⭐⭐⭐ (1-5 sao) │\r│ • Comment: \u0026#34;Món này rất ngon!\u0026#34; │\r│ • Submit │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ XỬ LÝ RATING │\r├─────────────────────────────────────────────────────────┤\r│ IF rating \u0026gt;= 4 sao: │\r│ ✅ Set recipe.is_approved = true │\r│ ✅ Add to public recipes database │\r│ ✅ Notify: \u0026#34;Công thức đã được thêm vào database!\u0026#34; │\r│ │\r│ ELSE (rating \u0026lt; 4 sao): │\r│ ℹ️ Notify: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34; │\r│ ❌ Không thêm vào database │\r└─────────────────────────────────────────────────────────┘Flow 3: Error Handling - Nguyên Liệu Không Hợp Lệ#\r┌─────────────────────────────────────────────────────────┐\r│ USER NHẬP NGUYÊN LIỆU SAI │\r├─────────────────────────────────────────────────────────┤\r│ Input: \u0026#34;abc xyz\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;thit ga\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ VALIDATE TỪNG NGUYÊN LIỆU │\r├─────────────────────────────────────────────────────────┤\r│ 1. \u0026#34;abc xyz\u0026#34; → ❌ Không tồn tại │\r│ → Fuzzy search: Tìm nguyên liệu gần đúng │\r│ → Gợi ý: \u0026#34;Bạn có muốn: [gà, cá, bò]?\u0026#34; │\r│ │\r│ 2. \u0026#34;123\u0026#34; → ❌ Format không hợp lệ │\r│ → Error: \u0026#34;Tên nguyên liệu không hợp lệ\u0026#34; │\r│ │\r│ 3. \u0026#34;thit ga\u0026#34; → ✅ Fuzzy match: \u0026#34;thịt gà\u0026#34; │\r│ → Auto-correct: \u0026#34;Bạn muốn dùng \u0026#39;thịt gà\u0026#39;?\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ ERROR RESPONSES │\r├─────────────────────────────────────────────────────────┤\r│ Case 1: Nguyên liệu không tồn tại │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;ingredient_not_found\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Không tìm thấy nguyên liệu: abc xyz\u0026#34;, │\r│ \u0026#34;suggestions\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;] │\r│ } │\r│ │\r│ Case 2: Format không hợp lệ │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;invalid_format\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Tên nguyên liệu không hợp lệ: 123\u0026#34; │\r│ } │\r│ │\r│ Case 3: Quá ít nguyên liệu │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;insufficient_ingredients\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Cần ít nhất 2 nguyên liệu\u0026#34; │\r│ } │\r│ │\r│ Case 4: Fuzzy match thành công │\r│ → HTTP 200: { │\r│ \u0026#34;corrected\u0026#34;: true, │\r│ \u0026#34;original\u0026#34;: \u0026#34;thit ga\u0026#34;, │\r│ \u0026#34;matched\u0026#34;: \u0026#34;thịt gà\u0026#34;, │\r│ \u0026#34;confidence\u0026#34;: 0.85 │\r│ } │\r└─────────────────────────────────────────────────────────┘   TRIỂN KHAI KỸ THUẬT#\rBackend: Node.js 20 Lambda Functions#\rLambda AI Suggestion Engine:\n// Sử dụng AWS SDK v3 cho Bedrock const { BedrockRuntimeClient, InvokeModelCommand } = require(\u0026#39;@aws-sdk/client-bedrock-runtime\u0026#39;); // Flow mới: // 1. Validate ingredients (check database existence) // 2. Query 4 recipes from DynamoDB matching ingredients // 3. Generate 1 new AI recipe using Bedrock // 4. Return 5 suggestions (4 DB + 1 AI) async function suggestRecipes(userIngredients, userPreferences) { // Step 1: Validate ingredients const validatedIngredients = await validateIngredients(userIngredients); if (!validatedIngredients.isValid) { return { error: \u0026#39;ingredient_not_found\u0026#39;, suggestions: validatedIngredients.suggestions }; } // Step 2: Query existing recipes from DynamoDB const dbRecipes = await queryRecipesByIngredients(validatedIngredients.ingredients, 4); // Step 3: Generate 1 AI recipe const aiRecipe = await generateAIRecipe(validatedIngredients.ingredients, userPreferences); // Step 4: Combine and return return { recipes: [...dbRecipes, aiRecipe], source: { database: dbRecipes.length, ai: 1 } }; } // Ingredient validation với fuzzy matching async function validateIngredients(ingredients) { const results = []; const suggestions = []; for (const ing of ingredients) { const exists = await checkIngredientExists(ing); if (!exists) { // Fuzzy search for similar ingredients const similar = await fuzzySearchIngredients(ing); suggestions.push({ original: ing, similar }); } else { results.push(ing); } } return { isValid: suggestions.length === 0, ingredients: results, suggestions }; }Lambda Recipe Rating Handler:\n// Auto-approval dựa trên rating async function handleRecipeRating(recipeId, userId, rating, comment) { // Save rating await saveRating(recipeId, userId, rating, comment); // Calculate average rating const avgRating = await calculateAverageRating(recipeId); // Auto-approve if \u0026gt;= 4 stars if (avgRating \u0026gt;= 4.0) { await updateRecipe(recipeId, { is_approved: true, is_public: true, approval_type: \u0026#39;auto_rating\u0026#39;, approved_at: new Date().toISOString() }); return { approved: true, message: \u0026#39;Công thức đã được thêm vào database!\u0026#39; }; } return { approved: false, message: \u0026#39;Cảm ơn đánh giá của bạn!\u0026#39; }; }Dịch Vụ Chính:\nAmazon Bedrock: Claude 3 Haiku model DynamoDB: Lưu trữ dữ liệu người dùng \u0026amp; gợi ý AI Lambda: Serverless compute (Node.js 20) API Gateway: REST API endpoints Cơ Sở Dữ Liệu: Amazon DynamoDB#\rCác Bảng Sử Dụng:\nUsers (PK: user_id) - Hồ sơ \u0026amp; vai trò UserData (PK: user_id, SK: PREFERENCES | INGREDIENTS) - Cài đặt người dùng Recipes (PK: recipe_id) - Công thức (có thêm field is_approved, approval_type) RecipeRatings (PK: recipe_id, SK: user_id) - Đánh giá công thức IngredientsMaster (PK: ingredient_id) - Master list nguyên liệu để validate PrivacySettings (PK: user_id) - Cấu hình quyền riêng tư Friendships (PK: user_id, SK: friend_id) - Kết nối xã hội AISuggestions (PK: user_id, SK: timestamp) - Lịch sử AI Triển Khai Quyền Riêng Tư:\n// Bộ lọc quyền riêng tư áp dụng trước khi trả về dữ liệu người dùng if (privacy.ingredients_visibility === \u0026#39;friends\u0026#39; \u0026amp;\u0026amp; !isFriend) { delete userProfile.ingredients; }API Endpoints#\rLuồng Gợi Ý AI (Updated):\nPOST /ai/suggest\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;ingredients\u0026#34;: [\u0026#34;cá rô\u0026#34;, \u0026#34;bông súng\u0026#34;, \u0026#34;gừng\u0026#34;]\r}\rResponse (Success - 5 suggestions):\r{\r\u0026#34;suggestions\u0026#34;: [\r{\r\u0026#34;id\u0026#34;: \u0026#34;recipe-001\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Canh cá rô nấu bông súng\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;,\r\u0026#34;match_score\u0026#34;: 0.95\r},\r{\r\u0026#34;id\u0026#34;: \u0026#34;recipe-002\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Cá rô kho gừng\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;,\r\u0026#34;match_score\u0026#34;: 0.88\r},\r{\r\u0026#34;id\u0026#34;: \u0026#34;recipe-003\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Canh bông súng\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;,\r\u0026#34;match_score\u0026#34;: 0.75\r},\r{\r\u0026#34;id\u0026#34;: \u0026#34;recipe-004\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Cá rô chiên\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;,\r\u0026#34;match_score\u0026#34;: 0.70\r},\r{\r\u0026#34;id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Cá rô hấp bông súng gừng hành\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;ai\u0026#34;,\r\u0026#34;is_new\u0026#34;: true,\r\u0026#34;ingredients\u0026#34;: [...],\r\u0026#34;instructions\u0026#34;: [...]\r}\r],\r\u0026#34;stats\u0026#34;: {\r\u0026#34;database_recipes\u0026#34;: 4,\r\u0026#34;ai_recipes\u0026#34;: 1\r}\r}\rResponse (Error - Invalid ingredient):\r{\r\u0026#34;error\u0026#34;: \u0026#34;ingredient_not_found\u0026#34;,\r\u0026#34;message\u0026#34;: \u0026#34;Không tìm thấy nguyên liệu: abc xyz\u0026#34;,\r\u0026#34;invalid_ingredients\u0026#34;: [\u0026#34;abc xyz\u0026#34;],\r\u0026#34;suggestions\u0026#34;: [\r{ \u0026#34;original\u0026#34;: \u0026#34;abc xyz\u0026#34;, \u0026#34;similar\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;] }\r]\r}Luồng Rating \u0026amp; Auto-Approval:\nPOST /recipes/{id}/rate\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;rating\u0026#34;: 5,\r\u0026#34;comment\u0026#34;: \u0026#34;Món này rất ngon!\u0026#34;\r}\rResponse (Auto-approved):\r{\r\u0026#34;success\u0026#34;: true,\r\u0026#34;rating_saved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 4.2,\r\u0026#34;auto_approved\u0026#34;: true,\r\u0026#34;message\u0026#34;: \u0026#34;Công thức đã được thêm vào database!\u0026#34;,\r\u0026#34;recipe\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;is_approved\u0026#34;: true,\r\u0026#34;is_public\u0026#34;: true\r}\r}\rResponse (Not approved):\r{\r\u0026#34;success\u0026#34;: true,\r\u0026#34;rating_saved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 3.5,\r\u0026#34;auto_approved\u0026#34;: false,\r\u0026#34;message\u0026#34;: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34;\r}Endpoints Quyền Riêng Tư \u0026amp; Xã Hội:\nPUT /user/privacy - Cập nhật cài đặt quyền riêng tư\rGET /user/profile/{userId} - Lấy hồ sơ (đã lọc quyền riêng tư)\rPOST /friends/request - Gửi yêu cầu kết bạn\rGET /friends - Danh sách bạn bèEndpoints Quản Trị:\nGET /admin/users - Danh sách tất cả người dùng (chỉ admin)\rPUT /admin/users/{id}/ban - Cấm người dùng (chỉ admin)\rGET /admin/statistics - Thống kê hệ thống (chỉ admin)\rGET /admin/recipes/pending - Công thức chờ approval (ít sử dụng do auto-approval)Endpoints Mới - Social Features:\nPOST /posts - Tạo bài đăng\rGET /posts/feed - Lấy newsfeed\rPOST /posts/{id}/comments - Bình luận\rPOST /reactions - Thêm reaction\rGET /notifications - Lấy thông báo   QUYỀN RIÊNG TƯ \u0026amp; BẢO MẬT#\rCác Mức Quyền Riêng Tư#\rPublic: Mọi người có thể xem Friends: Chỉ bạn bè đã chấp nhận có thể xem Private: Chỉ người dùng có thể xem Thuộc Tính Được Kiểm Soát Quyền Riêng Tư#\rEmail (mặc định: private) Ngày sinh (mặc định: friends) Giới tính (mặc định: public) Quốc gia (mặc định: public) Công thức (mặc định: public) Nguyên liệu (mặc định: friends) Sở thích (mặc định: friends) Kiểm Soát Truy Cập Theo Vai Trò#\rUser: Truy cập thông thường Admin: Truy cập đầy đủ + công cụ quản trị Thời Gian \u0026amp; Mốc Quan Trọng#\rXem Hướng Dẫn Triển Khai Khách Hàng để biết thời gian chi tiết.\n"},{"id":3,"href":"/docs/summary/database-diagram/","title":"Database Schema Diagram","section":"Summary","content":"Sơ Đồ Cấu Trúc Cơ Sở Dữ Liệu#\rERD (Sơ Đồ Quan Hệ Thực Thể)#\r// Bảng Người Dùng\rTable users {\ruser_id varchar(36) [pk, note: \u0026#39;UUID từ Cognito\u0026#39;]\remail varchar(255) [unique, not null]\rusername varchar(50) [unique, not null]\rfull_name varchar(100)\rdate_of_birth date\rgender enum(\u0026#39;male\u0026#39;, \u0026#39;female\u0026#39;, \u0026#39;other\u0026#39;)\rcountry varchar(50)\ravatar_url varchar(500)\rrole enum(\u0026#39;user\u0026#39;, \u0026#39;admin\u0026#39;) [default: \u0026#39;user\u0026#39;]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rlast_login timestamp\rindexes {\remail\rusername\rrole\r}\r}\r// Tùy Chọn Người Dùng\rTable user_preferences {\rpreference_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rdietary_restrictions json [note: \u0026#39;chay, thuần chay, halal, kosher, v.v.\u0026#39;]\rallergies json [note: \u0026#39;Danh sách dị ứng\u0026#39;]\rfavorite_cuisines json [note: \u0026#39;Ý, Việt Nam, Nhật Bản, v.v.\u0026#39;]\rcooking_methods json [note: \u0026#39;hấp, chiên, nướng, súp, v.v.\u0026#39;]\rspice_level enum(\u0026#39;none\u0026#39;, \u0026#39;mild\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;hot\u0026#39;, \u0026#39;very_hot\u0026#39;)\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\r}\r// Cài Đặt Quyền Riêng Tư\rTable privacy_settings {\rsetting_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null, unique]\rprofile_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;, note: \u0026#39;Ai có thể xem hồ sơ\u0026#39;]\remail_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;private\u0026#39;]\rdate_of_birth_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rgender_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rcountry_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rrecipes_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\ringredients_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rpreferences_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\r}\r}\r// Quan Hệ Bạn Bè\rTable friendships {\rfriendship_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rfriend_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rstatus enum(\u0026#39;pending\u0026#39;, \u0026#39;accepted\u0026#39;, \u0026#39;blocked\u0026#39;) [default: \u0026#39;pending\u0026#39;]\rrequested_at timestamp [default: `now()`]\rresponded_at timestamp\rindexes {\r(user_id, friend_id) [unique]\ruser_id\rfriend_id\rstatus\r}\r}\r// Nguyên Liệu Người Dùng (Danh sách đơn giản - không theo dõi số lượng)\rTable user_ingredients {\ringredient_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ringredient_name varchar(100) [not null]\rcategory varchar(50) [note: \u0026#39;thịt, rau, gia vị, sữa, v.v.\u0026#39;]\radded_at timestamp [default: `now()`]\rindexes {\r(user_id, ingredient_name) [unique]\r}\r}\r// Công Thức (Do người dùng tạo \u0026amp; AI tạo)\rTable recipes {\rrecipe_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, note: \u0026#39;Người tạo - null nếu là công thức hệ thống\u0026#39;]\rtitle varchar(200) [not null]\rnormalized_title varchar(200) [note: \u0026#39;Chữ thường, không dấu để tìm kiếm\u0026#39;]\rdescription text\rcuisine_type varchar(50)\rcooking_method varchar(50)\rdifficulty enum(\u0026#39;easy\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;hard\u0026#39;)\rprep_time_minutes int\rcook_time_minutes int\rservings int\rcalories_per_serving int\rinstructions json [note: \u0026#39;Mảng các đối tượng bước\u0026#39;]\rnutrition json [note: \u0026#39;Protein, carbs, chất béo, v.v.\u0026#39;]\ris_public boolean [default: false]\ris_ai_generated boolean [default: false]\rai_cache_hit_count int [default: 0, note: \u0026#39;Số lần tái sử dụng từ cache\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\rnormalized_title\rcuisine_type\rcooking_method\r}\r}\r// Bộ Nhớ Cache Công Thức (Công thức AI tạo để tái sử dụng)\rTable recipe_cache {\rcache_id varchar(36) [pk]\rrecipe_name varchar(200) [not null]\rnormalized_name varchar(200) [unique, not null, note: \u0026#39;Khóa tìm kiếm\u0026#39;]\rrecipe_data json [note: \u0026#39;JSON công thức đầy đủ từ AI\u0026#39;]\ringredients_hash varchar(64) [note: \u0026#39;Hash của danh sách nguyên liệu\u0026#39;]\rcuisine_type varchar(50)\rhit_count int [default: 0, note: \u0026#39;Bộ đếm tái sử dụng\u0026#39;]\rlast_accessed timestamp\rcreated_at timestamp [default: `now()`]\rindexes {\rnormalized_name\ringredients_hash\rcuisine_type\r}\r}\r// Nguyên Liệu Công Thức\rTable recipe_ingredients {\rid varchar(36) [pk]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\ringredient_name varchar(100) [not null]\rquantity varchar(50) [note: \u0026#39;2 chén, 500g, v.v.\u0026#39;]\runit varchar(20)\ris_optional boolean [default: false]\rindexes {\rrecipe_id\r}\r}\r// Lịch Sử Gợi Ý AI\rTable ai_suggestions {\rsuggestion_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id]\rcache_id varchar(36) [ref: \u0026gt; recipe_cache.cache_id, note: \u0026#39;Nếu từ cache\u0026#39;]\rprompt_text text [note: \u0026#39;Đầu vào của người dùng cho AI\u0026#39;]\ringredients_used json [note: \u0026#39;Danh sách nguyên liệu từ user_ingredients\u0026#39;]\rai_response json [note: \u0026#39;Phản hồi AI đầy đủ\u0026#39;]\rwas_from_cache boolean [default: false, note: \u0026#39;True nếu tái sử dụng từ cache\u0026#39;]\rwas_accepted boolean [default: false]\rfeedback_rating int [note: \u0026#39;1-5 sao\u0026#39;]\rfeedback_comment text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\rcache_id\r}\r}\r// Yêu Thích\rTable favorites {\rfavorite_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rcreated_at timestamp [default: `now()`]\rindexes {\r(user_id, recipe_id) [unique]\ruser_id\r}\r}\r// Kế Hoạch Bữa Ăn\rTable meal_plans {\rplan_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rplan_name varchar(100)\rstart_date date [not null]\rend_date date [not null]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rstart_date\r}\r}\r// Mục Kế Hoạch Bữa Ăn\rTable meal_plan_items {\ritem_id varchar(36) [pk]\rplan_id varchar(36) [ref: \u0026gt; meal_plans.plan_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rmeal_date date [not null]\rmeal_type enum(\u0026#39;breakfast\u0026#39;, \u0026#39;lunch\u0026#39;, \u0026#39;dinner\u0026#39;, \u0026#39;snack\u0026#39;)\rnotes text\rindexes {\rplan_id\rmeal_date\r}\r}\r// Nhật Ký Hoạt Động Người Dùng\rTable activity_logs {\rlog_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ractivity_type enum(\u0026#39;login\u0026#39;, \u0026#39;recipe_view\u0026#39;, \u0026#39;recipe_create\u0026#39;, \u0026#39;ai_suggestion\u0026#39;, \u0026#39;ingredient_add\u0026#39;)\ractivity_data json\rip_address varchar(45)\ruser_agent text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\ractivity_type\r}\r}\r// Bài Đăng (Posts)\rTable posts {\rpost_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, note: \u0026#39;Optional - nếu chia sẻ công thức\u0026#39;]\rcontent text [note: \u0026#39;Nội dung bài đăng\u0026#39;]\rimages json [note: \u0026#39;Mảng URLs ảnh\u0026#39;]\ris_public boolean [default: true]\rlikes_count int [default: 0]\rcomments_count int [default: 0]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\rrecipe_id\rcreated_at\ris_public\r}\r}\r// Bình Luận (Comments)\rTable comments {\rcomment_id varchar(36) [pk]\rpost_id varchar(36) [ref: \u0026gt; posts.post_id, not null]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rparent_comment_id varchar(36) [ref: \u0026gt; comments.comment_id, note: \u0026#39;Cho reply/thread\u0026#39;]\rcontent text [not null]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\rpost_id\ruser_id\rparent_comment_id\rcreated_at\r}\r}\r// Lượt Thích/Reactions\rTable reactions {\rreaction_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rtarget_type enum(\u0026#39;post\u0026#39;, \u0026#39;recipe\u0026#39;, \u0026#39;comment\u0026#39;) [not null]\rtarget_id varchar(36) [not null, note: \u0026#39;ID của post/recipe/comment\u0026#39;]\rreaction_type enum(\u0026#39;like\u0026#39;, \u0026#39;love\u0026#39;, \u0026#39;wow\u0026#39;, \u0026#39;sad\u0026#39;, \u0026#39;angry\u0026#39;) [default: \u0026#39;like\u0026#39;]\rcreated_at timestamp [default: `now()`]\rindexes {\r(user_id, target_type, target_id) [unique]\rtarget_type\rtarget_id\ruser_id\r}\r}\r// Thông Báo (Notifications)\rTable notifications {\rnotification_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ractor_id varchar(36) [ref: \u0026gt; users.user_id, note: \u0026#39;Người thực hiện hành động\u0026#39;]\rtype enum(\u0026#39;friend_request\u0026#39;, \u0026#39;friend_accept\u0026#39;, \u0026#39;comment\u0026#39;, \u0026#39;like\u0026#39;, \u0026#39;mention\u0026#39;, \u0026#39;recipe_share\u0026#39;) [not null]\rtarget_type enum(\u0026#39;post\u0026#39;, \u0026#39;recipe\u0026#39;, \u0026#39;comment\u0026#39;, \u0026#39;friend_request\u0026#39;) [not null]\rtarget_id varchar(36) [not null]\rcontent text [note: \u0026#39;Nội dung thông báo\u0026#39;]\ris_read boolean [default: false]\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\ris_read\rcreated_at\rtype\r}\r}\r// Người Theo Dõi (Followers) - Nếu muốn mô hình follow ngoài friendship\rTable user_followers {\rfollow_id varchar(36) [pk]\rfollower_id varchar(36) [ref: \u0026gt; users.user_id, not null, note: \u0026#39;Người theo dõi\u0026#39;]\rfollowing_id varchar(36) [ref: \u0026gt; users.user_id, not null, note: \u0026#39;Người được theo dõi\u0026#39;]\rcreated_at timestamp [default: `now()`]\rindexes {\r(follower_id, following_id) [unique]\rfollower_id\rfollowing_id\r}\r}Công Nghệ Cơ Sở Dữ Liệu#\rCơ Sở Dữ Liệu Chính: Amazon DynamoDB (NoSQL)\nKhả năng mở rộng cao Độ trễ thấp Serverless (không cần quản lý hạ tầng) Hiệu quả chi phí cho khối lượng công việc đọc nhiều Phương Án Thay Thế: Amazon RDS PostgreSQL\nNếu cần các truy vấn quan hệ phức tạp Tốt hơn cho phân tích và báo cáo Mẫu Truy Cập Dữ Liệu#\rMẫu Truy Cập Chính#\rLấy Hồ Sơ Người Dùng: users.user_id → Dữ liệu người dùng + vai trò Lấy Tùy Chọn Người Dùng: user_preferences.user_id → Tùy chọn Lấy Nguyên Liệu Người Dùng: user_ingredients.user_id → Danh sách nguyên liệu Lấy Cài Đặt Quyền Riêng Tư: privacy_settings.user_id → Cấu hình riêng tư Kiểm Tra Quan Hệ Bạn Bè: friendships(user_id, friend_id) → Trạng thái bạn bè Lấy Danh Sách Bạn Bè: friendships.user_id → Tất cả bạn bè Lấy Chi Tiết Công Thức: recipes.recipe_id → Công thức + Nguyên liệu Lấy Công Thức Người Dùng: recipes.user_id → Công thức của người dùng (lọc theo quyền riêng tư) Lấy Gợi Ý AI: ai_suggestions.user_id + created_at → Gợi ý gần đây Lấy Yêu Thích: favorites.user_id → Công thức yêu thích Lấy Kế Hoạch Bữa Ăn: meal_plans.user_id + start_date → Kế hoạch bữa ăn đang hoạt động Lấy Bài Đăng Người Dùng: posts.user_id + created_at → Danh sách bài đăng Lấy Newsfeed: posts(bạn bè) + created_at → Bài đăng của bạn bè Lấy Bình Luận: comments.post_id + created_at → Bình luận của bài đăng Lấy Reactions: reactions(target_type, target_id) → Lượt thích/reactions Lấy Thông Báo: notifications.user_id + is_read → Thông báo chưa đọc Lấy Followers: user_followers.following_id → Danh sách người theo dõi Mẫu Thứ Cấp#\rTìm kiếm công thức theo món ăn/phương pháp (với lọc quyền riêng tư) Lấy công thức công khai phổ biến Quản trị: Lấy tất cả người dùng với bộ lọc vai trò Quản trị: Lấy thống kê người dùng Truy vấn phân tích (nhật ký hoạt động) Thiết Kế Bảng DynamoDB (Mẫu Bảng Đơn)#\rBảng Chính: smart-cooking-data#\rNgười Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PROFILE Thuộc tính: email, username, full_name, role, is_active, v.v. GSI1PK: ROLE#\u0026lt;role\u0026gt; (cho truy vấn quản trị) Tùy Chọn Người Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PREFERENCES Thuộc tính: dietary_restrictions, allergies, favorite_cuisines, v.v. Cài Đặt Quyền Riêng Tư#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PRIVACY Thuộc tính: profile_visibility, email_visibility, v.v. Nguyên Liệu Người Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: INGREDIENT#\u0026lt;ingredient_name\u0026gt; Thuộc tính: category, added_at Quan Hệ Bạn Bè#\rPK: USER#\u0026lt;user_id\u0026gt; SK: FRIEND#\u0026lt;friend_id\u0026gt; Thuộc tính: status, requested_at, responded_at GSI1PK: USER#\u0026lt;friend_id\u0026gt; (để tra cứu ngược) GSI1SK: FRIEND#\u0026lt;user_id\u0026gt; Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: METADATA Thuộc tính: title, description, cuisine_type, difficulty, v.v. GSI1PK: USER#\u0026lt;user_id\u0026gt; (công thức của người dùng) GSI1SK: RECIPE#\u0026lt;created_at\u0026gt; Nguyên Liệu Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: INGREDIENT#\u0026lt;number\u0026gt; Thuộc tính: ingredient_name, quantity, unit Gợi Ý AI#\rPK: USER#\u0026lt;user_id\u0026gt; SK: SUGGESTION#\u0026lt;timestamp\u0026gt; Thuộc tính: recipe_id, prompt_text, ai_response, was_accepted Yêu Thích#\rPK: USER#\u0026lt;user_id\u0026gt; SK: FAVORITE#\u0026lt;recipe_id\u0026gt; Thuộc tính: created_at Bài Đăng (Posts)#\rPK: POST#\u0026lt;post_id\u0026gt; SK: METADATA Thuộc tính: user_id, recipe_id, content, images, is_public, likes_count, comments_count GSI1PK: USER#\u0026lt;user_id\u0026gt; (bài đăng của người dùng) GSI1SK: POST#\u0026lt;created_at\u0026gt; Bình Luận (Comments)#\rPK: POST#\u0026lt;post_id\u0026gt; SK: COMMENT#\u0026lt;timestamp\u0026gt;#\u0026lt;comment_id\u0026gt; Thuộc tính: user_id, parent_comment_id, content GSI1PK: USER#\u0026lt;user_id\u0026gt; (bình luận của người dùng) GSI1SK: COMMENT#\u0026lt;timestamp\u0026gt; Reactions (Lượt thích)#\rPK: \u0026lt;target_type\u0026gt;#\u0026lt;target_id\u0026gt; (ví dụ: POST#123, RECIPE#456) SK: REACTION#\u0026lt;user_id\u0026gt; Thuộc tính: reaction_type, created_at GSI1PK: USER#\u0026lt;user_id\u0026gt; (reactions của người dùng) GSI1SK: REACTION#\u0026lt;created_at\u0026gt; Thông Báo (Notifications)#\rPK: USER#\u0026lt;user_id\u0026gt; SK: NOTIFICATION#\u0026lt;timestamp\u0026gt;#\u0026lt;notification_id\u0026gt; Thuộc tính: actor_id, type, target_type, target_id, content, is_read GSI1PK: USER#\u0026lt;user_id\u0026gt;#UNREAD (nếu is_read=false) GSI1SK: NOTIFICATION#\u0026lt;timestamp\u0026gt; Followers#\rPK: USER#\u0026lt;following_id\u0026gt; SK: FOLLOWER#\u0026lt;follower_id\u0026gt; Thuộc tính: created_at GSI1PK: USER#\u0026lt;follower_id\u0026gt; (tra cứu ngược - ai người này đang follow) GSI1SK: FOLLOWING#\u0026lt;following_id\u0026gt; Chỉ Mục Thứ Cấp Toàn Cục (GSI)#\rGSI1: Truy vấn dựa trên người dùng\nPK: GSI1PK (ví dụ: ROLE#admin, USER#\u0026lt;user_id\u0026gt;) SK: GSI1SK (ví dụ: timestamp, RECIPE#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Lấy tất cả quản trị viên Lấy công thức của người dùng sắp xếp theo ngày Lấy quan hệ bạn bè (tra cứu ngược) Lấy bài đăng của người dùng Lấy bình luận của người dùng Lấy reactions của người dùng Lấy thông báo chưa đọc Lấy danh sách following GSI2: Tìm kiếm \u0026amp; khám phá công thức\nPK: GSI2PK (ví dụ: CUISINE#\u0026lt;type\u0026gt;, METHOD#\u0026lt;type\u0026gt;) SK: GSI2SK (ví dụ: RECIPE#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Tìm kiếm công thức theo món ăn Tìm kiếm công thức theo phương pháp nấu Lấy công thức phổ biến GSI3: Social Feed \u0026amp; Discovery\nPK: GSI3PK (ví dụ: FEED#\u0026lt;user_id\u0026gt;, PUBLIC) SK: GSI3SK (ví dụ: POST#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Lấy newsfeed (bài đăng của bạn bè) Lấy bài đăng công khai (explore feed) Lấy bài đăng trending Ước Tính Dung Lượng Lưu Trữ \u0026amp; Chi Phí#\rGiả Định#\r1.000 người dùng hoạt động Trung bình 20 nguyên liệu mỗi người dùng Trung bình 5 công thức đã lưu mỗi người dùng Trung bình 10 gợi ý AI mỗi người dùng mỗi tháng Trung bình 10 bài đăng mỗi người dùng Trung bình 30 bình luận mỗi người dùng Trung bình 100 reactions mỗi người dùng Trung bình 50 thông báo mỗi người dùng Trung bình 20 followers mỗi người dùng Ước Tính Dung Lượng#\rNgười dùng: 1.000 × 1KB = 1MB Nguyên liệu người dùng: 1.000 × 20 × 0.5KB = 10MB Công thức: 5.000 × 5KB = 25MB Gợi ý AI: 10.000 × 2KB = 20MB Bài đăng: 10.000 × 3KB = 30MB Bình luận: 30.000 × 0.5KB = 15MB Reactions: 100.000 × 0.2KB = 20MB Thông báo: 50.000 × 0.5KB = 25MB Followers: 20.000 × 0.3KB = 6MB Tổng cộng: ~150MB Chi Phí DynamoDB (Hàng Tháng)#\rLưu trữ: 150MB × $0.25/GB = ~$0.04 Khả năng đọc: ~$10-15 (tăng do social feeds) Khả năng ghi: ~$10-15 (tăng do posts, comments, reactions) GSI (3 indexes): ~$5-10 Tổng cộng: ~$25-40/tháng "},{"id":4,"href":"/docs/summary/cost-analysis/","title":"Phân Tích Chi Phí","section":"Summary","content":"PHÂN TÍCH CHI PHÍ DỰ ÁN#\r   Chi Phí Hàng Tháng (1,000 users)#\rDịch Vụ Chi Phí Ước Tính Ghi Chú AWS Amplify $15 Hosting Next.js + CI/CD Amazon CloudFront $8 CDN, 1TB data transfer Amazon API Gateway $8 ~150K requests/tháng (tăng do social) AWS Lambda Functions $20 8 Lambda functions (thêm Posts, Notifications) Amazon Bedrock (Sonnet) $40 Claude 3.5 Sonnet Amazon Bedrock (Haiku) $5 Claude 3 Haiku (tiết kiệm) Amazon DynamoDB $35 On-demand với social features Amazon S3 $10 100GB storage (posts images) Amazon Cognito FREE \u0026lt; 50,000 MAU Amazon CloudWatch $10 Logs \u0026amp; Metrics (tăng do thêm Lambda) AWS WAF $6 Web Application Firewall AWS Secrets Manager $2 API keys storage Tổng Chi Phí#\rKịch Bản Chi Phí/Tháng Sử dụng Claude Sonnet ~$154 Sử dụng Claude Haiku ~$119    Khuyến nghị: Sử dụng Claude 3 Haiku để tiết kiệm 70% chi phí AI (~$35/tháng)\n   Phân Tích Chi Phí Theo Quy Mô#\rKịch Bản 1: MVP (1,000 users)#\rChi phí: $119-154/tháng Chi phí/user: $0.119-0.154/tháng Doanh thu cần: $400-500/tháng (ROI 3-4x) Kịch Bản 2: Tăng Trưởng (10,000 users)#\rChi phí: $300-400/tháng Chi phí/user: $0.030-0.040/tháng Doanh thu cần: $1,200-1,600/tháng Kịch Bản 3: Scale (100,000 users)#\rChi phí: $1,500-2,000/tháng Chi phí/user: $0.015-0.020/tháng Doanh thu cần: $6,000-8,000/tháng    Chiến Lược Tối Ưu Chi Phí#\r1. AI/ML Costs (40-50% tổng chi phí)#\r✅ Sử dụng Claude 3 Haiku thay vì Sonnet → Tiết kiệm $35/tháng (70%) ✅ Cache AI responses với recipe_cache table → Giảm 30-40% AI calls ✅ Prompt optimization → Giảm token usage 20% ✅ Rate limiting → Ngăn abuse Tiết kiệm ước tính: $40-50/tháng\n2. Database Costs (25-30% tổng chi phí)#\r✅ DynamoDB on-demand → Chỉ trả khi sử dụng ✅ TTL cho old AI suggestions → Giảm storage ✅ Batch operations → Giảm write units ✅ Compression cho JSON fields → Giảm storage 30% ✅ Optimize GSI usage → Giảm chi phí index cho social features Tiết kiệm ước tính: $8-12/tháng\n3. CDN \u0026amp; Hosting (15-20% tổng chi phí)#\r✅ CloudFront caching → Giảm origin requests ✅ Image optimization → Giảm bandwidth ✅ Gzip compression → Giảm 60% transfer size ✅ Lazy loading → Giảm initial load Tiết kiệm ước tính: $5-8/tháng\n4. Lambda Costs (12-15% tổng chi phí)#\r✅ Reserved concurrency → Ngăn runaway costs ✅ Memory optimization → Giảm execution cost ✅ Connection pooling → Giảm cold starts ✅ Code minification → Giảm package size ✅ Optimize Posts/Notifications Lambda → Batch processing Tiết kiệm ước tính: $4-6/tháng\n5. Storage Costs (8-10% tổng chi phí)#\r✅ S3 Intelligent-Tiering → Auto-optimize ✅ Lifecycle policies → Xóa temp files sau 90 ngày ✅ Image compression → WebP format ✅ Thumbnail generation → Giảm storage ✅ Posts image optimization → Compress trước khi upload Tiết kiệm ước tính: $3-5/tháng\n   Chi Phí Dự Kiến Theo Thời Gian#\rNăm 1#\rTháng Users Chi Phí Revenue Target 1-3 100 $80 $250 (Beta) 4-6 500 $95 $350 7-9 1,500 $130 $500 10-12 3,000 $180 $700 Năm 2#\rQuarter Users Chi Phí Revenue Target Q1 5,000 $220 $1,000 Q2 8,000 $280 $1,500 Q3 12,000 $350 $2,200 Q4 20,000 $500 $3,500    Break-Even Analysis#\rMô Hình Freemium#\rFree tier: Giới hạn 10 AI suggestions/tháng Premium tier: $4.99/tháng (unlimited) Conversion rate target: 5% Tháng 1-3 (1,000 users)#\rPremium users: 50 (5%) Revenue: $250/tháng Cost: $119/tháng Profit: $131/tháng ✅ Tháng 12 (10,000 users)#\rPremium users: 500 (5%) Revenue: $2,500/tháng Cost: $350/tháng Profit: $2,150/tháng ✅ Mô Hình Ads (Alternative)#\rAd revenue: $0.50-1.00/user/tháng 1,000 users = $500-1,000/tháng Cost: $119/tháng Profit: $381-881/tháng ✅    Chi Phí Bảo Mật \u0026amp; Compliance#\rItem Chi Phí/Tháng AWS WAF $6 AWS Secrets Manager $2 SSL/TLS Certificates FREE (ACM) DDoS Protection (Shield Standard) FREE Encryption at Rest FREE CloudWatch Alarms $1 Total $9    Chi Phí Tăng Trưởng Dự Kiến#\rMarketing \u0026amp; Growth (Ngoài AWS)#\rMarketing: $500-1,000/tháng (Facebook Ads, Google Ads) Support: $200-500/tháng (Zendesk/Intercom) Analytics: $50-100/tháng (Mixpanel/Amplitude) Payment Processing: 2.9% + $0.30/transaction (Stripe) Total Operating Costs (Tháng 12)#\rAWS Infrastructure: $180 Marketing: $800 Support: $300 Analytics: $75 Payment Processing: $75 (3% × $2,500) Total: $1,430/tháng    ROI Projection#\rYear 1#\rTotal Investment: $10,000 (dev) + $1,800 (AWS) = $11,800 Revenue Year 1: $20,000 (average $1,667/tháng) ROI: 70% ✅ Year 2#\rTotal Investment: $5,000 (maintenance) + $4,000 (AWS) Revenue Year 2: $70,000 (average $5,833/tháng) ROI: 680% ✅✅    Khuyến Nghị Cuối Cùng#\rGiai Đoạn MVP (0-3 tháng)#\r✅ Sử dụng Claude 3 Haiku (tiết kiệm $35/tháng) ✅ Implement recipe cache (giảm 30% AI calls) ✅ Enable CloudFront caching (giảm bandwidth) ✅ Set billing alarms tại $120, $150, $200 ✅ Optimize social features - lazy load feeds Chi phí target: $80-120/tháng\nGiai Đoạn Growth (4-12 tháng)#\r✅ Monitor \u0026amp; optimize dựa trên usage patterns ✅ Scale DynamoDB capacity dần dần ✅ Consider Reserved Instances khi stable ✅ Implement advanced caching strategies ✅ Optimize image storage cho posts Chi phí target: $120-350/tháng\nGiai Đoạn Scale (Year 2+)#\r✅ Negotiate Enterprise Pricing với AWS ✅ Consider Savings Plans (20-40% discount) ✅ Optimize architecture dựa trên real data ✅ Automate cost monitoring \u0026amp; alerts Chi phí target: \u0026lt; $0.02/user/tháng\n"}]