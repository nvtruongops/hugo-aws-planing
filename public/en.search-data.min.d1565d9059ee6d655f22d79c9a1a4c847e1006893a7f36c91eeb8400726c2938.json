[{"id":0,"href":"/docs/dlc/00-overview/","title":"00 - Project Overview","section":"Docs","content":"Tổng Quan Dự Án - Smart Cooking App#\rMục Tiêu Dự Án#\rVision#\rXây dựng nền tảng ứng dụng nấu ăn thông minh sử dụng AI để:\nCá nhân hóa gợi ý công thức dựa trên nguyên liệu có sẵn Tối ưu hóa việc sử dụng nguyên liệu để giảm lãng phí thực phẩm Kết nối cộng đồng người yêu thích nấu ăn Tự động hóa quá trình phê duyệt công thức bằng rating system Mission#\rTạo trải nghiệm nấu ăn thông minh, dễ dàng và thú vị cho người dùng thông qua:\nAI Agent gợi ý món ăn phù hợp với profile và sở thích cá nhân Hệ thống tự động approval công thức dựa trên đánh giá cộng đồng Nền tảng chia sẻ kinh nghiệm nấu ăn xã hội Kiến trúc serverless tiết kiệm chi phí và dễ scale Phạm Vi Dự Án#\rMVP (Minimum Viable Product) - Phase 1#\rCore Features#\rAuthentication \u0026amp; User Management\nĐăng ký/Đăng nhập với Cognito Profile với thông tin cá nhân (năm sinh, giới tính, quốc gia) Quản lý sở thích món ăn (canh, món chiên, món hấp\u0026hellip;) Ingredient Management\nNhập danh sách nguyên liệu đơn giản (chỉ tên) Validation với master ingredients database Fuzzy search \u0026amp; auto-correct AI Recipe Suggestion Engine\nFlexible mix: Database + AI generated recipes User request 1-5 món, system tự động mix: Query approved recipes từ DB (match ingredients + categories) Generate thiếu số món bằng AI Category-based diversity (xào, canh, hấp, chiên\u0026hellip;) Invalid ingredient reporting system Cooking History \u0026amp; Rating System\nTheo dõi lịch sử nấu ăn cá nhân Rating system (1-5 sao) cho mỗi món đã nấu Auto-approval: Recipe \u0026gt;= 4.0 sao → Tự động thêm vào DB Personal notes \u0026amp; favorites Recipe Database\nLưu trữ approved recipes Tìm kiếm theo ingredients, category, cooking method Public access cho approved recipes Technical MVP#\rFrontend: Next.js hosted on AWS Amplify Backend: Lambda Functions (Node.js 20) Database: DynamoDB single-table design AI: Amazon Bedrock (Claude 3 Haiku) Auth: Amazon Cognito Storage: S3 for images CDN: CloudFront Phase 2 - Social Features#\rPrivacy Settings\nKiểm soát visibility cho profile, ingredients, recipes 3 levels: Public, Friends, Private Social Network\nFriend requests \u0026amp; connections Privacy-aware data filtering Posts \u0026amp; Comments\nChia sẻ công thức đã nấu Upload ảnh món ăn Comment \u0026amp; reactions Newsfeed Notifications\nFriend requests, comments, likes Recipe approval notifications Real-time updates (future: WebSocket)    Stakeholders#\rPrimary Stakeholders#\rEnd Users (Home Cooks)\nAge range: 20-50 tuổi Tech-savvy, mobile-first Muốn nấu ăn hiệu quả và sáng tạo Project Owner (You)\nQuản lý dự án Định hướng product Theo dõi metrics \u0026amp; costs Secondary Stakeholders#\rAWS (Infrastructure Provider)\nServerless services Cost optimization Scalability support AI Provider (Amazon Bedrock)\nClaude 3 Haiku/Sonnet models API reliability Cost-effective AI Community Contributors (Future)\nRecipe contributors Content moderators Beta testers Success Metrics#\rUser Metrics#\rUser Growth: 1,000 users trong 3 tháng đầu Engagement: MAU (Monthly Active Users): \u0026gt;= 60% AI suggestion usage: \u0026gt;= 10 suggestions/user/month Recipe cooking rate: \u0026gt;= 30% (users thực sự nấu món) Rating participation: \u0026gt;= 50% (users rate sau khi nấu) Technical Metrics#\rPerformance: API response time: \u0026lt; 500ms (excluding AI generation) AI generation time: \u0026lt; 5s per recipe System uptime: \u0026gt;= 99.5% Quality: Recipe approval rate: \u0026gt;= 40% (AI recipes đạt 4+ sao) Invalid ingredient rate: \u0026lt; 5% Error rate: \u0026lt; 1% Business Metrics#\rCost Efficiency: Cost per user: \u0026lt; $0.20/month (MVP phase) DB coverage growth: 0% → 60% trong 6 tháng AI cost reduction: 30-50% through flexible mix Revenue (Future): Freemium conversion: \u0026gt;= 5% Premium tier: $4.99/month Break-even: Month 3 Key Differentiators#\r1. Flexible AI/DB Mix Strategy#\rSmart: Tự động balance giữa DB queries và AI generation Cost-effective: Tiết kiệm 30-70% AI cost khi DB coverage tăng Scalable: Auto-build DB từ popular AI recipes 2. Community-Driven Approval#\rNo manual approval: Auto-approve dựa trên rating \u0026gt;= 4.0 sao Democratic: Community quyết định recipe quality Scalable: Không cần moderator team 3. Privacy-First Social#\rUser control: Granular privacy settings Transparent: Clear data usage policy cho AI Safe: Friend-only or private sharing options 4. Serverless Architecture#\rZero idle cost: Pay only for usage Auto-scaling: Từ 10 users → 10K users Low maintenance: Managed services Product Philosophy#\rDesign Principles#\rSimplicity First: MVP focus on core value - AI suggestions User Privacy: Transparent AI data usage, user control Community Quality: Let users decide what\u0026rsquo;s good Cost Awareness: Build for scale, optimize for cost Data-Driven: Metrics-based feature decisions Development Principles#\rServerless First: Use managed services Single Responsibility: Each Lambda does one thing well Fail Fast: Validate early, fail gracefully Monitor Everything: CloudWatch, X-Ray, alarms Security by Default: IAM, WAF, encryption Timeline Overview#\rPhase Duration Key Deliverables Phase 0: Planning \u0026amp; Design Week 1-2 Architecture, Database design, Cost analysis Phase 1: Core MVP Week 0-3 Auth, Ingredients, AI Engine, Rating System Phase 2: Social Features Week 3-8 Privacy, Friends, Posts, Notifications Expected Outcomes#\rShort-term (3 months)#\rMVP deployed và stable 500-1,000 active users 40%+ AI recipes approved Database coverage: 20-30% Monthly cost: $135-160 Related Documents#\r01 - Requirements 02 - Constraints 10 - Architecture 30 - Cost Analysis "},{"id":1,"href":"/docs/summary/aws-services-diagram/","title":"AWS Services Architecture Diagram","section":"Summary","content":"Sơ Đồ Kiến Trúc Dịch Vụ AWS#\rKiến Trúc Hệ Thống#\rgraph TB\rsubgraph \u0026#34;Tầng Client\u0026#34;\rWebApp[Web App\u0026lt;br/\u0026gt;Next.js]\rMobileApp[Mobile App\u0026lt;br/\u0026gt;React Native - Tương lai]\rend\rsubgraph \u0026#34;CDN \u0026amp; Hosting\u0026#34;\rCloudFront[Amazon CloudFront\u0026lt;br/\u0026gt;CDN]\rAmplify[AWS Amplify\u0026lt;br/\u0026gt;Hosting \u0026amp; CI/CD]\rend\rsubgraph \u0026#34;Tầng API Gateway\u0026#34;\rAPIGateway[Amazon API Gateway\u0026lt;br/\u0026gt;REST API]\rWSGateway[API Gateway\u0026lt;br/\u0026gt;WebSocket - Tương lai]\rend\rsubgraph \u0026#34;Xác Thực\u0026#34;\rCognitoUser[Amazon Cognito\u0026lt;br/\u0026gt;User Pool]\rCognitoIdentity[Cognito Identity Pool]\rend\rsubgraph \u0026#34;Tầng Compute\u0026#34;\rLambdaAuth[Lambda: Auth Handler\u0026lt;br/\u0026gt;Node.js 20]\rLambdaRecipe[Lambda: Recipe CRUD\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAI[Lambda: AI Suggestion\u0026lt;br/\u0026gt;Node.js 20]\rLambdaProfile[Lambda: User Profile\u0026lt;br/\u0026gt;Node.js 20]\rLambdaSocial[Lambda: Social/Friends\u0026lt;br/\u0026gt;Node.js 20]\rLambdaPost[Lambda: Posts \u0026amp; Comments\u0026lt;br/\u0026gt;Node.js 20]\rLambdaNotification[Lambda: Notifications\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAdmin[Lambda: Admin Operations\u0026lt;br/\u0026gt;Node.js 20]\rLambdaCooking[Lambda: Cooking History\u0026lt;br/\u0026gt;Node.js 20]\rLambdaRating[Lambda: Rating \u0026amp; Approval\u0026lt;br/\u0026gt;Node.js 20]\rLambdaIngredient[Lambda: Ingredient Validation\u0026lt;br/\u0026gt;Node.js 20]\rend\rsubgraph \u0026#34;Dịch Vụ AI\u0026#34;\rBedrock[Amazon Bedrock\u0026lt;br/\u0026gt;Claude 3.5 Sonnet/Haiku]\rend\rsubgraph \u0026#34;Tầng Database\u0026#34;\rDynamoDB[Amazon DynamoDB\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Bảng: Users\u0026lt;br/\u0026gt;Bảng: UserData\u0026lt;br/\u0026gt;Bảng: Recipes\u0026lt;br/\u0026gt;Bảng: RecipeRatings\u0026lt;br/\u0026gt;Bảng: UserCookingHistory\u0026lt;br/\u0026gt;Bảng: MasterIngredients\u0026lt;br/\u0026gt;Bảng: AI_Suggestions\u0026lt;br/\u0026gt;Bảng: Privacy\u0026lt;br/\u0026gt;Bảng: Friendships\u0026lt;br/\u0026gt;Bảng: Posts\u0026lt;br/\u0026gt;Bảng: Comments\u0026lt;br/\u0026gt;Bảng: Reactions\u0026lt;br/\u0026gt;Bảng: Notifications]\rend\rsubgraph \u0026#34;Lưu Trữ\u0026#34;\rS3[Amazon S3\u0026lt;br/\u0026gt;User Uploads \u0026amp; Assets]\rend\rsubgraph \u0026#34;Giám Sát \u0026amp; Logging\u0026#34;\rCloudWatch[Amazon CloudWatch\u0026lt;br/\u0026gt;Logs \u0026amp; Metrics]\rXRay[AWS X-Ray\u0026lt;br/\u0026gt;Tracing]\rend\rsubgraph \u0026#34;Bảo Mật\u0026#34;\rWAF[AWS WAF\u0026lt;br/\u0026gt;Web Application Firewall]\rSecrets[AWS Secrets Manager\u0026lt;br/\u0026gt;API Keys]\rend\rWebApp --\u0026gt; CloudFront\rCloudFront --\u0026gt; Amplify\rWebApp --\u0026gt; APIGateway\rAPIGateway --\u0026gt; CognitoUser\rCognitoUser --\u0026gt; LambdaAuth\rCognitoIdentity --\u0026gt; S3\rAPIGateway --\u0026gt; LambdaRecipe\rAPIGateway --\u0026gt; LambdaAI\rAPIGateway --\u0026gt; LambdaProfile\rAPIGateway --\u0026gt; LambdaSocial\rAPIGateway --\u0026gt; LambdaPost\rAPIGateway --\u0026gt; LambdaNotification\rAPIGateway --\u0026gt; LambdaAdmin\rAPIGateway --\u0026gt; LambdaCooking\rAPIGateway --\u0026gt; LambdaRating\rAPIGateway --\u0026gt; LambdaIngredient\rLambdaAI --\u0026gt; Bedrock\rLambdaRecipe --\u0026gt; DynamoDB\rLambdaAI --\u0026gt; DynamoDB\rLambdaProfile --\u0026gt; DynamoDB\rLambdaSocial --\u0026gt; DynamoDB\rLambdaPost --\u0026gt; DynamoDB\rLambdaNotification --\u0026gt; DynamoDB\rLambdaAdmin --\u0026gt; DynamoDB\rLambdaCooking --\u0026gt; DynamoDB\rLambdaRating --\u0026gt; DynamoDB\rLambdaIngredient --\u0026gt; DynamoDB\rLambdaRecipe --\u0026gt; S3\rLambdaAuth --\u0026gt; CloudWatch\rLambdaRecipe --\u0026gt; CloudWatch\rLambdaAI --\u0026gt; CloudWatch\rLambdaCooking --\u0026gt; CloudWatch\rLambdaRating --\u0026gt; CloudWatch\rAPIGateway --\u0026gt; WAFPhân Tích Chi Tiết Các Dịch Vụ#\r1. Frontend \u0026amp; CDN#\rAWS Amplify:\nHost ứng dụng Node.js Pipeline CI/CD (tự động deploy từ GitHub) Custom domain \u0026amp; SSL certificates Chi phí: ~$15/tháng Amazon CloudFront:\nCDN toàn cầu cho phân phối nội dung nhanh chóng Cache các static assets Chi phí: ~$5-10/tháng (1TB data transfer) 2. Xác Thực \u0026amp; Phân Quyền#\rAmazon Cognito User Pool:\nĐăng ký \u0026amp; đăng nhập người dùng Xác minh email Khôi phục mật khẩu Hỗ trợ MFA (tương lai) Chi phí: MIỄN PHÍ (\u0026lt; 50,000 ) Cognito Identity Pool:\nThông tin xác thực AWS tạm thời để truy cập S3 Quyền IAM chi tiết 3. Tầng API#\rAmazon API Gateway (REST):\nRESTful API endpoints Validation request Quản lý API key Throttling \u0026amp; rate limiting Cấu hình CORS Chi phí: ~$3.50 trên triệu requests API Endpoints#\rPOST /auth/register\rPOST /auth/login\rGET /user/profile\rPUT /user/profile\rPOST /user/ingredients\rGET /user/ingredients\rDELETE /user/ingredients/{id}\rPUT /user/privacy\rGET /user/privacy\rPOST /friends/request\rGET /friends\rPUT /friends/{id}/accept\rPUT /friends/{id}/reject\rDELETE /friends/{id}\rPOST /recipes\rGET /recipes/{id}\rPUT /recipes/{id}\rDELETE /recipes/{id}\rGET /recipes/search\rPOST /recipes/{id}/rate\rPOST /ai/suggest\rGET /ai/suggestions\rPOST /ai/feedback\rPOST /cooking/start\rPUT /cooking/{id}/complete\rGET /user/cooking-history\rDELETE /cooking/{id}\rPUT /cooking/{id}/favorite\rPOST /ingredients/validate\rGET /ingredients/search\rPOST /posts\rGET /posts/{id}\rPUT /posts/{id}\rDELETE /posts/{id}\rGET /posts/feed\rGET /posts/user/{userId}\rPOST /posts/{id}/comments\rGET /posts/{id}/comments\rPUT /comments/{id}\rDELETE /comments/{id}\rPOST /reactions\rDELETE /reactions/{id}\rGET /reactions/{targetType}/{targetId}\rGET /notifications\rPUT /notifications/{id}/read\rPUT /notifications/read-all4. Lambda Functions#\rLambda 1: Auth Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: Cognito Post-Authentication Mục đích: Tạo profile người dùng khi đăng nhập lần đầu Lambda 2: Recipe CRUD#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway Mục đích: Tạo, đọc, cập nhật, xóa recipes Upload ảnh recipe lên S3 Query DynamoDB Lambda 3: AI Suggestion Engine ⭐#\rRuntime: Node.js 20 Memory: 1024MB Timeout: 60s Triggers: API Gateway Mục đích: Validate nguyên liệu với master_ingredients table Query 4 approved recipes từ DynamoDB Gọi Amazon Bedrock (Claude 3.5) cho 1 recipe mới Tạo gợi ý công thức Phân tích nguyên liệu người dùng Lưu gợi ý vào DynamoDB Chi phí: Lambda tốn kém nhất (~70% chi phí compute) Lambda 4: User Profile Manager#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý profile \u0026amp; preferences người dùng Cập nhật danh sách nguyên liệu Xử lý upload avatar Quản lý cài đặt riêng tư Lambda 5: Social/Friends Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý yêu cầu kết bạn Chấp nhận/từ chối yêu cầu kết bạn Liệt kê danh sách bạn bè Lọc dữ liệu theo privacy settings Lambda 6: Posts \u0026amp; Comments Handler#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway Mục đích: Tạo, đọc, cập nhật, xóa bài đăng Quản lý bình luận (nested replies) Upload ảnh posts lên S3 Cập nhật counters (likes_count, comments_count) Lọc theo privacy settings Lambda 7: Notifications Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway, DynamoDB Streams Mục đích: Tạo thông báo khi có hoạt động (comment, like, friend request) Đánh dấu đã đọc/chưa đọc Lấy danh sách thông báo Push notifications (tương lai) Lambda 8: Admin Operations#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway (Chỉ Admin) Mục đích: Quản lý người dùng (ban/unban) Kiểm duyệt nội dung (posts, comments) Thống kê hệ thống Không cần phê duyệt recipes - Tự động approval dựa trên rating Lambda 9: Cooking History Handler ⭐ NEW#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý lịch sử nấu ăn cá nhân Start/complete cooking sessions Lấy lịch sử nấu ăn của user Đánh dấu món yêu thích Ghi chú cá nhân cho từng lần nấu Lambda 10: Rating \u0026amp; Approval Handler ⭐ NEW#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Lưu rating của user cho recipes Tính toán average rating Auto-approve recipes khi rating \u0026gt;= 4.0 sao Update recipe_ratings table Link rating với cooking history Lambda 11: Ingredient Validation Handler ⭐ NEW#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Validate nguyên liệu với master_ingredients table Fuzzy search cho nguyên liệu tương tự Auto-correct tên nguyên liệu (bỏ dấu) Gợi ý nguyên liệu thay thế 5. Dịch Vụ AI/ML#\rAmazon Bedrock (Claude 3.5)#\rModel: Claude 3.5 Sonnet (hoặc Haiku để tiết kiệm chi phí) Use Case: AI agent gợi ý công thức Input: Profile người dùng + preferences + nguyên liệu Output: Gợi ý công thức với hướng dẫn Chi phí: Sonnet: $3 trên triệu input tokens, $15 trên triệu output tokens Haiku: $0.25 trên triệu input tokens, $1.25 trên triệu output tokens Ước tính: $25-50/tháng (1,000 users, 10 suggestions/user/tháng) Với Haiku: $3-7/tháng (tiết kiệm 70%) 6. Database#\rAmazon DynamoDB (NoSQL Database)#\rCác bảng:\nUsers (PK: user_id) - Tài khoản người dùng \u0026amp; roles UserData (PK: user_id, SK: data_type) - Preferences, nguyên liệu PrivacySettings (PK: user_id) - Cấu hình riêng tư Friendships (PK: user_id, SK: friend_id) - Kết nối mạng xã hội Recipes (PK: recipe_id, GSI: user_id) - Dữ liệu công thức RecipeRatings (PK: recipe_id, SK: user_id) - Đánh giá công thức cho auto-approval ⭐ UserCookingHistory (PK: user_id, SK: timestamp) - Lịch sử nấu ăn cá nhân ⭐ MasterIngredients (PK: ingredient_id) - Master list nguyên liệu để validate ⭐ AISuggestions (PK: user_id, SK: timestamp) - Lịch sử AI Posts (PK: post_id, GSI: user_id) - Bài đăng xã hội Comments (PK: post_id, SK: timestamp) - Bình luận Reactions (PK: target_id, SK: user_id) - Lượt thích Notifications (PK: user_id, SK: timestamp) - Thông báo Tính năng:\nAuto-scaling (on-demand mode) Point-in-time recovery (PITR) DynamoDB Streams (cho cập nhật real-time \u0026amp; notifications) Global Secondary Indexes (GSI) cho truy vấn Mã hóa at rest Chi phí: $35-45/tháng (on-demand pricing với cooking history \u0026amp; ratings) Tại sao chọn DynamoDB thay vì RDS?\n✅ Serverless (không cần quản lý server) ✅ Auto-scaling về zero cost khi idle ✅ Tích hợp tốt hơn với Lambda ✅ Độ trễ thấp hơn cho key-value access ✅ Tiết kiệm chi phí cho MVP ($15 vs $30+ cho RDS) 7. Lưu Trữ#\rAmazon S3#\rBuckets:\nrecipe-images-prod: Ảnh công thức user-avatars-prod: Ảnh đại diện post-images-prod: Ảnh bài đăng static-assets-prod: Assets ứng dụng Tính năng:\nVersioning enabled Lifecycle policies (xóa sau 90 ngày cho temp files) S3 Transfer Acceleration Chi phí: ~$10/tháng (100GB storage với social media images) 8. Bảo Mật#\rAWS WAF#\rBảo vệ:\nSQL injection XSS attacks Rate limiting (1000 requests/5min mỗi IP) Geographic restrictions (tùy chọn) Chi phí: $5/tháng + $1 trên triệu requests AWS Secrets Manager#\rSecrets:\nDatabase credentials (nếu dùng RDS) Third-party API keys (nếu cần) Chi phí: $0.40 mỗi secret mỗi tháng 9. Giám Sát \u0026amp; Logging#\rAmazon CloudWatch#\rLogs: Tất cả logs của Lambda functions Metrics: Metrics của API Gateway, Lambda, DynamoDB Alarms: Lambda errors \u0026gt; 1% API Gateway 5xx errors DynamoDB throttling Chi phí: ~$5-10/tháng AWS X-Ray#\rTracing: Tracing request từ đầu đến cuối Performance: Xác định bottlenecks Chi phí: $5 trên triệu traces (100k đầu miễn phí) Sơ Đồ Luồng Dữ Liệu#\rFlow 1: AI Recipe Suggestion (Enhanced - Flexible Mix)#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaAI\rparticipant DynamoDB\rparticipant Bedrock\rparticipant CloudWatch\rUser-\u0026gt;\u0026gt;APIGateway: POST /ai/suggest\u0026lt;br/\u0026gt;{ingredients, recipe_count: 3}\rAPIGateway-\u0026gt;\u0026gt;LambdaAI: Xử lý request\rNote over LambdaAI: STEP 1: Validate Ingredients\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Check master_ingredients\rDynamoDB--\u0026gt;\u0026gt;LambdaAI: Validation results\ralt Có nguyên liệu không hợp lệ\rLambdaAI-\u0026gt;\u0026gt;CloudWatch: Log invalid ingredients\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Increment report count\ralt Report count \u0026gt;= 5\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Notify admin\rend\rend\rNote over LambdaAI: STEP 2: Query DB với categories\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Query approved recipes\u0026lt;br/\u0026gt;(match ingredients + categories)\rDynamoDB--\u0026gt;\u0026gt;LambdaAI: Found: 2 món\rNote over LambdaAI: STEP 3: Calculate AI Gap\u0026lt;br/\u0026gt;Requested: 3, DB: 2, Gap: 1\rNote over LambdaAI: STEP 4: Generate AI (nếu cần)\rloop For each AI recipe (1 món)\rLambdaAI-\u0026gt;\u0026gt;Bedrock: Generate recipe\u0026lt;br/\u0026gt;(ingredients + diverse category)\rBedrock--\u0026gt;\u0026gt;LambdaAI: AI Recipe\rend\rNote over LambdaAI: STEP 5: Combine \u0026amp; Return\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Save suggestion history\rLambdaAI--\u0026gt;\u0026gt;User: 2 DB + 1 AI = 3 món ✅\u0026lt;br/\u0026gt;+ Warnings (if any)Key Improvements:\n✅ Flexible recipe count (1-5 món) ✅ Dynamic DB/AI mix (tiết kiệm cost) ✅ Invalid ingredient reporting system ✅ Category diversity (xào, canh, hấp\u0026hellip;) Flow 2: Recipe Auto-Approval (Rating-based)#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaRecipe\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: Nấu món (AI generated)\rUser-\u0026gt;\u0026gt;APIGateway: Click \u0026#34;Hoàn thành\u0026#34;\rAPIGateway-\u0026gt;\u0026gt;User: Hiển thị form đánh giá\rUser-\u0026gt;\u0026gt;APIGateway: POST /recipes/{id}/rate (rating + comment)\rAPIGateway-\u0026gt;\u0026gt;LambdaRecipe: Lưu rating\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Save rating\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Calculate average rating\ralt Rating \u0026gt;= 4 sao\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Set recipe.is_approved = true\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Add to public recipes\rLambdaRecipe-\u0026gt;\u0026gt;User: \u0026#34;Công thức đã được thêm vào database!\u0026#34;\relse Rating \u0026lt; 4 sao\rLambdaRecipe-\u0026gt;\u0026gt;User: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34;\rendFlow 3: Social Interaction#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaPost\rparticipant LambdaNotification\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: POST /posts (chia sẻ công thức)\rAPIGateway-\u0026gt;\u0026gt;LambdaPost: Tạo post\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Save post\rLambdaPost-\u0026gt;\u0026gt;User: Post created\rUser-\u0026gt;\u0026gt;APIGateway: POST /posts/{id}/comments\rAPIGateway-\u0026gt;\u0026gt;LambdaPost: Tạo comment\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Save comment\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Update comments_count\rLambdaPost-\u0026gt;\u0026gt;LambdaNotification: Trigger notification\rLambdaNotification-\u0026gt;\u0026gt;DynamoDB: Create notification for post owner\rLambdaNotification-\u0026gt;\u0026gt;User: Push notificationFlow 4: Error Handling - Invalid Ingredients#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaAI\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: POST /ai/suggest {\u0026#34;ingredients\u0026#34;: [\u0026#34;abc xyz\u0026#34;, \u0026#34;123\u0026#34;]}\rAPIGateway-\u0026gt;\u0026gt;LambdaAI: Validate ingredients\ralt Nguyên liệu không tồn tại\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Fuzzy search similar ingredients\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Không tìm thấy nguyên liệu. Bạn có muốn: [gà, cá, tôm]?\u0026#34;\relse Nguyên liệu sai format\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Tên nguyên liệu không hợp lệ. Vui lòng nhập lại.\u0026#34;\relse Nguyên liệu quá ít (\u0026lt; 2)\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Cần ít nhất 2 nguyên liệu để tạo món ăn.\u0026#34;\rend"},{"id":2,"href":"/docs/summary/","title":"Summary","section":"Docs","content":"AWS Project Documentation#\rComplete documentation for Smart Cooking App project.\n"},{"id":3,"href":"/docs/dlc/01-requirements/","title":"01 - Requirements","section":"Docs","content":"Yêu Cầu Dự Án - Smart Cooking App#\rFunctional Requirements#\r1. User Management (FR-UM)#\rFR-UM-01: User Registration#\rMô tả: Người dùng có thể đăng ký tài khoản mới Input: Email, password, username, full_name Process: Validation email format Password strength check (min 8 characters) Username uniqueness check Email verification via Cognito Output: User account created, verification email sent Priority: MUST HAVE (P0) FR-UM-02: User Login#\rMô tả: Người dùng có thể đăng nhập vào hệ thống Input: username, password Process: Cognito authentication Output: JWT token, redirect to dashboard Priority: MUST HAVE (P0) FR-UM-03: User Profile Management#\rMô tả: Người dùng có thể cập nhật thông tin cá nhân Input: Full name, date_of_birth, gender, country, avatar Validation: Date_of_birth: Valid date, user \u0026gt;= 13 years old Gender: Enum (male, female, other) Country: Valid country code Output: Updated profile AI Usage: Date_of_birth, gender, country được sử dụng cho AI personalization Priority: MUST HAVE (P0) FR-UM-04: User Preferences#\rMô tả: Người dùng có thể thiết lập sở thích món ăn Input: preferred_cooking_methods: Array [\u0026lsquo;xào\u0026rsquo;, \u0026lsquo;hấp\u0026rsquo;, \u0026lsquo;canh\u0026rsquo;, \u0026lsquo;chiên\u0026rsquo;, \u0026lsquo;kho\u0026rsquo;] favorite_cuisines: Array [\u0026lsquo;Việt Nam\u0026rsquo;, \u0026lsquo;Ý\u0026rsquo;, \u0026lsquo;Nhật\u0026rsquo;, \u0026lsquo;Thái\u0026rsquo;] allergies: Array [\u0026rsquo;tôm\u0026rsquo;, \u0026lsquo;cua\u0026rsquo;, \u0026lsquo;sữa\u0026rsquo;] dietary_restrictions: Array [\u0026lsquo;chay\u0026rsquo;, \u0026lsquo;halal\u0026rsquo;, \u0026rsquo;low-carb\u0026rsquo;] Output: Updated preferences, used for AI suggestions Priority: MUST HAVE (P0) 2. Ingredient Management (FR-IM)#\rFR-IM-01: Add Ingredient#\rMô tả: Người dùng nhập nguyên liệu có sẵn Input: Ingredient name (string) Process: Validate với master_ingredients table Fuzzy search nếu không exact match Auto-correct nếu có similar match Output: Success: Ingredient added Warning: Auto-corrected to similar ingredient Error: Invalid ingredient, suggestions provided Priority: MUST HAVE (P0) FR-IM-02: List Ingredients#\rMô tả: Hiển thị danh sách nguyên liệu của user Output: Array of ingredients với added_at timestamp Priority: MUST HAVE (P0) FR-IM-03: Remove Ingredient#\rMô tả: Xóa nguyên liệu khỏi danh sách Input: Ingredient ID Output: Ingredient removed Priority: MUST HAVE (P0) FR-IM-04: Validate Ingredients (Batch)#\rMô tả: Validate nhiều nguyên liệu cùng lúc Input: Array of ingredient names Output: valid: Array of valid ingredients invalid: Array of invalid ingredients corrected: Array of auto-corrected matches suggestions: Array of similar ingredients Priority: MUST HAVE (P0) 3. AI Recipe Suggestion (FR-AI)#\rFR-AI-01: Request Recipe Suggestions#\rMô tả: User yêu cầu AI gợi ý món ăn Input: ingredients: Array of ingredient names (min 2) recipe_count: Number (1-5, default: 1) user_preferences: From user profile \u0026amp; preferences Process: Validate ingredients với master_ingredients Query DB cho approved recipes (match ingredients + categories) Calculate gap: requested_count - db_count Generate gap recipes bằng AI (nếu cần) Ensure category diversity (xào, canh, hấp\u0026hellip;) Output: suggestions: Array of recipes (DB + AI mix) stats: { requested, from_database, from_ai } warnings: Array of invalid ingredients Constraints: AI generation timeout: 60s Priority: MUST HAVE (P0) FR-AI-02: AI Personalization#\rMô tả: AI sử dụng user context để personalize suggestions AI Input Data: Age (from birth_year): Khuyến nghị dinh dưỡng phù hợp Gender: Khuyến nghị khẩu phần Country: Ưu tiên món địa phương Preferred cooking methods: Ưu tiên phương pháp nấu Favorite cuisines: Ưu tiên món quốc gia Allergies: TUYỆT ĐỐI TRÁNH các nguyên liệu này Privacy Policy: KHÔNG sử dụng: Email, full name, địa chỉ Mục đích: Cá nhân hóa gợi ý món ăn Không chia sẻ hoặc khai thác thông tin Priority: MUST HAVE (P0) FR-AI-03: Invalid Ingredient Handling#\rMô tả: Xử lý nguyên liệu không hợp lệ gracefully Process: Log invalid ingredient to CloudWatch Increment report count in database Provide suggestions cho user Nếu report_count \u0026gt;= 5 → Notify admin Vẫn generate suggestions với valid ingredients Output: warnings: Array of invalid items suggestions: Alternative ingredients reported: Boolean (đã log để admin review) Priority: MUST HAVE (P0) FR-AI-04: AI Suggestion History#\rMô tả: Lưu lịch sử AI suggestions Saved Data: prompt_text, ingredients_used requested_recipe_count, recipes_from_db, recipes_from_ai invalid_ingredients (for analytics) ai_response, was_from_cache Output: History list sorted by created_at DESC Priority: SHOULD HAVE (P1) 4. Cooking History \u0026amp; Rating (FR-CH)#\rFR-CH-01: Start Cooking#\rMô tả: User bắt đầu nấu một món Input: recipe_id, suggestion_id (optional) Output: history_id, status = \u0026lsquo;cooking\u0026rsquo; Priority: MUST HAVE (P0) FR-CH-02: Complete Cooking#\rMô tả: User hoàn thành nấu món Input: history_id Output: Status updated to \u0026lsquo;completed\u0026rsquo; Prompt rating form Priority: MUST HAVE (P0) FR-CH-03: Rate Recipe#\rMô tả: User đánh giá món đã nấu Input: recipe_id, history_id rating: Number (1-5 stars) comment: String (optional) Process: Save rating to recipe_ratings table Update user_cooking_history với personal_rating Calculate average rating cho recipe Auto-approval: Nếu average_rating \u0026gt;= 4.0 Set recipe.is_approved = true Set recipe.is_public = true Notify user: \u0026ldquo;Công thức đã được thêm vào database!\u0026rdquo; Output: success, rating_saved average_rating, rating_count auto_approved: Boolean message: String Priority: MUST HAVE (P0) FR-CH-04: View Cooking History#\rMô tả: Xem lịch sử nấu ăn cá nhân Output: Array of cooking sessions với: recipe details status, cook_date personal_rating, personal_notes is_favorite Sort: created_at DESC (newest first) Priority: MUST HAVE (P0) FR-CH-05: Favorite Recipes#\rMô tả: Đánh dấu món yêu thích Input: history_id, is_favorite: Boolean Output: Updated cooking history Filter: GET /user/cooking-history?favorites=true Priority: SHOULD HAVE (P1) 5. Recipe Management (FR-RM)#\rFR-RM-01: View Recipe Details#\rMô tả: Xem chi tiết công thức Input: recipe_id Output: Recipe với: Title, description, cuisine_type Cooking method, meal type Ingredients với quantities Instructions (step-by-step) Nutritional info Average rating, rating count is_approved, approval_type Priority: MUST HAVE (P0) FR-RM-02: Search Recipes#\rMô tả: Tìm kiếm công thức approved Input: Query: String (search in title, description) Filters: cuisine_type, cooking_method, meal_type Sort: rating, created_at, popularity Output: Paginated list of approved recipes Priority: SHOULD HAVE (P1) FR-RM-03: User Created Recipes#\rMô tả: User tự tạo recipe (không qua AI) Input: Recipe data (title, ingredients, instructions\u0026hellip;) Process: Save as is_approved=false, requires rating Output: Recipe created Priority: COULD HAVE (P2 - Phase 2) 6. Social Features (FR-SF) - Phase 2#\rFR-SF-01: Privacy Settings#\rMô tả: User thiết lập privacy cho data Settings: profile_visibility: public/friends/private email_visibility: private (default) date_of_birth_visibility: friends (default) recipes_visibility: public (default) ingredients_visibility: friends (default) Priority: SHOULD HAVE (P1) FR-SF-02: Friend Requests#\rMô tả: Gửi/nhận friend requests Actions: Send request: POST /friends/request Accept: PUT /friends/{id}/accept Reject: PUT /friends/{id}/reject Remove: DELETE /friends/{id} Priority: SHOULD HAVE (P1) FR-SF-03: Posts \u0026amp; Comments#\rMô tả: Chia sẻ cooking experience Post: content, images, recipe_id (optional) Comment: nested comments support Reactions: like, love, wow Privacy: respect user privacy settings Priority: SHOULD HAVE (P1) FR-SF-04: Notifications#\rMô tả: Real-time notifications Types: friend_request, friend_accept comment, like, mention recipe_share, recipe_approved Delivery: In-app (future: Push) Priority: SHOULD HAVE (P1) Non-Functional Requirements#\r1. Performance (NFR-P)#\rNFR-P-01: API Response Time#\rRequirement: \u0026lt; 500ms for non-AI endpoints Measurement: CloudWatch metrics, p95 latency Priority: MUST HAVE (P0) NFR-P-02: AI Generation Time#\rRequirement: \u0026lt; 5 seconds per recipe Fallback: Show loading indicator, timeout after 60s Priority: MUST HAVE (P0) NFR-P-03: Database Query Performance#\rRequirement: \u0026lt; 100ms for single-item queries Optimization: GSI indexes, query optimization Priority: MUST HAVE (P0) 2. Scalability (NFR-S)#\rNFR-S-01: Concurrent Users#\rMVP: Support 100 concurrent users Growth: Scale to 10,000 concurrent users by Month 12 Strategy: Serverless auto-scaling Priority: MUST HAVE (P0) NFR-S-02: Data Growth#\rStorage: Plan for 100MB → 10GB in Year 1 DynamoDB: On-demand mode, auto-scaling S3: Lifecycle policies for old images Priority: MUST HAVE (P0) 3. Availability (NFR-A)#\rNFR-A-01: System Uptime#\rRequirement: 99.5% uptime (Monthly) Downtime tolerance: ~3.6 hours/month Monitoring: CloudWatch alarms, X-Ray tracing Priority: MUST HAVE (P0) NFR-A-02: Error Rate#\rRequirement: \u0026lt; 1% error rate Tracking: CloudWatch errors, Lambda failures Alerting: SNS notifications on threshold breach Priority: MUST HAVE (P0) 4. Security (NFR-SEC)#\rNFR-SEC-01: Authentication#\rMethod: Cognito User Pool, JWT tokens Password Policy: Min 8 chars, 1 uppercase, 1 number MFA: Optional (future enhancement) Priority: MUST HAVE (P0) NFR-SEC-02: Authorization#\rMethod: IAM roles, API Gateway authorizers Principle: Least privilege access Validation: Request validation at API Gateway Priority: MUST HAVE (P0) NFR-SEC-03: Data Encryption#\rAt Rest: DynamoDB encryption, S3 encryption In Transit: HTTPS only, TLS 1.2+ Keys: AWS KMS managed keys Priority: MUST HAVE (P0) NFR-SEC-04: API Security#\rWAF: AWS WAF rules (SQL injection, XSS) Rate Limiting: 1000 requests/5min per IP CORS: Whitelist origins only Priority: MUST HAVE (P0) 5. Usability (NFR-U)#\rNFR-U-01: Mobile Responsive#\rRequirement: Work on all screen sizes Testing: iOS Safari, Android Chrome Priority: MUST HAVE (P0) NFR-U-02: Accessibility#\rStandard: WCAG 2.1 Level AA (target) Features: Alt text, keyboard navigation, screen reader support Priority: SHOULD HAVE (P1) NFR-U-03: Internationalization#\rMVP: Vietnamese + English Future: Support 5+ languages Priority: COULD HAVE (P2) 6. Maintainability (NFR-M)#\rNFR-M-01: Code Quality#\rStandards: ESLint, Prettier Testing: Unit tests (\u0026gt;=70% coverage) Documentation: JSDoc comments Priority: SHOULD HAVE (P1) NFR-M-02: Monitoring \u0026amp; Logging#\rLogging: CloudWatch Logs, structured JSON Tracing: AWS X-Ray for distributed tracing Alarms: Critical errors, high latency, cost spikes Priority: MUST HAVE (P0) 7. Cost Efficiency (NFR-C)#\rNFR-C-01: MVP Cost Target#\rTarget: $135-160/month for 1,000 users Monitoring: AWS Cost Explorer, budget alarms Optimization: Flexible DB/AI mix, caching Priority: MUST HAVE (P0) NFR-C-02: Cost per User#\rTarget: \u0026lt; $0.20/month (MVP), \u0026lt; $0.03/month (Scale) Strategy: DB coverage growth 0% → 80% Metrics: Track DB vs AI usage ratio Priority: MUST HAVE (P0) Acceptance Criteria#\rMVP Release Criteria#\rAll P0 requirements implemented User can register, login, manage profile User can add ingredients, get AI suggestions AI suggestions work with flexible DB/AI mix User can track cooking history and rate recipes Auto-approval system working (\u0026gt;= 4 stars) System uptime \u0026gt;= 99% API response time \u0026lt; 500ms (p95) Monthly cost \u0026lt;= $160 0 critical security vulnerabilities Phase 2 Release Criteria#\rPrivacy settings functional Friend system working Posts \u0026amp; comments working Notifications delivered Database coverage \u0026gt;= 30% Related Documents#\r00 - Overview 02 - Constraints 13 - Security 23 - Tasks "},{"id":4,"href":"/docs/summary/ai-agent-implementation/","title":"Kế Hoạch Triển Khai AI Agent","section":"Summary","content":"KẾ HOẠCH TRIỂN KHAI AI AGENT#\rHệ Thống Gợi Ý Công Thức Thông Minh\n   TỔNG QUAN#\rTính năng: AI Agent gợi ý món ăn thông minh dựa trên:\nThông tin cá nhân (giới tính, tuổi, quốc gia) Sở thích ẩm thực (món canh, món chiên, món hấp…) Nguyên liệu nhập đơn giản (chỉ tên, không quản lý số lượng/hạn dùng) Phạm vi:\n✅ User nhập danh sách nguyên liệu ✅ System check nguyên liệu hợp lệ ✅ Gợi ý 4 món từ database + 1 món AI tạo mới ✅ Auto-approval công thức dựa trên rating (\u0026gt;= 4 sao) ✅ Error handling cho nguyên liệu không hợp lệ Thời gian: 2 tuần (Tuần 3-4 trong deployment plan)\n   LUỒNG NGƯỜI DÙNG#\rFlow 1: Gợi Ý Món Ăn Thông Minh (Smart Suggestion)#\r┌─────────────────────────────────────────────────────────┐\r│ ĐẦU VÀO NGƯỜI DÙNG │\r├─────────────────────────────────────────────────────────┤\r│ Người dùng A: │\r│ • Nam, 1990 (34 tuổi), Vietnam │\r│ • Thích ăn: canh, món hấp │\r│ • Nguyên liệu nhập: Cá rô, bông súng, gừng, hành │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ VALIDATE \u0026amp; PROCESS │\r├─────────────────────────────────────────────────────────┤\r│ 1. Check nguyên liệu hợp lệ: │\r│ ✅ \u0026#34;Cá rô\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Bông súng\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Gừng\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Hành\u0026#34; → Có trong database │\r│ │\r│ 2. Tìm công thức: │\r│ - Query DynamoDB: 4 món match nguyên liệu │\r│ - Gọi AI Bedrock: 1 món mới sáng tạo │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ KẾT QUẢ GỢI Ý (5 MÓN) │\r├─────────────────────────────────────────────────────────┤\r│    Từ Database (4 món): │\r│ 1. Canh cá rô nấu bông súng │\r│ 2. Cá rô kho gừng │\r│ 3. Canh bông súng │\r│ 4. Cá rô chiên │\r│ │\r│    AI Generated (1 món mới): │\r│ 5. Cá rô hấp bông súng gừng hành │\r│ (Món độc đáo từ AI) │\r└─────────────────────────────────────────────────────────┘Flow 2: Auto-Approval Công Thức (Rating-based)#\r┌─────────────────────────────────────────────────────────┐\r│ USER NẤU MÓN AI TẠO │\r├─────────────────────────────────────────────────────────┤\r│ 1. User chọn món: \u0026#34;Cá rô hấp bông súng gừng hành\u0026#34; │\r│ 2. Làm theo hướng dẫn │\r│ 3. Click \u0026#34;Hoàn thành\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ ĐÁNH GIÁ CÔNG THỨC │\r├─────────────────────────────────────────────────────────┤\r│ Popup hiển thị: │\r│ • Rating: ⭐⭐⭐⭐⭐ (1-5 sao) │\r│ • Comment: \u0026#34;Món này rất ngon!\u0026#34; │\r│ • Submit │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ XỬ LÝ RATING │\r├─────────────────────────────────────────────────────────┤\r│ IF rating \u0026gt;= 4 sao: │\r│ ✅ Set recipe.is_approved = true │\r│ ✅ Add to public recipes database │\r│ ✅ Notify: \u0026#34;Công thức đã được thêm vào database!\u0026#34; │\r│ │\r│ ELSE (rating \u0026lt; 4 sao): │\r│ ℹ️ Notify: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34; │\r│ ❌ Không thêm vào database │\r└─────────────────────────────────────────────────────────┘Flow 3: Error Handling - Nguyên Liệu Không Hợp Lệ#\r┌─────────────────────────────────────────────────────────┐\r│ USER NHẬP NGUYÊN LIỆU SAI │\r├─────────────────────────────────────────────────────────┤\r│ Input: \u0026#34;abc xyz\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;thit ga\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ VALIDATE TỪNG NGUYÊN LIỆU │\r├─────────────────────────────────────────────────────────┤\r│ 1. \u0026#34;abc xyz\u0026#34; → ❌ Không tồn tại │\r│ → Fuzzy search: Tìm nguyên liệu gần đúng │\r│ → Gợi ý: \u0026#34;Bạn có muốn: [gà, cá, bò]?\u0026#34; │\r│ │\r│ 2. \u0026#34;123\u0026#34; → ❌ Format không hợp lệ │\r│ → Error: \u0026#34;Tên nguyên liệu không hợp lệ\u0026#34; │\r│ │\r│ 3. \u0026#34;thit ga\u0026#34; → ✅ Fuzzy match: \u0026#34;thịt gà\u0026#34; │\r│ → Auto-correct: \u0026#34;Bạn muốn dùng \u0026#39;thịt gà\u0026#39;?\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ ERROR RESPONSES │\r├─────────────────────────────────────────────────────────┤\r│ Case 1: Nguyên liệu không tồn tại │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;ingredient_not_found\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Không tìm thấy nguyên liệu: abc xyz\u0026#34;, │\r│ \u0026#34;suggestions\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;] │\r│ } │\r│ │\r│ Case 2: Format không hợp lệ │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;invalid_format\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Tên nguyên liệu không hợp lệ: 123\u0026#34; │\r│ } │\r│ │\r│ Case 3: Quá ít nguyên liệu │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;insufficient_ingredients\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Cần ít nhất 2 nguyên liệu\u0026#34; │\r│ } │\r│ │\r│ Case 4: Fuzzy match thành công │\r│ → HTTP 200: { │\r│ \u0026#34;corrected\u0026#34;: true, │\r│ \u0026#34;original\u0026#34;: \u0026#34;thit ga\u0026#34;, │\r│ \u0026#34;matched\u0026#34;: \u0026#34;thịt gà\u0026#34;, │\r│ \u0026#34;confidence\u0026#34;: 0.85 │\r│ } │\r└─────────────────────────────────────────────────────────┘   TRIỂN KHAI KỸ THUẬT#\rKiến Trúc Tables \u0026amp; Relationships#\rCác Tables Liên Kết:\nmaster_ingredients (nguyên liệu chuẩn)\r↓\r[VALIDATE]\r↓\ruser_ingredients (nguyên liệu người dùng nhập)\r↓\r[QUERY \u0026amp; MATCH]\r↓\r┌─────────────────┬─────────────────┐\r↓ ↓ ↓\rrecipes user_data user_preferences\r(is_approved) (sở thích) (năm sinh, giới tính, quốc gia)\r↓ ↓ ↓\r└─────────────────┴─────────────────┘\r↓\r[AI AGENT PROMPT]\r↓\r┌─────────────────┐\r↓ ↓\rDatabase Recipes AI Generated Recipe\r(4 món phù hợp) (1 món sáng tạo)Backend: Node.js 20 Lambda Functions#\rLambda AI Suggestion Engine:\n// Sử dụng AWS SDK v3 cho Bedrock const { BedrockRuntimeClient, InvokeModelCommand } = require(\u0026#39;@aws-sdk/client-bedrock-runtime\u0026#39;); const { DynamoDBClient } = require(\u0026#39;@aws-sdk/client-dynamodb\u0026#39;); const { DynamoDBDocumentClient, QueryCommand, PutCommand } = require(\u0026#39;@aws-sdk/lib-dynamodb\u0026#39;); const ddb = DynamoDBDocumentClient.from(new DynamoDBClient({})); // Flow mới: // 1. Validate ingredients với master_ingredients table // 2. Query 4 recipes từ DynamoDB (is_approved=true) // 3. Generate 1 recipe mới bằng Bedrock AI với context đầy đủ // 4. Return 5 suggestions (4 DB + 1 AI) async function suggestRecipes(userIngredients, userPreferences) { // Step 1: Validate ingredients với master_ingredients const validatedIngredients = await validateIngredientsWithMaster(userIngredients); if (!validatedIngredients.isValid) { return { statusCode: 400, body: { error: \u0026#39;ingredient_not_found\u0026#39;, message: \u0026#39;Một số nguyên liệu không hợp lệ\u0026#39;, invalid_ingredients: validatedIngredients.invalidItems, suggestions: validatedIngredients.suggestions } }; } // Step 2: Query user preferences từ user_data table const userContext = await getUserContext(userPreferences.userId); // Step 3: Query 4 approved recipes từ DynamoDB matching user preferences const dbRecipes = await queryApprovedRecipesByIngredientsAndPreferences( validatedIngredients.ingredients, userContext, 4 ); // Step 4: Generate 1 AI recipe với context đầy đủ const aiRecipe = await generateAIRecipe( validatedIngredients.ingredients, userContext ); // Step 5: Save AI suggestion to history await saveAISuggestion({ userId: userPreferences.userId, ingredients: validatedIngredients.ingredients, aiRecipe, dbRecipes }); // Step 6: Return combined results return { statusCode: 200, body: { recipes: [...dbRecipes, aiRecipe], stats: { database_recipes: dbRecipes.length, ai_recipes: 1 } } }; } // Lấy thông tin người dùng từ user_data \u0026amp; user_preferences async function getUserContext(userId) { // Query user_data cho sở thích món ăn const userDataResult = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND SK = :sk\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `USER#${userId}`, \u0026#39;:sk\u0026#39;: \u0026#39;PREFERENCES\u0026#39; } })); // Query user profile cho thông tin cá nhân (năm sinh, giới tính, quốc gia) const userProfileResult = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND SK = :sk\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `USER#${userId}`, \u0026#39;:sk\u0026#39;: \u0026#39;METADATA\u0026#39; } })); const userData = userDataResult.Items?.[0] || {}; const userProfile = userProfileResult.Items?.[0] || {}; return { // Sở thích món ăn preferred_cooking_methods: userData.preferred_cooking_methods || [], preferred_meal_types: userData.preferred_meal_types || [], favorite_cuisines: userData.favorite_cuisines || [], allergies: userData.allergies || [], // Thông tin cá nhân (cho personalization) birth_year: userProfile.birth_year, gender: userProfile.gender, country: userProfile.country, // Mở rộng: món yêu thích quốc gia // VD: nếu country = \u0026#34;Vietnam\u0026#34; → ưu tiên món Việt // nếu favorite_cuisines = [\u0026#34;Italy\u0026#34;] → ưu tiên món Ý cuisine_preference: determineCuisinePreference(userProfile, userData) }; } // Xác định ưu tiên món quốc gia function determineCuisinePreference(profile, userData) { // Ưu tiên 1: món yêu thích được chọn if (userData.favorite_cuisines \u0026amp;\u0026amp; userData.favorite_cuisines.length \u0026gt; 0) { return userData.favorite_cuisines; } // Ưu tiên 2: món của quốc gia người dùng if (profile.country) { const countryToCuisine = { \u0026#39;Vietnam\u0026#39;: [\u0026#39;Vietnamese\u0026#39;], \u0026#39;Italy\u0026#39;: [\u0026#39;Italian\u0026#39;], \u0026#39;Japan\u0026#39;: [\u0026#39;Japanese\u0026#39;], \u0026#39;Thailand\u0026#39;: [\u0026#39;Thai\u0026#39;], \u0026#39;Korea\u0026#39;: [\u0026#39;Korean\u0026#39;] }; return countryToCuisine[profile.country] || []; } return []; } // Validate ingredients với master_ingredients table async function validateIngredientsWithMaster(ingredients) { const validated = []; const invalid = []; const suggestions = []; for (const ing of ingredients) { // Normalize input const normalized = normalizeText(ing); // Check exact match trong master_ingredients const exactMatch = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, IndexName: \u0026#39;GSI1\u0026#39;, KeyConditionExpression: \u0026#39;GSI1PK = :pk AND begins_with(GSI1SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `INGREDIENT#SEARCH`, \u0026#39;:sk\u0026#39;: `NAME#${normalized}` } })); if (exactMatch.Items \u0026amp;\u0026amp; exactMatch.Items.length \u0026gt; 0) { validated.push(exactMatch.Items[0].name); } else { // Fuzzy search for similar ingredients const similar = await fuzzySearchIngredients(normalized); invalid.push(ing); suggestions.push({ original: ing, similar: similar.slice(0, 5) // Top 5 suggestions }); } } return { isValid: invalid.length === 0, ingredients: validated, invalidItems: invalid, suggestions }; } // Fuzzy search cho nguyên liệu tương tự async function fuzzySearchIngredients(searchTerm) { // Scan master_ingredients với filter const result = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, IndexName: \u0026#39;GSI1\u0026#39;, KeyConditionExpression: \u0026#39;GSI1PK = :pk\u0026#39;, FilterExpression: \u0026#39;contains(normalized_name, :term) OR contains(aliases, :term)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `INGREDIENT#ACTIVE`, \u0026#39;:term\u0026#39;: searchTerm } })); return result.Items.map(item =\u0026gt; item.name); } // Query approved recipes matching ingredients AND user preferences async function queryApprovedRecipesByIngredientsAndPreferences(ingredients, userContext, limit) { // Query recipes theo nguyên liệu và sở thích const recipes = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, IndexName: \u0026#39;GSI2\u0026#39;, KeyConditionExpression: \u0026#39;GSI2PK = :pk\u0026#39;, FilterExpression: \u0026#39;is_approved = :approved\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `RECIPES#APPROVED`, \u0026#39;:approved\u0026#39;: true }, ScanIndexForward: false // Sắp xếp theo rating cao nhất })); let filteredRecipes = recipes.Items || []; // Filter theo món yêu thích quốc gia (nếu có) if (userContext.cuisine_preference \u0026amp;\u0026amp; userContext.cuisine_preference.length \u0026gt; 0) { const cuisineMatches = filteredRecipes.filter(recipe =\u0026gt; userContext.cuisine_preference.includes(recipe.cuisine_type) ); // Nếu có món khớp quốc gia, ưu tiên chúng if (cuisineMatches.length \u0026gt; 0) { filteredRecipes = cuisineMatches; } } // Filter theo sở thích cooking methods (canh, món chiên, món hấp...) if (userContext.preferred_cooking_methods \u0026amp;\u0026amp; userContext.preferred_cooking_methods.length \u0026gt; 0) { filteredRecipes = filteredRecipes.filter(recipe =\u0026gt; userContext.preferred_cooking_methods.includes(recipe.cooking_method) ); } // Filter tránh dị ứng if (userContext.allergies \u0026amp;\u0026amp; userContext.allergies.length \u0026gt; 0) { filteredRecipes = filteredRecipes.filter(recipe =\u0026gt; { const recipeIngredients = recipe.ingredients || []; return !recipeIngredients.some(ing =\u0026gt; userContext.allergies.includes(ing.ingredient_name) ); }); } return filteredRecipes.slice(0, limit); } // Normalize text (bỏ dấu, lowercase) function normalizeText(text) { return text .toLowerCase() .normalize(\u0026#39;NFD\u0026#39;) .replace(/[\\u0300-\\u036f]/g, \u0026#39;\u0026#39;) .trim(); }AI Agent Prompt \u0026amp; Privacy Policy:\n// Generate AI recipe với context đầy đủ + privacy protection async function generateAIRecipe(ingredients, userContext) { const bedrockClient = new BedrockRuntimeClient({ region: \u0026#39;us-east-1\u0026#39; }); // ===== PRIVACY POLICY ===== // Dữ liệu được sử dụng cho personalization: // ✅ Năm sinh (birth_year) - để tính tuổi và khuyến nghị dinh dưỡng phù hợp // ✅ Giới tính (gender) - để khuyến nghị khẩu phần và dinh dưỡng // ✅ Quốc gia (country) - để gợi ý món ăn địa phương/quốc gia // ✅ Sở thích món (preferred_cooking_methods, favorite_cuisines) // ✅ Dị ứng (allergies) - QUAN TRỌNG để an toàn thực phẩm // // ❌ KHÔNG sử dụng: // - Email, số điện thoại, địa chỉ cụ thể // - Tên đầy đủ hoặc thông tin định danh cá nhân khác // // Mục đích: Cá nhân hóa gợi ý món ăn, KHÔNG theo dõi hoặc khai thác thông tin cá nhân // Tính tuổi từ năm sinh (nếu có) const age = userContext.birth_year ? new Date().getFullYear() - userContext.birth_year : null; // Tạo prompt cho AI với context đầy đủ const prompt = `Bạn là một đầu bếp chuyên nghiệp. Hãy tạo một công thức nấu ăn sáng tạo dựa trên thông tin sau: **Nguyên liệu có sẵn:** ${ingredients.map(ing =\u0026gt; `- ${ing}`).join(\u0026#39;\\n\u0026#39;)} **Thông tin người dùng (để cá nhân hóa):** ${age ? `- Tuổi: ${age} tuổi (khuyến nghị dinh dưỡng phù hợp)` : \u0026#39;\u0026#39;} ${userContext.gender ? `- Giới tính: ${userContext.gender} (khẩu phần phù hợp)` : \u0026#39;\u0026#39;} ${userContext.country ? `- Quốc gia: ${userContext.country} (gợi ý món địa phương)` : \u0026#39;\u0026#39;} **Sở thích món ăn:** ${userContext.preferred_cooking_methods?.length \u0026gt; 0 ? `- Thích: ${userContext.preferred_cooking_methods.join(\u0026#39;, \u0026#39;)}` : \u0026#39;- Không có sở thích cụ thể\u0026#39;} **Món yêu thích quốc gia:** ${userContext.cuisine_preference?.length \u0026gt; 0 ? `- Ưu tiên món: ${userContext.cuisine_preference.join(\u0026#39;, \u0026#39;)}` : \u0026#39;- Không có món quốc gia yêu thích\u0026#39;} **Dị ứng (TRÁNH TUYỆT ĐỐI):** ${userContext.allergies?.length \u0026gt; 0 ? userContext.allergies.map(a =\u0026gt; `- ❌ ${a}`).join(\u0026#39;\\n\u0026#39;) : \u0026#39;- Không có dị ứng\u0026#39;} **Yêu cầu:** 1. Sử dụng TOÀN BỘ hoặc phần lớn nguyên liệu đã cho 2. Nếu người dùng từ ${userContext.country}, ưu tiên phong cách nấu ăn địa phương 3. Nếu thích món ${userContext.cuisine_preference?.join(\u0026#39;/\u0026#39;)}, tạo món theo hướng đó 4. Nếu thích ${userContext.preferred_cooking_methods?.join(\u0026#39;/\u0026#39;)}, ưu tiên phương pháp đó 5. TUYỆT ĐỐI KHÔNG dùng nguyên liệu gây dị ứng: ${userContext.allergies?.join(\u0026#39;, \u0026#39;) || \u0026#39;Không\u0026#39;} 6. Phù hợp với tuổi ${age ? `${age} tuổi` : \u0026#39;người lớn\u0026#39;} 7. Món ăn sáng tạo, độc đáo, chưa có trong database **Trả về JSON format:** { \u0026#34;name\u0026#34;: \u0026#34;Tên món ăn\u0026#34;, \u0026#34;cuisine_type\u0026#34;: \u0026#34;${userContext.cuisine_preference?.[0] || \u0026#39;Vietnamese\u0026#39;}\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;${userContext.preferred_cooking_methods?.[0] || \u0026#39;nấu\u0026#39;}\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;món chính/món phụ/canh\u0026#34;, \u0026#34;difficulty\u0026#34;: \u0026#34;dễ/trung bình/khó\u0026#34;, \u0026#34;cooking_time\u0026#34;: \u0026#34;30 phút\u0026#34;, \u0026#34;servings\u0026#34;: 2, \u0026#34;ingredients\u0026#34;: [ { \u0026#34;ingredient_name\u0026#34;: \u0026#34;Tên nguyên liệu\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;100g\u0026#34;, \u0026#34;preparation\u0026#34;: \u0026#34;Cắt nhỏ\u0026#34; } ], \u0026#34;instructions\u0026#34;: [ { \u0026#34;step_number\u0026#34;: 1, \u0026#34;description\u0026#34;: \u0026#34;Mô tả bước làm\u0026#34;, \u0026#34;duration\u0026#34;: \u0026#34;5 phút\u0026#34; } ], \u0026#34;nutritional_info\u0026#34;: { \u0026#34;calories\u0026#34;: 300, \u0026#34;protein\u0026#34;: \u0026#34;20g\u0026#34;, \u0026#34;carbs\u0026#34;: \u0026#34;30g\u0026#34;, \u0026#34;fat\u0026#34;: \u0026#34;10g\u0026#34; }, \u0026#34;tags\u0026#34;: [\u0026#34;healthy\u0026#34;, \u0026#34;quick\u0026#34;], \u0026#34;notes\u0026#34;: \u0026#34;Phù hợp cho người ${age ? `${age} tuổi` : \u0026#39;người lớn\u0026#39;}\u0026#34; }`; try { const response = await bedrockClient.send(new InvokeModelCommand({ modelId: \u0026#39;anthropic.claude-3-haiku-20240307-v1:0\u0026#39;, contentType: \u0026#39;application/json\u0026#39;, accept: \u0026#39;application/json\u0026#39;, body: JSON.stringify({ anthropic_version: \u0026#39;bedrock-2023-05-31\u0026#39;, max_tokens: 2048, messages: [ { role: \u0026#39;user\u0026#39;, content: prompt } ] }) })); const responseBody = JSON.parse(new TextDecoder().decode(response.body)); const aiRecipeJSON = JSON.parse(responseBody.content[0].text); // Thêm metadata cho AI-generated recipe const aiRecipe = { ...aiRecipeJSON, recipe_id: `ai-gen-${generateUUID()}`, source: \u0026#39;ai\u0026#39;, is_new: true, is_approved: false, created_by: \u0026#39;bedrock-ai\u0026#39;, created_at: new Date().toISOString(), // Privacy metadata: Log rằng đã sử dụng thông tin cá nhân (cho audit) personalization_used: { age_range: age ? `${Math.floor(age / 10) * 10}-${Math.floor(age / 10) * 10 + 9}` : null, gender: userContext.gender || null, country: userContext.country || null, cuisine_preference: userContext.cuisine_preference || [], allergies_avoided: userContext.allergies || [] } }; return aiRecipe; } catch (error) { console.error(\u0026#39;AI Recipe Generation Error:\u0026#39;, error); throw new Error(\u0026#39;Failed to generate AI recipe\u0026#39;); } }Lambda Recipe Rating Handler:\n// Auto-approval dựa trên rating (\u0026gt;= 4 sao) async function handleRecipeRating(recipeId, userId, rating, comment, historyId) { // Validate rating (1-5) if (rating \u0026lt; 1 || rating \u0026gt; 5) { return { statusCode: 400, body: { error: \u0026#39;Invalid rating. Must be 1-5.\u0026#39; } }; } // Step 1: Save rating to recipe_ratings table await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `RECIPE#${recipeId}`, SK: `RATING#${userId}`, rating_id: generateUUID(), recipe_id: recipeId, user_id: userId, rating, comment, history_id: historyId, is_verified_cook: historyId ? true : false, created_at: new Date().toISOString(), updated_at: new Date().toISOString() } })); // Step 2: Update user_cooking_history với personal_rating if (historyId) { await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `USER#${userId}`, SK: `COOKING#${historyId}`, personal_rating: rating, updated_at: new Date().toISOString() } })); } // Step 3: Calculate average rating cho recipe const avgRating = await calculateAverageRating(recipeId); const ratingCount = await getRatingCount(recipeId); // Step 4: Auto-approve if \u0026gt;= 4.0 stars if (avgRating \u0026gt;= 4.0) { await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `RECIPE#${recipeId}`, SK: \u0026#39;METADATA\u0026#39;, is_approved: true, is_public: true, approval_type: \u0026#39;auto_rating\u0026#39;, average_rating: avgRating, rating_count: ratingCount, approved_at: new Date().toISOString(), updated_at: new Date().toISOString() } })); return { statusCode: 200, body: { success: true, rating_saved: true, average_rating: avgRating, rating_count: ratingCount, auto_approved: true, message: \u0026#39;Công thức đã được thêm vào database tổng!\u0026#39; } }; } // Step 5: Rating \u0026lt; 4.0 - chỉ cảm ơn return { statusCode: 200, body: { success: true, rating_saved: true, average_rating: avgRating, rating_count: ratingCount, auto_approved: false, message: \u0026#39;Cảm ơn đánh giá của bạn!\u0026#39; } }; } // Calculate average rating async function calculateAverageRating(recipeId) { const result = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND begins_with(SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `RECIPE#${recipeId}`, \u0026#39;:sk\u0026#39;: \u0026#39;RATING#\u0026#39; } })); if (!result.Items || result.Items.length === 0) return 0; const total = result.Items.reduce((sum, item) =\u0026gt; sum + item.rating, 0); return (total / result.Items.length).toFixed(1); } // Get rating count async function getRatingCount(recipeId) { const result = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND begins_with(SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `RECIPE#${recipeId}`, \u0026#39;:sk\u0026#39;: \u0026#39;RATING#\u0026#39; }, Select: \u0026#39;COUNT\u0026#39; })); return result.Count || 0; }Lambda Cooking History Handler:\n// Quản lý lịch sử nấu ăn cá nhân async function startCooking(userId, recipeId, suggestionId) { const historyId = generateUUID(); await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `USER#${userId}`, SK: `COOKING#${new Date().toISOString()}#${historyId}`, history_id: historyId, user_id: userId, recipe_id: recipeId, suggestion_id: suggestionId, status: \u0026#39;cooking\u0026#39;, created_at: new Date().toISOString(), updated_at: new Date().toISOString() } })); return { statusCode: 200, body: { history_id: historyId, message: \u0026#39;Bắt đầu nấu ăn!\u0026#39; } }; } // Hoàn thành nấu ăn async function completeCooking(historyId, userId) { await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `USER#${userId}`, SK: `COOKING#${historyId}`, status: \u0026#39;completed\u0026#39;, cook_date: new Date().toISOString(), updated_at: new Date().toISOString() } })); return { statusCode: 200, body: { message: \u0026#39;Hoàn thành! Vui lòng đánh giá món ăn.\u0026#39;, show_rating_form: true } }; } // Lấy lịch sử nấu ăn async function getCookingHistory(userId) { const result = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND begins_with(SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `USER#${userId}`, \u0026#39;:sk\u0026#39;: \u0026#39;COOKING#\u0026#39; }, ScanIndexForward: false // Newest first })); return { statusCode: 200, body: { history: result.Items || [] } }; }Dịch Vụ Chính:\nAmazon Bedrock: Claude 3 Haiku model DynamoDB: Lưu trữ dữ liệu người dùng \u0026amp; gợi ý AI Lambda: Serverless compute (Node.js 20) API Gateway: REST API endpoints Cơ Sở Dữ Liệu: Amazon DynamoDB#\rCác Bảng Sử Dụng:\nUsers (PK: user_id) - Hồ sơ \u0026amp; vai trò UserData (PK: user_id, SK: PREFERENCES | INGREDIENTS) - Cài đặt người dùng Recipes (PK: recipe_id) - Công thức (có thêm field is_approved, approval_type, average_rating) RecipeRatings (PK: recipe_id, SK: user_id) - Đánh giá công thức cho auto-approval UserCookingHistory (PK: user_id, SK: timestamp) - Lịch sử nấu ăn cá nhân (thay thế favorites) MasterIngredients (PK: ingredient_id) - Master list nguyên liệu để validate PrivacySettings (PK: user_id) - Cấu hình quyền riêng tư Friendships (PK: user_id, SK: friend_id) - Kết nối xã hội AISuggestions (PK: user_id, SK: timestamp) - Lịch sử AI Triển Khai Quyền Riêng Tư:\n// Bộ lọc quyền riêng tư áp dụng trước khi trả về dữ liệu người dùng if (privacy.ingredients_visibility === \u0026#39;friends\u0026#39; \u0026amp;\u0026amp; !isFriend) { delete userProfile.ingredients; }API Endpoints#\rLuồng Gợi Ý AI (Enhanced - Flexible Mix):\nPOST /ai/suggest\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;ingredients\u0026#34;: [\u0026#34;thịt gà\u0026#34;, \u0026#34;cà chua\u0026#34;, \u0026#34;hành\u0026#34;],\r\u0026#34;recipe_count\u0026#34;: 3 // NEW: 1-5 món (default: 1)\r}\rResponse (Success - Flexible mix):\r{\r\u0026#34;suggestions\u0026#34;: [\r{\r\u0026#34;id\u0026#34;: \u0026#34;recipe-001\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Gà xào cà chua\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;,\r\u0026#34;cooking_method\u0026#34;: \u0026#34;xào\u0026#34;, // NEW\r\u0026#34;meal_type\u0026#34;: \u0026#34;món chính\u0026#34;, // NEW\r\u0026#34;match_score\u0026#34;: 0.95,\r\u0026#34;is_approved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 4.5\r},\r{\r\u0026#34;id\u0026#34;: \u0026#34;recipe-002\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Canh cà chua\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;,\r\u0026#34;cooking_method\u0026#34;: \u0026#34;canh\u0026#34;, // NEW - Diverse!\r\u0026#34;meal_type\u0026#34;: \u0026#34;canh\u0026#34;,\r\u0026#34;match_score\u0026#34;: 0.80,\r\u0026#34;is_approved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 4.2\r},\r{\r\u0026#34;id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Gà hấp cà chua hành\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;ai\u0026#34;,\r\u0026#34;cooking_method\u0026#34;: \u0026#34;hấp\u0026#34;, // NEW - Diverse!\r\u0026#34;meal_type\u0026#34;: \u0026#34;món chính\u0026#34;,\r\u0026#34;is_new\u0026#34;: true,\r\u0026#34;is_approved\u0026#34;: false,\r\u0026#34;ingredients\u0026#34;: [...],\r\u0026#34;instructions\u0026#34;: [...]\r}\r],\r\u0026#34;stats\u0026#34;: {\r\u0026#34;requested\u0026#34;: 3, // NEW\r\u0026#34;from_database\u0026#34;: 2, // NEW - Flexible!\r\u0026#34;from_ai\u0026#34;: 1 // NEW - Only 1 AI call needed!\r},\r\u0026#34;warnings\u0026#34;: [] // NEW - Empty if all ingredients valid\r}\rResponse (Warning - Invalid ingredient but still work):\r{\r\u0026#34;suggestions\u0026#34;: [...], // Still return results\r\u0026#34;stats\u0026#34;: {\r\u0026#34;requested\u0026#34;: 3,\r\u0026#34;from_database\u0026#34;: 0, // Not enough valid ingredients for DB\r\u0026#34;from_ai\u0026#34;: 3 // AI handles it\r},\r\u0026#34;warnings\u0026#34;: [ // NEW\r{\r\u0026#34;ingredient\u0026#34;: \u0026#34;abc xyz\u0026#34;,\r\u0026#34;message\u0026#34;: \u0026#34;Nguyên liệu không hợp lệ, AI sẽ cố gắng xử lý\u0026#34;,\r\u0026#34;suggestions\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;],\r\u0026#34;reported\u0026#34;: true // Đã log để admin review\r}\r]\r}\rResponse (Error - All invalid):\r{\r\u0026#34;error\u0026#34;: \u0026#34;all_ingredients_invalid\u0026#34;,\r\u0026#34;message\u0026#34;: \u0026#34;Tất cả nguyên liệu không hợp lệ. Vui lòng nhập lại.\u0026#34;,\r\u0026#34;invalid_ingredients\u0026#34;: [\u0026#34;abc\u0026#34;, \u0026#34;xyz\u0026#34;, \u0026#34;123\u0026#34;],\r\u0026#34;suggestions\u0026#34;: [\r{ \u0026#34;original\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;similar\u0026#34;: [\u0026#34;cá\u0026#34;, \u0026#34;gà\u0026#34;] },\r{ \u0026#34;original\u0026#34;: \u0026#34;xyz\u0026#34;, \u0026#34;similar\u0026#34;: [\u0026#34;rau\u0026#34;, \u0026#34;củ\u0026#34;] }\r]\r}Luồng Cooking History:\nPOST /cooking/start\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;recipe_id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;suggestion_id\u0026#34;: \u0026#34;suggestion-123\u0026#34;\r}\rResponse:\r{\r\u0026#34;history_id\u0026#34;: \u0026#34;history-001\u0026#34;,\r\u0026#34;message\u0026#34;: \u0026#34;Bắt đầu nấu ăn!\u0026#34;\r}\rPUT /cooking/{history_id}/complete\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rResponse:\r{\r\u0026#34;message\u0026#34;: \u0026#34;Hoàn thành! Vui lòng đánh giá món ăn.\u0026#34;,\r\u0026#34;show_rating_form\u0026#34;: true\r}\rGET /user/cooking-history\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rResponse:\r{\r\u0026#34;history\u0026#34;: [\r{\r\u0026#34;history_id\u0026#34;: \u0026#34;history-001\u0026#34;,\r\u0026#34;recipe_id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;,\r\u0026#34;personal_rating\u0026#34;: 5,\r\u0026#34;is_favorite\u0026#34;: true,\r\u0026#34;cook_date\u0026#34;: \u0026#34;2025-10-03T10:30:00Z\u0026#34;\r},\r...\r]\r}Luồng Rating \u0026amp; Auto-Approval:\nPOST /recipes/{id}/rate\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;rating\u0026#34;: 5,\r\u0026#34;comment\u0026#34;: \u0026#34;Món này rất ngon!\u0026#34;,\r\u0026#34;history_id\u0026#34;: \u0026#34;history-001\u0026#34;\r}\rResponse (Auto-approved):\r{\r\u0026#34;success\u0026#34;: true,\r\u0026#34;rating_saved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 4.2,\r\u0026#34;rating_count\u0026#34;: 15,\r\u0026#34;auto_approved\u0026#34;: true,\r\u0026#34;message\u0026#34;: \u0026#34;Công thức đã được thêm vào database!\u0026#34;,\r\u0026#34;recipe\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;is_approved\u0026#34;: true,\r\u0026#34;is_public\u0026#34;: true,\r\u0026#34;approval_type\u0026#34;: \u0026#34;auto_rating\u0026#34;\r}\r}\rResponse (Not approved):\r{\r\u0026#34;success\u0026#34;: true,\r\u0026#34;rating_saved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 3.5,\r\u0026#34;rating_count\u0026#34;: 8,\r\u0026#34;auto_approved\u0026#34;: false,\r\u0026#34;message\u0026#34;: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34;\r}Luồng Validate Ingredients:\nPOST /ingredients/validate\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;ingredients\u0026#34;: [\u0026#34;cá rô\u0026#34;, \u0026#34;abc xyz\u0026#34;, \u0026#34;thit ga\u0026#34;]\r}\rResponse:\r{\r\u0026#34;valid\u0026#34;: [\u0026#34;cá rô\u0026#34;],\r\u0026#34;invalid\u0026#34;: [\u0026#34;abc xyz\u0026#34;],\r\u0026#34;corrected\u0026#34;: [\r{\r\u0026#34;original\u0026#34;: \u0026#34;thit ga\u0026#34;,\r\u0026#34;matched\u0026#34;: \u0026#34;thịt gà\u0026#34;,\r\u0026#34;confidence\u0026#34;: 0.85\r}\r],\r\u0026#34;suggestions\u0026#34;: [\r{\r\u0026#34;original\u0026#34;: \u0026#34;abc xyz\u0026#34;,\r\u0026#34;similar\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;, \u0026#34;tôm\u0026#34;, \u0026#34;mực\u0026#34;]\r}\r]\r}Endpoints Quyền Riêng Tư \u0026amp; Xã Hội:\nPUT /user/privacy - Cập nhật cài đặt quyền riêng tư\rGET /user/profile/{userId} - Lấy hồ sơ (đã lọc quyền riêng tư)\rPOST /friends/request - Gửi yêu cầu kết bạn\rGET /friends - Danh sách bạn bèEndpoints Quản Trị:\nGET /admin/users - Danh sách tất cả người dùng (chỉ admin)\rPUT /admin/users/{id}/ban - Cấm người dùng (chỉ admin)\rGET /admin/statistics - Thống kê hệ thống (chỉ admin)\rGET /admin/recipes/pending - Công thức chờ approval (ít sử dụng do auto-approval)Endpoints Mới - Social Features:\nPOST /posts - Tạo bài đăng\rGET /posts/feed - Lấy newsfeed\rPOST /posts/{id}/comments - Bình luận\rPOST /reactions - Thêm reaction\rGET /notifications - Lấy thông báo   QUYỀN RIÊNG TƯ \u0026amp; BẢO MẬT#\rCác Mức Quyền Riêng Tư#\rPublic: Mọi người có thể xem Friends: Chỉ bạn bè đã chấp nhận có thể xem Private: Chỉ người dùng có thể xem Thuộc Tính Được Kiểm Soát Quyền Riêng Tư#\rEmail (mặc định: private) Ngày sinh (mặc định: friends) Giới tính (mặc định: public) Quốc gia (mặc định: public) Công thức (mặc định: public) Nguyên liệu (mặc định: friends) Sở thích (mặc định: friends) Kiểm Soát Truy Cập Theo Vai Trò#\rUser: Truy cập thông thường Admin: Truy cập đầy đủ + công cụ quản trị Thời Gian \u0026amp; Mốc Quan Trọng#\rXem Hướng Dẫn Triển Khai Khách Hàng để biết thời gian chi tiết.\n"},{"id":5,"href":"/docs/dlc/02-constraints/","title":"02 - Constraints","section":"Docs","content":"Giới Hạn Dự Án - Smart Cooking App#\r   Budget Constraints#\rDevelopment Budget#\rInitial Investment: $100 - 500 Development time: 3 months Testing \u0026amp; QA Initial infrastructure setup Operational Budget (Monthly)#\rMVP Phase (Month 1-3):\nTarget: $135-160/month (1,000 users) Maximum: $200/month (hard limit) Buffer: 20% for unexpected costs Growth Phase (Month 4-12):\nTarget: $150-400/month (scaling with users) Maximum: $500/month Cost per user: Must decrease as scale increases Cost Breakdown Limits#\rService MVP Budget Max Budget Notes AWS Amplify $15 $20 Hosting + CI/CD CloudFront $8 $15 CDN API Gateway $10 $20 REST API Lambda $25 $40 11 functions Bedrock AI $12-30 $50 Flexible mix strategy DynamoDB $45 $60 On-demand S3 $10 $20 Images CloudWatch $12 $20 Logging WAF $6 $10 Security Other $2 $5 Secrets, misc Budget Alarms#\rWarning at: $140/month (MVP), $180/month (Growth) Critical at: $170/month (MVP), $450/month (Growth) Hard stop at: $200/month (MVP), $500/month (Growth) Time Constraints#\rProject Timeline#\rTotal Duration: 3 months (MVP) Start Date: Week 1 MVP Launch: Week 12 Beta Period: Week 13-14 Phase Breakdown#\rPhase Duration Deadline Deliverables Planning \u0026amp; Design 2 weeks Week 2 Architecture, DB design, Cost analysis Core Development 6 weeks Week 8 Auth, Ingredients, AI Engine, Rating Social Features 4 weeks Week 12 Privacy, Friends, Posts, Notifications Testing \u0026amp; Launch 2 weeks Week 14 Bug fixes, Beta release Critical Path Items#\rWeek 3-4: DynamoDB schema + Lambda infrastructure (BLOCKER) Week 5-6: AI suggestion engine + Master ingredients (BLOCKER) Week 7-8: Rating system + Auto-approval (BLOCKER) Week 9-10: Privacy + Friend system Week 11-12: Posts + Notifications Development Velocity#\rSprint Length: 1 week Story Points: 20-25 per sprint (solo developer) Buffer: 20% for unexpected issues No Overtime: Sustainable pace, 40 hours/week Technology Constraints#\rAWS Service Limits#\rLambda Constraints#\rMemory: 256MB-1024MB per function Timeout: 10-60 seconds (AI: 60s, others: 10-30s) Concurrent Executions: 1,000 default (can request increase) Package Size: 50MB compressed, 250MB uncompressed Environment Variables: 4KB total DynamoDB Constraints#\rItem Size: 400KB maximum Partition Key: 2048 bytes Sort Key: 1024 bytes GSI: 20 per table (using 3-4) Query Result: 1MB per query Batch Write: 25 items per batch API Gateway Constraints#\rTimeout: 29 seconds maximum Payload Size: 10MB request/response Rate Limit: 10,000 requests/second (default) Burst: 5,000 requests Cognito Constraints#\rUser Attributes: 50 custom attributes max Free Tier: 50,000 MAU Token Expiration: 1 hour (access), 30 days (refresh) Bedrock AI Constraints#\rModel: Claude 3 Haiku (cost-effective) or Sonnet (quality) Input Token Limit: 200K tokens (Claude 3.5) Output Token Limit: 8K tokens recommended Rate Limit: 200 requests/minute (default) Timeout: 60 seconds per request S3 Constraints#\rObject Size: 5TB maximum PUT Rate: 3,500 requests/second per prefix GET Rate: 5,500 requests/second per prefix Free Tier: 5GB storage (12 months) Technology Stack Fixed Choices#\rBackend Runtime: Node.js 20 (LTS) - FIXED Database: DynamoDB (no RDS/PostgreSQL for MVP) AI Provider: Amazon Bedrock (no OpenAI, no self-hosted) Frontend: Next.js (React-based) Hosting: AWS Amplify (no EC2, no custom servers) CDN: CloudFront (integrated with Amplify) Auth: Cognito (no custom auth, no Auth0) Third-Party Dependencies#\rMinimal External APIs: Avoid external dependencies No Payment Gateway in MVP: Defer to Phase 3 No Email Service: Use Cognito built-in email No SMS Service: Defer to Phase 3 Resource Constraints#\rTeam Size#\rSolo Developer: 1 full-stack developer No Designer: Use free UI libraries (Tailwind, shadcn/ui) No QA Team: Self-testing + beta users No DevOps: Serverless = minimal ops Skills \u0026amp; Expertise#\rRequired Skills: JavaScript/TypeScript/Node.js React/Node.js AWS services (Lambda, DynamoDB, Cognito) Serverless architecture AI/ML: Basic understanding (learning curve) DynamoDB single-table design (learning curve) Learning Curve Budget#\rAmazon Bedrock: 1 week to learn API DynamoDB Single-Table Design: 1 week to master AWS X-Ray Tracing: 2-3 days Total: ~2.5 weeks learning time (included in 3-month timeline) Security Constraints#\rCompliance Requirements#\rGDPR-Ready: EU users data protection\nRight to access Right to deletion Data portability Consent management Privacy Policy: Must have before launch\nTerms of Service: Must have before launch\nCookie Policy: If using analytics\nData Retention#\rUser Data: Keep until user deletes account AI Suggestions: TTL 90 days (optional cleanup) Cooking History: Keep for 1 year, then archive Logs: CloudWatch retention 7 days (cost optimization) Security Standards#\rPassword Policy: Enforced by Cognito Min 8 characters 1 uppercase, 1 lowercase, 1 number No common passwords MFA: Optional (not in MVP) API Keys: Stored in AWS Secrets Manager Encryption: All data encrypted at rest and in transit Data Constraints#\rData Volume Limits (MVP)#\rUsers: 1,000 active users (target) Recipes: 5,000 total recipes Master Ingredients: 5,000 ingredients AI Suggestions: 10,000 per month Cooking History: 50,000 entries Posts: 10,000 posts (Phase 2) Comments: 30,000 comments (Phase 2) Storage Limits#\rDynamoDB: 25GB free tier, then $0.25/GB S3: 5GB free tier (12 months), then $0.023/GB User Avatars: Max 5MB per image Recipe Images: Max 10MB per image Post Images: Max 5MB per image (Phase 2) Data Quality Constraints#\rMaster Ingredients: Manually curated (start with 500, grow to 5,000) Invalid Ingredients: Auto-report system, admin review Recipe Quality: Community-driven (rating \u0026gt;= 4.0 for approval) Duplicate Recipes: Fuzzy matching to prevent duplicates Geographic Constraints#\rTarget Region#\rPrimary: Vietnam (Vietnamese users) Secondary: Southeast Asia Language: Vietnamese + English (MVP) AWS Region#\rPrimary Region: us-east-1 (N. Virginia) Reason: Lowest cost, most services available Bedrock available Amplify supported Secondary Region: None (MVP) CloudFront: Global CDN (auto-distributed) Latency Expectations#\rVietnam to us-east-1: ~200-250ms base latency API Response: +100-500ms processing Total: ~300-750ms acceptable for MVP Optimization: CloudFront caching reduces latency for static assets Operational Constraints#\rMonitoring \u0026amp; Alerting#\rFree Tier Usage: Maximize AWS Free Tier CloudWatch Alarms: Max 10 alarms (free tier) Log Retention: 7 days (cost limit) X-Ray Tracing: Sample 10% of requests (cost limit) Support \u0026amp; Maintenance#\rNo 24/7 Support: Best-effort during business hours Response Time: 48 hours for non-critical issues Downtime Window: Sunday 2-4 AM UTC (acceptable for maintenance) Backup \u0026amp; Recovery#\rDynamoDB: Point-in-time recovery enabled (cost: ~$20/month) RTO (Recovery Time Objective): 4 hours RPO (Recovery Point Objective): 1 hour (PITR) S3: Versioning enabled for critical buckets Platform Constraints#\rMVP Platform Support#\rWeb App: Priority 1 Desktop: Chrome, Firefox, Safari, Edge (latest 2 versions) Mobile Web: iOS Safari, Android Chrome Browser Compatibility#\rModern Browsers Only: ES6+ required No IE11 Support: Not supporting legacy browsers Mobile-First Design: Responsive from 320px width Scaling Constraints#\rMVP Scale Targets#\rConcurrent Users: 100 (MVP), 1,000 (Month 6) Requests/Second: 10 (MVP), 100 (Month 6) Database Reads: 10K/day (MVP), 100K/day (Month 6) AI Calls: 1K/month (MVP), 10K/month (Month 6) Scaling Strategy#\rVertical Scaling: Increase Lambda memory (256MB → 1024MB) Horizontal Scaling: Serverless auto-scales Database Scaling: DynamoDB on-demand (auto-scales) Cost Scaling: Must stay below $0.20/user/month (MVP) Scaling Blockers#\rAI Cost: Most expensive component (30-50% of total cost) Mitigation: Flexible DB/AI mix, cache AI responses Target: Reduce AI cost by 50% through DB coverage growth Risk Constraints#\rTechnical Risks#\rDynamoDB Single-Table Design Complexity: High learning curve Mitigation: 1 week study period, consulting documentation Bedrock API Rate Limits: Could block AI suggestions Mitigation: Implement queue system, retry logic Cold Start Latency: Lambda cold starts can be slow Mitigation: Provisioned concurrency for critical functions Business Risks#\rLow User Adoption: \u0026lt; 500 users in 3 months Mitigation: Beta testing, marketing strategy High Cost Overrun: \u0026gt; $200/month Mitigation: Budget alarms, cost monitoring dashboard AI Recipe Quality: Low approval rate (\u0026lt; 30%) Mitigation: Prompt engineering, A/B testing Legal Risks#\rGDPR Non-Compliance: EU user data violations Mitigation: Privacy policy, data deletion API, consent management User-Generated Content: Inappropriate content Mitigation: Content moderation (Phase 2), reporting system Quality Constraints#\rTesting Requirements#\rUnit Tests: \u0026gt;= 70% coverage for critical paths Integration Tests: API endpoint testing Manual Testing: Full user journey testing before launch Performance Testing: Load testing with 100 concurrent users Security Testing: OWASP top 10 vulnerabilities check Code Quality#\rESLint: Enforce code standards Prettier: Code formatting TypeScript: Type safety (preferred, not required for MVP) Code Reviews: Self-review + checklist Documentation#\rAPI Documentation: OpenAPI/Swagger spec Architecture Diagrams: Mermaid diagrams in Markdown Deployment Guide: Step-by-step AWS setup User Guide: Basic usage instructions Integration Constraints#\rNo External Integrations in MVP#\rNo payment gateway (Stripe/PayPal) - Phase 3 No email marketing (Mailchimp) - Phase 3 No analytics (Google Analytics) - Use CloudWatch No social login (Google/Facebook) - Cognito only No third-party recipe APIs - Self-contained Future Integrations (Post-MVP)#\rStripe for payments SendGrid for transactional emails Mixpanel/Amplitude for analytics Firebase Cloud Messaging for push notifications Summary of Critical Constraints#\rHard Constraints (Cannot Change)#\rBudget: $200/month maximum (MVP) Timeline: 3 months to MVP launch Team: Solo developer Technology: AWS serverless stack Region: us-east-1 (AWS limitations) Soft Constraints (Can Negotiate)#\rUser Target: 1,000 users (can be 500-1,500) Features: Social features can defer to Phase 2 Performance: 500ms API can be 750ms if needed Test Coverage: 70% can be 50% for MVP Constraints Impact Matrix#\rConstraint Impact Mitigation Priority Budget HIGH Cost alarms, flexible AI mix P0 Timeline HIGH Agile sprints, MVP focus P0 Solo Dev MEDIUM Serverless, managed services P0 Learning Curve MEDIUM 2.5 weeks learning budget P1 AI Cost HIGH DB coverage growth strategy P0 Scaling LOW Serverless auto-scaling P2 Related Documents#\r00 - Overview 01 - Requirements 30 - Cost Analysis 31 - Scaling "},{"id":6,"href":"/docs/summary/database-diagram/","title":"Database Schema Diagram","section":"Summary","content":"Sơ Đồ Cấu Trúc Cơ Sở Dữ Liệu#\rERD (Sơ Đồ Quan Hệ Thực Thể)#\r// Bảng Người Dùng (AI sử dụng: birth_year, gender, country)\rTable users {\ruser_id varchar(36) [pk, note: \u0026#39;UUID từ Cognito\u0026#39;]\remail varchar(255) [unique, not null]\rusername varchar(50) [unique, not null]\rfull_name varchar(100)\rdate_of_birth date [note: \u0026#39;AI dùng để tính tuổi → khuyến nghị dinh dưỡng phù hợp\u0026#39;]\rgender enum(\u0026#39;male\u0026#39;, \u0026#39;female\u0026#39;, \u0026#39;other\u0026#39;) [note: \u0026#39;AI dùng để khuyến nghị khẩu phần\u0026#39;]\rcountry varchar(50) [note: \u0026#39;AI ưu tiên món ăn địa phương (VD: Vietnam → món Việt)\u0026#39;]\ravatar_url varchar(500)\rrole enum(\u0026#39;user\u0026#39;, \u0026#39;admin\u0026#39;) [default: \u0026#39;user\u0026#39;]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rlast_login timestamp\rindexes {\remail\rusername\rrole\r}\rNote: \u0026#39;\u0026#39;\u0026#39;\r**AI Agent Privacy Policy:**\rAI chỉ sử dụng: năm sinh (age range), giới tính, quốc gia\rMục đích: Cá nhân hóa gợi ý món ăn\rKHÔNG sử dụng: Email, tên đầy đủ, địa chỉ cụ thể\r\u0026#39;\u0026#39;\u0026#39;\r}\r// Tùy Chọn Người Dùng (Sử dụng bởi AI Agent)\rTable user_preferences {\rpreference_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rdietary_restrictions json [note: \u0026#39;chay, thuần chay, halal, kosher, v.v.\u0026#39;]\rallergies json [note: \u0026#39;Danh sách dị ứng - AI TRÁNH TUYỆT ĐỐI các nguyên liệu này\u0026#39;]\rfavorite_cuisines json [note: \u0026#39;Ý, Việt Nam, Nhật Bản - AI ưu tiên món quốc gia này\u0026#39;]\rpreferred_cooking_methods json [note: \u0026#39;xào, hấp, canh, kho, chiên - AI ưu tiên phương pháp này khi suggest\u0026#39;]\rpreferred_recipe_count int [default: 1, note: \u0026#39;1-5 món muốn nấu mỗi lần, FREE: 1, PREMIUM: 5\u0026#39;]\rspice_level enum(\u0026#39;none\u0026#39;, \u0026#39;mild\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;hot\u0026#39;, \u0026#39;very_hot\u0026#39;)\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rNote: \u0026#39;\u0026#39;\u0026#39;\r**AI Agent sử dụng fields:**\r- allergies: Filter recipe ingredients (bảo vệ an toàn thực phẩm)\r- favorite_cuisines: Ưu tiên món Ý/Việt/... (personalization)\r- preferred_cooking_methods: Ưu tiên canh/hấp/chiên/... (đa dạng món)\r**Privacy Policy:**\r- Chỉ sử dụng cho personalization gợi ý món ăn\r- KHÔNG chia sẻ hoặc khai thác thông tin cá nhân\r\u0026#39;\u0026#39;\u0026#39;\r}\r// Cài Đặt Quyền Riêng Tư\rTable privacy_settings {\rsetting_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null, unique]\rprofile_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;, note: \u0026#39;Ai có thể xem hồ sơ\u0026#39;]\remail_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;private\u0026#39;]\rdate_of_birth_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rgender_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rcountry_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rrecipes_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\ringredients_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rpreferences_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\r}\r}\r// Quan Hệ Bạn Bè\rTable friendships {\rfriendship_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rfriend_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rstatus enum(\u0026#39;pending\u0026#39;, \u0026#39;accepted\u0026#39;, \u0026#39;blocked\u0026#39;) [default: \u0026#39;pending\u0026#39;]\rrequested_at timestamp [default: `now()`]\rresponded_at timestamp\rindexes {\r(user_id, friend_id) [unique]\ruser_id\rfriend_id\rstatus\r}\r}\r// Nguyên Liệu Người Dùng (Danh sách đơn giản - không theo dõi số lượng)\rTable user_ingredients {\ringredient_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ringredient_name varchar(256) [not null]\radded_at timestamp [default: `now()`]\rindexes {\r(user_id, ingredient_name) [unique]\r}\r}\r// Công Thức (Do người dùng tạo \u0026amp; AI tạo)\rTable recipes {\rrecipe_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, note: \u0026#39;Người tạo - null nếu là công thức hệ thống\u0026#39;]\rtitle varchar(200) [not null]\rnormalized_title varchar(200) [note: \u0026#39;Chữ thường, không dấu để tìm kiếm\u0026#39;]\rdescription text\rcuisine_type varchar(50)\rcooking_method varchar(50) [note: \u0026#39;xào, hấp, luộc, chiên, nướng, kho, rim, trộn, canh, lẩu\u0026#39;]\rmeal_type varchar(50) [note: \u0026#39;món chính, món phụ, canh, khai vị, tráng miệng\u0026#39;]\rprep_time_minutes int\rcook_time_minutes int\rservings int\rcalories_per_serving int\rinstructions json [note: \u0026#39;Mảng các đối tượng bước\u0026#39;]\ris_public boolean [default: false]\ris_ai_generated boolean [default: false]\ris_approved boolean [default: false, note: \u0026#39;Auto-approved nếu rating \u0026gt;= 4 sao\u0026#39;]\rapproval_type enum(\u0026#39;manual\u0026#39;, \u0026#39;auto_rating\u0026#39;, \u0026#39;auto_popular\u0026#39;, \u0026#39;system\u0026#39;) [note: \u0026#39;Cách thức approval\u0026#39;]\raverage_rating decimal(2,1) [default: 0.0, note: \u0026#39;Rating trung bình\u0026#39;]\rrating_count int [default: 0, note: \u0026#39;Số lượng đánh giá\u0026#39;]\rai_cache_hit_count int [default: 0, note: \u0026#39;Số lần tái sử dụng từ cache\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rapproved_at timestamp [note: \u0026#39;Thời điểm được approve\u0026#39;]\rindexes {\ruser_id\rnormalized_title\rcuisine_type\rcooking_method\rmeal_type\ris_approved\raverage_rating\r}\r}\r// Bộ Nhớ Cache Công Thức (Công thức AI tạo để tái sử dụng)\rTable recipe_cache {\rcache_id varchar(36) [pk]\rrecipe_name varchar(200) [not null]\rnormalized_name varchar(200) [unique, not null, note: \u0026#39;Khóa tìm kiếm\u0026#39;]\rrecipe_data json [note: \u0026#39;JSON công thức đầy đủ từ AI\u0026#39;]\ringredients_hash varchar(64) [note: \u0026#39;Hash của danh sách nguyên liệu\u0026#39;]\rcuisine_type varchar(50)\rhit_count int [default: 0, note: \u0026#39;Bộ đếm tái sử dụng\u0026#39;]\rlast_accessed timestamp\rcreated_at timestamp [default: `now()`]\rindexes {\rnormalized_name\ringredients_hash\rcuisine_type\r}\r}\r// Nguyên Liệu Công Thức\rTable recipe_ingredients {\rid varchar(36) [pk]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\ringredient_name varchar(100) [not null]\rquantity varchar(50) [note: \u0026#39;2 chén, 500g, v.v.\u0026#39;]\runit varchar(20)\ris_optional boolean [default: false]\rindexes {\rrecipe_id\r}\r}\r// Lịch Sử Gợi Ý AI (Enhanced)\rTable ai_suggestions {\rsuggestion_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id]\rcache_id varchar(36) [ref: \u0026gt; recipe_cache.cache_id, note: \u0026#39;Nếu từ cache\u0026#39;]\rprompt_text text [note: \u0026#39;Đầu vào của người dùng cho AI\u0026#39;]\ringredients_used json [note: \u0026#39;Danh sách nguyên liệu từ user_ingredients\u0026#39;]\rrequested_recipe_count int [default: 1, note: \u0026#39;1-5 món user yêu cầu\u0026#39;]\rrecipes_from_db int [default: 0, note: \u0026#39;Số món từ database\u0026#39;]\rrecipes_from_ai int [default: 0, note: \u0026#39;Số món AI tạo mới\u0026#39;]\rinvalid_ingredients json [note: \u0026#39;Nguyên liệu không hợp lệ - logged\u0026#39;]\rai_response json [note: \u0026#39;Phản hồi AI đầy đủ\u0026#39;]\rwas_from_cache boolean [default: false, note: \u0026#39;True nếu tái sử dụng từ cache\u0026#39;]\rwas_accepted boolean [default: false]\rfeedback_rating int [note: \u0026#39;1-5 sao\u0026#39;]\rfeedback_comment text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\rcache_id\r}\r}\r// Lịch Sử Nấu Ăn Cá Nhân (Thay thế favorites - mở rộng hơn)\rTable user_cooking_history {\rhistory_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rsuggestion_id varchar(36) [ref: \u0026gt; ai_suggestions.suggestion_id, note: \u0026#39;Nếu từ AI suggestion\u0026#39;]\rstatus enum(\u0026#39;planned\u0026#39;, \u0026#39;cooking\u0026#39;, \u0026#39;completed\u0026#39;, \u0026#39;failed\u0026#39;) [default: \u0026#39;planned\u0026#39;]\rpersonal_rating int [note: \u0026#39;1-5 sao - đánh giá cá nhân\u0026#39;]\rpersonal_notes text [note: \u0026#39;Ghi chú cá nhân\u0026#39;]\ris_favorite boolean [default: false, note: \u0026#39;Đánh dấu yêu thích\u0026#39;]\rcook_date timestamp [note: \u0026#39;Ngày nấu thực tế\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\rrecipe_id\rstatus\ris_favorite\rcook_date\r(user_id, recipe_id) [note: \u0026#39;Cho phép multiple entries - lịch sử nấu nhiều lần\u0026#39;]\r}\r}\r// Đánh Giá Công Thức (Cho auto-approval system)\rTable recipe_ratings {\rrating_id varchar(36) [pk]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rhistory_id varchar(36) [ref: \u0026gt; user_cooking_history.history_id, note: \u0026#39;Link đến lịch sử nấu\u0026#39;]\rrating int [not null, note: \u0026#39;1-5 sao\u0026#39;]\rcomment text\ris_verified_cook boolean [default: false, note: \u0026#39;User đã thực sự nấu món này\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\rrecipe_id\ruser_id\rrating\r(recipe_id, user_id) [unique, note: \u0026#39;Mỗi user chỉ rate 1 lần mỗi recipe\u0026#39;]\r}\r}\r// Kế Hoạch Bữa Ăn\rTable meal_plans {\rplan_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rplan_name varchar(100)\rstart_date date [not null]\rend_date date [not null]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rstart_date\r}\r}\r// Mục Kế Hoạch Bữa Ăn\rTable meal_plan_items {\ritem_id varchar(36) [pk]\rplan_id varchar(36) [ref: \u0026gt; meal_plans.plan_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rmeal_date date [not null]\rmeal_type enum(\u0026#39;breakfast\u0026#39;, \u0026#39;lunch\u0026#39;, \u0026#39;dinner\u0026#39;, \u0026#39;snack\u0026#39;)\rnotes text\rindexes {\rplan_id\rmeal_date\r}\r}\r// Master Ingredients (Danh sách nguyên liệu hợp lệ cho AI validation)\rTable master_ingredients {\ringredient_id varchar(36) [pk]\rname varchar(256) [unique, not null]\rnormalized_name varchar(256) [unique, not null, note: \u0026#39;Không dấu, chữ thường - cho fuzzy search\u0026#39;]\rcategory varchar(50) [note: \u0026#39;thịt, rau, gia vị, sữa, v.v.\u0026#39;]\raliases json [note: \u0026#39;Các tên gọi khác: [\u0026#34;thịt bò\u0026#34;, \u0026#34;bò\u0026#34;, \u0026#34;beef\u0026#34;] - hỗ trợ auto-correct\u0026#39;]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\rnormalized_name\rcategory\ris_active\r}\rNote: \u0026#39;\u0026#39;\u0026#39;\r**AI Agent Validation Flow:**\r1. User nhập nguyên liệu → normalize (bỏ dấu, lowercase)\r2. Check exact match với normalized_name\r3. Nếu không match → fuzzy search trong aliases\r4. Nếu vẫn không → gợi ý nguyên liệu tương tự (category match)\r5. Log invalid ingredients → report cho admin\r**Kết nối với AI Agent:**\r- validateIngredientsWithMaster() function\r- Tránh AI hallucination về tên nguyên liệu\r- Đảm bảo recipe accuracy\r\u0026#39;\u0026#39;\u0026#39;\r}\r// Nhật Ký Hoạt Động Người Dùng (Enhanced với invalid ingredient tracking)\rTable activity_logs {\rlog_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ractivity_type enum(\u0026#39;login\u0026#39;, \u0026#39;recipe_view\u0026#39;, \u0026#39;recipe_create\u0026#39;, \u0026#39;ai_suggestion\u0026#39;, \u0026#39;ingredient_add\u0026#39;, \u0026#39;recipe_cook\u0026#39;, \u0026#39;recipe_rate\u0026#39;, \u0026#39;invalid_ingredient\u0026#39;)\ractivity_data json\rip_address varchar(45)\ruser_agent text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\ractivity_type\r}\r}\r// Invalid Ingredients Reports (Optional - Post MVP)\rTable invalid_ingredients_reports {\rreport_id varchar(36) [pk]\ringredient_name varchar(256) [not null]\rnormalized_name varchar(256) [not null, note: \u0026#39;Chữ thường, không dấu\u0026#39;]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ruser_report_count int [default: 1, note: \u0026#39;Số lần user này report\u0026#39;]\rtotal_reports int [default: 1, note: \u0026#39;Tổng số reports từ tất cả users\u0026#39;]\rstatus enum(\u0026#39;pending\u0026#39;, \u0026#39;reviewed\u0026#39;, \u0026#39;added_to_master\u0026#39;, \u0026#39;spam\u0026#39;) [default: \u0026#39;pending\u0026#39;]\radmin_notes text\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\r(normalized_name, user_id) [unique]\rtotal_reports\rstatus\r}\r}\r// Bài Đăng (Posts)\rTable posts {\rpost_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, note: \u0026#39;Optional - nếu chia sẻ công thức\u0026#39;]\rcontent text [note: \u0026#39;Nội dung bài đăng\u0026#39;]\rimages json [note: \u0026#39;Mảng URLs ảnh\u0026#39;]\ris_public boolean [default: true]\rlikes_count int [default: 0]\rcomments_count int [default: 0]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\rrecipe_id\rcreated_at\ris_public\r}\r}\r// Bình Luận (Comments)\rTable comments {\rcomment_id varchar(36) [pk]\rpost_id varchar(36) [ref: \u0026gt; posts.post_id, not null]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rparent_comment_id varchar(36) [ref: \u0026gt; comments.comment_id, note: \u0026#39;Cho reply/thread\u0026#39;]\rcontent text [not null]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\rpost_id\ruser_id\rparent_comment_id\rcreated_at\r}\r}\r// Lượt Thích/Reactions\rTable reactions {\rreaction_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rtarget_type enum(\u0026#39;post\u0026#39;, \u0026#39;recipe\u0026#39;, \u0026#39;comment\u0026#39;) [not null]\rtarget_id varchar(36) [not null, note: \u0026#39;ID của post/recipe/comment\u0026#39;]\rreaction_type enum(\u0026#39;like\u0026#39;, \u0026#39;love\u0026#39;, \u0026#39;wow\u0026#39;, \u0026#39;sad\u0026#39;, \u0026#39;angry\u0026#39;) [default: \u0026#39;like\u0026#39;]\rcreated_at timestamp [default: `now()`]\rindexes {\r(user_id, target_type, target_id) [unique]\rtarget_type\rtarget_id\ruser_id\r}\r}\r// Thông Báo (Notifications)\rTable notifications {\rnotification_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ractor_id varchar(36) [ref: \u0026gt; users.user_id, note: \u0026#39;Người thực hiện hành động\u0026#39;]\rtype enum(\u0026#39;friend_request\u0026#39;, \u0026#39;friend_accept\u0026#39;, \u0026#39;comment\u0026#39;, \u0026#39;like\u0026#39;, \u0026#39;mention\u0026#39;, \u0026#39;recipe_share\u0026#39;) [not null]\rtarget_type enum(\u0026#39;post\u0026#39;, \u0026#39;recipe\u0026#39;, \u0026#39;comment\u0026#39;, \u0026#39;friend_request\u0026#39;) [not null]\rtarget_id varchar(36) [not null]\rcontent text [note: \u0026#39;Nội dung thông báo\u0026#39;]\ris_read boolean [default: false]\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\ris_read\rcreated_at\rtype\r}\r}\r// Người Theo Dõi (Followers) - Nếu muốn mô hình follow ngoài friendship\rTable user_followers {\rfollow_id varchar(36) [pk]\rfollower_id varchar(36) [ref: \u0026gt; users.user_id, not null, note: \u0026#39;Người theo dõi\u0026#39;]\rfollowing_id varchar(36) [ref: \u0026gt; users.user_id, not null, note: \u0026#39;Người được theo dõi\u0026#39;]\rcreated_at timestamp [default: `now()`]\rindexes {\r(follower_id, following_id) [unique]\rfollower_id\rfollowing_id\r}\r}Công Nghệ Cơ Sở Dữ Liệu#\rCơ Sở Dữ Liệu Chính: Amazon DynamoDB (NoSQL)\nKhả năng mở rộng cao Độ trễ thấp Serverless (không cần quản lý hạ tầng) Hiệu quả chi phí cho khối lượng công việc đọc nhiều Phương Án Thay Thế: Amazon RDS PostgreSQL\nNếu cần các truy vấn quan hệ phức tạp Tốt hơn cho phân tích và báo cáo Mẫu Truy Cập Dữ Liệu#\rMẫu Truy Cập Chính (Enhanced)#\rLấy Hồ Sơ Người Dùng: users.user_id → Dữ liệu người dùng + vai trò Lấy Tùy Chọn Người Dùng: user_preferences.user_id → Tùy chọn + preferred_recipe_count Lấy Nguyên Liệu Người Dùng: user_ingredients.user_id → Danh sách nguyên liệu Validate Nguyên Liệu: master_ingredients.normalized_name → Kiểm tra hợp lệ Lấy Cài Đặt Quyền Riêng Tư: privacy_settings.user_id → Cấu hình riêng tư Kiểm Tra Quan Hệ Bạn Bè: friendships(user_id, friend_id) → Trạng thái bạn bè Lấy Danh Sách Bạn Bè: friendships.user_id → Tất cả bạn bè Lấy Chi Tiết Công Thức: recipes.recipe_id → Công thức + Nguyên liệu Lấy Công Thức Đã Duyệt: recipes.is_approved=true → Công thức công khai Query Recipes by Category: recipes.cooking_method + meal_type → Diverse suggestions ⭐ Lấy Gợi Ý AI: ai_suggestions.user_id + created_at → Gợi ý gần đây Lấy Lịch Sử Nấu Ăn: user_cooking_history.user_id → Lịch sử cá nhân Lấy Món Yêu Thích: user_cooking_history.user_id + is_favorite=true → Món yêu thích Lấy Đánh Giá Công Thức: recipe_ratings.recipe_id → Tất cả rating Tính Toán Auto-Approval: recipe_ratings.recipe_id + rating\u0026gt;=4 → Kiểm tra điều kiện Log Invalid Ingredients: activity_logs.activity_type=\u0026lsquo;invalid_ingredient\u0026rsquo; → CloudWatch ⭐ Admin: Top Invalid Reports: invalid_ingredients_reports.total_reports → Admin dashboard ⭐ Lấy Bài Đăng Người Dùng: posts.user_id + created_at → Danh sách bài đăng Lấy Newsfeed: posts(bạn bè) + created_at → Bài đăng của bạn bè Lấy Bình Luận: comments.post_id + created_at → Bình luận của bài đăng Lấy Reactions: reactions(target_type, target_id) → Lượt thích/reactions Lấy Thông Báo: notifications.user_id + is_read → Thông báo chưa đọc Lấy Followers: user_followers.following_id → Danh sách người theo dõi Mẫu Thứ Cấp#\rTìm kiếm công thức theo món ăn/phương pháp (với lọc quyền riêng tư) Lấy công thức công khai phổ biến Quản trị: Lấy tất cả người dùng với bộ lọc vai trò Quản trị: Lấy thống kê người dùng Truy vấn phân tích (nhật ký hoạt động) Thiết Kế Bảng DynamoDB (Mẫu Bảng Đơn)#\rBảng Chính: smart-cooking-data#\rNgười Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PROFILE Thuộc tính: email, username, full_name, role, is_active, v.v. GSI1PK: ROLE#\u0026lt;role\u0026gt; (cho truy vấn quản trị) Tùy Chọn Người Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PREFERENCES Thuộc tính: dietary_restrictions, allergies, favorite_cuisines, v.v. Cài Đặt Quyền Riêng Tư#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PRIVACY Thuộc tính: profile_visibility, email_visibility, v.v. Nguyên Liệu Người Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: INGREDIENT#\u0026lt;ingredient_name\u0026gt; Thuộc tính: category, added_at Quan Hệ Bạn Bè#\rPK: USER#\u0026lt;user_id\u0026gt; SK: FRIEND#\u0026lt;friend_id\u0026gt; Thuộc tính: status, requested_at, responded_at GSI1PK: USER#\u0026lt;friend_id\u0026gt; (để tra cứu ngược) GSI1SK: FRIEND#\u0026lt;user_id\u0026gt; Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: METADATA Thuộc tính: title, description, cuisine_type, difficulty, v.v. GSI1PK: USER#\u0026lt;user_id\u0026gt; (công thức của người dùng) GSI1SK: RECIPE#\u0026lt;created_at\u0026gt; Nguyên Liệu Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: INGREDIENT#\u0026lt;number\u0026gt; Thuộc tính: ingredient_name, quantity, unit Gợi Ý AI#\rPK: USER#\u0026lt;user_id\u0026gt; SK: SUGGESTION#\u0026lt;timestamp\u0026gt; Thuộc tính: recipe_id, prompt_text, ai_response, was_accepted Lịch Sử Nấu Ăn#\rPK: USER#\u0026lt;user_id\u0026gt; SK: COOKING#\u0026lt;timestamp\u0026gt;#\u0026lt;history_id\u0026gt; Thuộc tính: recipe_id, status, personal_rating, is_favorite, cook_date GSI1PK: USER#\u0026lt;user_id\u0026gt;#FAVORITE (nếu is_favorite=true) GSI1SK: COOKING#\u0026lt;cook_date\u0026gt; Đánh Giá Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: RATING#\u0026lt;user_id\u0026gt; Thuộc tính: rating, comment, is_verified_cook, history_id GSI1PK: USER#\u0026lt;user_id\u0026gt; (ratings của user) GSI1SK: RATING#\u0026lt;created_at\u0026gt; Master Ingredients#\rPK: INGREDIENT#\u0026lt;ingredient_id\u0026gt; SK: METADATA Thuộc tính: name, normalized_name, category, aliases GSI1PK: CATEGORY#\u0026lt;category\u0026gt; GSI1SK: INGREDIENT#\u0026lt;name\u0026gt; Bài Đăng (Posts)#\rPK: POST#\u0026lt;post_id\u0026gt; SK: METADATA Thuộc tính: user_id, recipe_id, content, images, is_public, likes_count, comments_count GSI1PK: USER#\u0026lt;user_id\u0026gt; (bài đăng của người dùng) GSI1SK: POST#\u0026lt;created_at\u0026gt; Bình Luận (Comments)#\rPK: POST#\u0026lt;post_id\u0026gt; SK: COMMENT#\u0026lt;timestamp\u0026gt;#\u0026lt;comment_id\u0026gt; Thuộc tính: user_id, parent_comment_id, content GSI1PK: USER#\u0026lt;user_id\u0026gt; (bình luận của người dùng) GSI1SK: COMMENT#\u0026lt;timestamp\u0026gt; Reactions (Lượt thích)#\rPK: \u0026lt;target_type\u0026gt;#\u0026lt;target_id\u0026gt; (ví dụ: POST#123, RECIPE#456) SK: REACTION#\u0026lt;user_id\u0026gt; Thuộc tính: reaction_type, created_at GSI1PK: USER#\u0026lt;user_id\u0026gt; (reactions của người dùng) GSI1SK: REACTION#\u0026lt;created_at\u0026gt; Thông Báo (Notifications)#\rPK: USER#\u0026lt;user_id\u0026gt; SK: NOTIFICATION#\u0026lt;timestamp\u0026gt;#\u0026lt;notification_id\u0026gt; Thuộc tính: actor_id, type, target_type, target_id, content, is_read GSI1PK: USER#\u0026lt;user_id\u0026gt;#UNREAD (nếu is_read=false) GSI1SK: NOTIFICATION#\u0026lt;timestamp\u0026gt; Followers#\rPK: USER#\u0026lt;following_id\u0026gt; SK: FOLLOWER#\u0026lt;follower_id\u0026gt; Thuộc tính: created_at GSI1PK: USER#\u0026lt;follower_id\u0026gt; (tra cứu ngược - ai người này đang follow) GSI1SK: FOLLOWING#\u0026lt;following_id\u0026gt; Chỉ Mục Thứ Cấp Toàn Cục (GSI)#\rGSI1: Truy vấn dựa trên người dùng\nPK: GSI1PK (ví dụ: ROLE#admin, USER#\u0026lt;user_id\u0026gt;) SK: GSI1SK (ví dụ: timestamp, RECIPE#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Lấy tất cả quản trị viên Lấy công thức của người dùng sắp xếp theo ngày Lấy quan hệ bạn bè (tra cứu ngược) Lấy bài đăng của người dùng Lấy bình luận của người dùng Lấy reactions của người dùng Lấy thông báo chưa đọc Lấy danh sách following GSI2: Tìm kiếm \u0026amp; khám phá công thức (Enhanced)\nPK: GSI2PK (ví dụ: CUISINE#\u0026lt;type\u0026gt;, METHOD#\u0026lt;cooking_method\u0026gt;, MEALTYPE#\u0026lt;meal_type\u0026gt;) ⭐ SK: GSI2SK (ví dụ: RECIPE#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Tìm kiếm công thức theo món ăn Tìm kiếm công thức theo phương pháp nấu (xào, hấp, canh\u0026hellip;) ⭐ Tìm kiếm theo loại món (món chính, món phụ\u0026hellip;) ⭐ Lấy công thức phổ biến Diverse recipe suggestions ⭐ GSI3: Social Feed \u0026amp; Discovery\nPK: GSI3PK (ví dụ: FEED#\u0026lt;user_id\u0026gt;, PUBLIC) SK: GSI3SK (ví dụ: POST#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Lấy newsfeed (bài đăng của bạn bè) Lấy bài đăng công khai (explore feed) Lấy bài đăng trending Ước Tính Dung Lượng Lưu Trữ \u0026amp; Chi Phí#\rGiả Định#\r1.000 người dùng hoạt động Trung bình 20 nguyên liệu mỗi người dùng Trung bình 5 công thức đã lưu mỗi người dùng Trung bình 10 gợi ý AI mỗi người dùng mỗi tháng Trung bình 10 bài đăng mỗi người dùng Trung bình 30 bình luận mỗi người dùng Trung bình 100 reactions mỗi người dùng Trung bình 50 thông báo mỗi người dùng Trung bình 20 followers mỗi người dùng Ước Tính Dung Lượng (Enhanced)#\rNgười dùng (with preferences): 1.000 × 1.2KB = 1.2MB Nguyên liệu người dùng: 1.000 × 20 × 0.5KB = 10MB Master ingredients: 5.000 × 0.8KB = 4MB Công thức (with categories): 5.000 × 5.5KB = 27.5MB ⭐ Lịch sử nấu ăn: 1.000 × 50 × 0.8KB = 40MB Đánh giá công thức: 10.000 × 0.5KB = 5MB Gợi ý AI (enhanced): 10.000 × 2.5KB = 25MB ⭐ Invalid reports (optional): 500 × 0.5KB = 0.25MB ⭐ Bài đăng: 10.000 × 3KB = 30MB Bình luận: 30.000 × 0.5KB = 15MB Reactions: 100.000 × 0.2KB = 20MB Thông báo: 50.000 × 0.5KB = 25MB Followers: 20.000 × 0.3KB = 6MB Tổng cộng: ~209MB Chi Phí DynamoDB (Hàng Tháng) - Enhanced#\rLưu trữ: 209MB × $0.25/GB = ~$0.05 Khả năng đọc: ~$15-20 (tăng do category queries) ⭐ Khả năng ghi: ~$15-20 (tăng do invalid logging, enhanced suggestions) ⭐ GSI (4 indexes): ~$10-15 (tăng do GSI2 category index) ⭐ Tổng cộng: ~$40-55/tháng (vs $32-48 trước đó) "},{"id":7,"href":"/docs/summary/cost-analysis/","title":"Phân Tích Chi Phí","section":"Summary","content":"PHÂN TÍCH CHI PHÍ DỰ ÁN#\r   Chi Phí Hàng Tháng (1,000 users) - ENHANCED#\rDịch Vụ Chi Phí Ước Tính Ghi Chú AWS Amplify $15 Hosting Next.js + CI/CD Amazon CloudFront $8 CDN, 1TB data transfer Amazon API Gateway $10 ~180K requests/tháng AWS Lambda Functions $25 11 Lambda functions Amazon Bedrock (Flexible) $12-30 FLEXIBLE mix (60% DB coverage) ⭐ Amazon DynamoDB $45 On-demand với categories, invalid reports ⭐ Amazon S3 $10 100GB storage Amazon Cognito FREE \u0026lt; 50,000 MAU Amazon CloudWatch $12 Enhanced logging với invalid ingredients ⭐ AWS WAF $6 Web Application Firewall AWS Secrets Manager $2 API keys storage Tổng Chi Phí (Enhanced)#\rKịch Bản Chi Phí/Tháng Note Best Case (DB đủ 80%) ~$135 Tiết kiệm AI ✅ Average Case (DB 60%) ~$150 Recommended ✅ Worst Case (DB rỗng) ~$180 Cold start    Khuyến nghị:\nSử dụng Claude 3 Haiku Flexible mix tự động tiết kiệm cost khi DB đủ Average stable cost: $150/tháng (vs $168 fixed trước đó)    Phân Tích Chi Phí Theo Quy Mô (Enhanced)#\rKịch Bản 1: MVP (1,000 users)#\rChi phí: $135-180/tháng (flexible based on DB coverage) Chi phí/user: $0.135-0.180/tháng Doanh thu cần: $450-600/tháng (ROI 3-4x) Kịch Bản 2: Tăng Trưởng (10,000 users)#\rChi phí: $380-500/tháng Chi phí/user: $0.038-0.050/tháng Doanh thu cần: $1,500-2,000/tháng Kịch Bản 3: Scale (100,000 users)#\rChi phí: $2,000-2,800/tháng Chi phí/user: $0.020-0.028/tháng Doanh thu cần: $8,000-11,000/tháng    Chiến Lược Tối Ưu Chi Phí#\r1. AI/ML Costs (40-50% tổng chi phí) - ENHANCED ⭐#\r✅ Flexible DB/AI Mix → Tiết kiệm 30-70% tùy DB coverage ⭐ ✅ Sử dụng Claude 3 Haiku thay vì Sonnet → Tiết kiệm 70% ✅ Auto-build DB từ popular AI recipes → DB coverage tăng từ 0% → 80% ⭐ ✅ Cache AI responses → Giảm 20-30% duplicate calls ✅ Prompt optimization → Giảm token usage 15% ✅ Rate limiting \u0026amp; Freemium tiers → Control abuse ⭐ Tiết kiệm ước tính: $50-80/tháng (vs $40-50 trước đó)\n2. Database Costs (25-30% tổng chi phí)#\r✅ DynamoDB on-demand → Chỉ trả khi sử dụng ✅ TTL cho old AI suggestions → Giảm storage ✅ TTL cho old cooking history → Tự động xóa sau 1 năm (optional) ✅ Batch operations → Giảm write units ✅ Compression cho JSON fields → Giảm storage 30% ✅ Optimize GSI usage → Giảm chi phí index cho social features ✅ Cache master_ingredients → Giảm read operations cho validation Tiết kiệm ước tính: $10-15/tháng\n3. CDN \u0026amp; Hosting (15-20% tổng chi phí)#\r✅ CloudFront caching → Giảm origin requests ✅ Image optimization → Giảm bandwidth ✅ Gzip compression → Giảm 60% transfer size ✅ Lazy loading → Giảm initial load Tiết kiệm ước tính: $5-8/tháng\n4. Lambda Costs (12-15% tổng chi phí)#\r✅ Reserved concurrency → Ngăn runaway costs ✅ Memory optimization → Giảm execution cost ✅ Connection pooling → Giảm cold starts ✅ Code minification → Giảm package size ✅ Optimize Posts/Notifications Lambda → Batch processing ✅ Optimize Cooking History Lambda → Minimal compute ✅ Optimize Rating Lambda → Efficient calculation logic Tiết kiệm ước tính: $5-8/tháng\n5. Storage Costs (8-10% tổng chi phí)#\r✅ S3 Intelligent-Tiering → Auto-optimize ✅ Lifecycle policies → Xóa temp files sau 90 ngày ✅ Image compression → WebP format ✅ Thumbnail generation → Giảm storage ✅ Posts image optimization → Compress trước khi upload Tiết kiệm ước tính: $3-5/tháng\n   Chi Phí Dự Kiến Theo Thời Gian#\rNăm 1#\rTháng Users Chi Phí Revenue Target 1-3 100 $90 $280 (Beta) 4-6 500 $110 $400 7-9 1,500 $145 $550 10-12 3,000 $200 $750 Năm 2#\rQuarter Users Chi Phí Revenue Target Q1 5,000 $250 $1,100 Q2 8,000 $320 $1,600 Q3 12,000 $400 $2,400 Q4 20,000 $580 $3,800    Break-Even Analysis#\rMô Hình Freemium#\rFree tier: Giới hạn 10 AI suggestions/tháng Premium tier: $4.99/tháng (unlimited) Conversion rate target: 5% Tháng 1-3 (1,000 users)#\rPremium users: 50 (5%) Revenue: $250/tháng Cost: $133/tháng Profit: $117/tháng ✅ Tháng 12 (10,000 users)#\rPremium users: 500 (5%) Revenue: $2,500/tháng Cost: $400/tháng Profit: $2,100/tháng ✅ Mô Hình Ads (Alternative)#\rAd revenue: $0.50-1.00/user/tháng 1,000 users = $500-1,000/tháng Cost: $133/tháng Profit: $367-867/tháng ✅    Chi Phí Bảo Mật \u0026amp; Compliance#\rItem Chi Phí/Tháng AWS WAF $6 AWS Secrets Manager $2 SSL/TLS Certificates FREE (ACM) DDoS Protection (Shield Standard) FREE Encryption at Rest FREE CloudWatch Alarms $1 Total $9    Chi Phí Tăng Trưởng Dự Kiến#\rMarketing \u0026amp; Growth (Ngoài AWS)#\rMarketing: $500-1,000/tháng (Facebook Ads, Google Ads) Support: $200-500/tháng (Zendesk/Intercom) Analytics: $50-100/tháng (Mixpanel/Amplitude) Payment Processing: 2.9% + $0.30/transaction (Stripe) Total Operating Costs (Tháng 12)#\rAWS Infrastructure: $200 Marketing: $800 Support: $300 Analytics: $75 Payment Processing: $75 (3% × $2,500) Total: $1,450/tháng    ROI Projection#\rYear 1#\rTotal Investment: $10,000 (dev) + $1,800 (AWS) = $11,800 Revenue Year 1: $20,000 (average $1,667/tháng) ROI: 70% ✅ Year 2#\rTotal Investment: $5,000 (maintenance) + $4,000 (AWS) Revenue Year 2: $70,000 (average $5,833/tháng) ROI: 680% ✅✅    Khuyến Nghị Cuối Cùng#\rGiai Đoạn MVP (0-3 tháng) - ENHANCED#\r✅ Sử dụng Claude 3 Haiku ✅ Implement Flexible DB/AI mix ⭐ ✅ Enable CloudFront caching ✅ Set billing alarms tại $140, $170, $200 ⭐ ✅ Freemium tier: Free (1 món), Premium (5 món) ⭐ ✅ Cache master_ingredients in-memory ✅ Simple invalid logging (CloudWatch only) ✅ Category-based diverse suggestions ⭐ Chi phí target: $135-160/tháng (vs $90-130 MVP basic)\nGiai Đoạn Growth (4-12 tháng) - ENHANCED#\r✅ Monitor DB coverage % growth → Target 60-80% ⭐ ✅ Auto-approve popular AI recipes → Build DB automatically ⭐ ✅ Scale DynamoDB capacity dần dần ✅ Consider Reserved Instances khi stable ✅ Implement advanced caching strategies ✅ Optimize category distribution in AI suggestions ⭐ ✅ Full invalid reporting system với admin dashboard ⭐ ✅ TTL policies cho cooking history (optional) Chi phí target: $150-400/tháng (giảm dần khi DB tăng)\nGiai Đoạn Scale (Year 2+)#\r✅ Negotiate Enterprise Pricing với AWS ✅ Consider Savings Plans (20-40% discount) ✅ Optimize architecture dựa trên real data ✅ Automate cost monitoring \u0026amp; alerts Chi phí target: \u0026lt; $0.02/user/tháng\n"},{"id":8,"href":"/docs/dlc/10-architecture/","title":"10 - Architecture","section":"Docs","content":"Kiến Trúc Hệ Thống - Smart Cooking App#\rArchitecture Overview#\rHigh-Level Architecture#\rgraph TB\rsubgraph \u0026#34;Client Layer\u0026#34;\rWeb[Web App\u0026lt;br/\u0026gt;Next.js + React]\rMobile[Mobile Web\u0026lt;br/\u0026gt;Responsive]\rend\rsubgraph \u0026#34;CDN \u0026amp; Edge\u0026#34;\rCF[CloudFront\u0026lt;br/\u0026gt;Global CDN]\rAmplify[AWS Amplify\u0026lt;br/\u0026gt;Hosting + CI/CD]\rend\rsubgraph \u0026#34;API Layer\u0026#34;\rAPIGW[API Gateway\u0026lt;br/\u0026gt;REST API]\rAuth[Cognito Authorizer]\rWAF[AWS WAF\u0026lt;br/\u0026gt;Security Rules]\rend\rsubgraph \u0026#34;Compute Layer - Lambda Functions\u0026#34;\rL1[Auth Handler\u0026lt;br/\u0026gt;256MB, 10s]\rL2[Recipe CRUD\u0026lt;br/\u0026gt;512MB, 30s]\rL3[AI Suggestion\u0026lt;br/\u0026gt;1024MB, 60s]\rL4[User Profile\u0026lt;br/\u0026gt;256MB, 10s]\rL5[Social/Friends\u0026lt;br/\u0026gt;256MB, 10s]\rL6[Posts Handler\u0026lt;br/\u0026gt;512MB, 30s]\rL7[Notifications\u0026lt;br/\u0026gt;256MB, 10s]\rL8[Cooking History\u0026lt;br/\u0026gt;256MB, 10s]\rL9[Rating Handler\u0026lt;br/\u0026gt;256MB, 10s]\rL10[Ingredient Validator\u0026lt;br/\u0026gt;256MB, 10s]\rL11[Admin Ops\u0026lt;br/\u0026gt;512MB, 30s]\rend\rsubgraph \u0026#34;AI Layer\u0026#34;\rBedrock[Amazon Bedrock\u0026lt;br/\u0026gt;Claude 3 Haiku/Sonnet]\rend\rsubgraph \u0026#34;Data Layer\u0026#34;\rDDB[(DynamoDB\u0026lt;br/\u0026gt;Single Table Design)]\rS3[(S3\u0026lt;br/\u0026gt;Images \u0026amp; Assets)]\rend\rsubgraph \u0026#34;Monitoring\u0026#34;\rCW[CloudWatch\u0026lt;br/\u0026gt;Logs + Metrics]\rXRay[X-Ray\u0026lt;br/\u0026gt;Distributed Tracing]\rend\rWeb --\u0026gt; CF\rMobile --\u0026gt; CF\rCF --\u0026gt; Amplify\rCF --\u0026gt; APIGW\rAPIGW --\u0026gt; WAF\rWAF --\u0026gt; Auth\rAuth --\u0026gt; L1 \u0026amp; L2 \u0026amp; L3 \u0026amp; L4 \u0026amp; L5 \u0026amp; L6 \u0026amp; L7 \u0026amp; L8 \u0026amp; L9 \u0026amp; L10 \u0026amp; L11\rL3 --\u0026gt; Bedrock\rL1 \u0026amp; L2 \u0026amp; L3 \u0026amp; L4 \u0026amp; L5 \u0026amp; L6 \u0026amp; L7 \u0026amp; L8 \u0026amp; L9 \u0026amp; L10 \u0026amp; L11 --\u0026gt; DDB\rL2 \u0026amp; L6 --\u0026gt; S3\rL1 \u0026amp; L2 \u0026amp; L3 \u0026amp; L8 \u0026amp; L9 --\u0026gt; CW\rAPIGW --\u0026gt; XRay\rL3 --\u0026gt; XRayArchitecture Principles#\r1. Serverless First#\rNo server management: Focus on code, not infrastructure Auto-scaling: Handle 10 to 10,000 users automatically Pay-per-use: Cost scales with usage High availability: Built-in redundancy 2. Single Responsibility#\rEach Lambda function has ONE clear purpose Microservices architecture at function level Easy to test, debug, and maintain 3. Event-Driven#\rAsynchronous processing where possible DynamoDB Streams trigger notifications Loose coupling between components 4. Security by Default#\rAll data encrypted at rest and in transit Least privilege IAM roles WAF protection on all endpoints JWT-based authentication 5. Cost-Optimized#\rFlexible DB/AI mix to reduce AI costs CloudFront caching to reduce origin hits On-demand DynamoDB pricing Efficient Lambda memory allocation Architecture Patterns#\rPattern 1: API Request Flow#\rsequenceDiagram\rparticipant User\rparticipant CloudFront\rparticipant APIGateway\rparticipant Cognito\rparticipant Lambda\rparticipant DynamoDB\rparticipant CloudWatch\rUser-\u0026gt;\u0026gt;CloudFront: HTTPS Request\rCloudFront-\u0026gt;\u0026gt;APIGateway: Forward (if not cached)\rAPIGateway-\u0026gt;\u0026gt;APIGateway: Validate request schema\rAPIGateway-\u0026gt;\u0026gt;Cognito: Verify JWT token\rCognito--\u0026gt;\u0026gt;APIGateway: Token valid\rAPIGateway-\u0026gt;\u0026gt;Lambda: Invoke with context\rLambda-\u0026gt;\u0026gt;DynamoDB: Query/Write\rDynamoDB--\u0026gt;\u0026gt;Lambda: Response\rLambda-\u0026gt;\u0026gt;CloudWatch: Log metrics\rLambda--\u0026gt;\u0026gt;APIGateway: Return response\rAPIGateway--\u0026gt;\u0026gt;CloudFront: JSON response\rCloudFront--\u0026gt;\u0026gt;User: Cached response (if applicable)Pattern 2: AI Suggestion Flow (Flexible Mix)#\rsequenceDiagram\rparticipant User\rparticipant Lambda\rparticipant DynamoDB\rparticipant Bedrock\rparticipant CloudWatch\rUser-\u0026gt;\u0026gt;Lambda: POST /ai/suggest\u0026lt;br/\u0026gt;{ingredients, recipe_count: 3}\rNote over Lambda: Step 1: Validate Ingredients\rLambda-\u0026gt;\u0026gt;DynamoDB: Check master_ingredients\rDynamoDB--\u0026gt;\u0026gt;Lambda: Validation results\ralt Invalid ingredients found\rLambda-\u0026gt;\u0026gt;CloudWatch: Log invalid ingredients\rLambda-\u0026gt;\u0026gt;DynamoDB: Increment report count\rend\rNote over Lambda: Step 2: Query DB by categories\rLambda-\u0026gt;\u0026gt;DynamoDB: Query approved recipes\u0026lt;br/\u0026gt;(match + diverse categories)\rDynamoDB--\u0026gt;\u0026gt;Lambda: Found: 2 recipes\rNote over Lambda: Step 3: Calculate gap\u0026lt;br/\u0026gt;Requested: 3, DB: 2, Gap: 1\rNote over Lambda: Step 4: Generate AI recipes\rloop For gap recipes (1 recipe)\rLambda-\u0026gt;\u0026gt;Bedrock: Generate with context\rBedrock--\u0026gt;\u0026gt;Lambda: AI recipe\rend\rNote over Lambda: Step 5: Combine \u0026amp; return\rLambda-\u0026gt;\u0026gt;DynamoDB: Save suggestion history\rLambda--\u0026gt;\u0026gt;User: 2 DB + 1 AI = 3 recipesPattern 3: Auto-Approval Flow#\rsequenceDiagram\rparticipant User\rparticipant Lambda\rparticipant DynamoDB\rparticipant Notification\rUser-\u0026gt;\u0026gt;Lambda: Complete cooking\rLambda--\u0026gt;\u0026gt;User: Show rating form\rUser-\u0026gt;\u0026gt;Lambda: POST /recipes/{id}/rate\u0026lt;br/\u0026gt;{rating: 5, comment}\rLambda-\u0026gt;\u0026gt;DynamoDB: Save rating\rLambda-\u0026gt;\u0026gt;DynamoDB: Link to cooking history\rLambda-\u0026gt;\u0026gt;DynamoDB: Query all ratings\rNote over Lambda: Calculate average rating\rLambda-\u0026gt;\u0026gt;Lambda: avg_rating = 4.2\ralt avg_rating \u0026gt;= 4.0\rLambda-\u0026gt;\u0026gt;DynamoDB: Set is_approved = true\rLambda-\u0026gt;\u0026gt;DynamoDB: Set is_public = true\rLambda-\u0026gt;\u0026gt;Notification: Trigger success notification\rLambda--\u0026gt;\u0026gt;User: \u0026#34;Recipe approved!\u0026#34;\relse avg_rating \u0026lt; 4.0\rLambda--\u0026gt;\u0026gt;User: \u0026#34;Thanks for rating!\u0026#34;\rendPattern 4: Social Feed with Privacy#\rsequenceDiagram\rparticipant User\rparticipant Lambda\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;Lambda: GET /posts/feed\rLambda-\u0026gt;\u0026gt;DynamoDB: Get user\u0026#39;s friends list\rDynamoDB--\u0026gt;\u0026gt;Lambda: [friend_ids]\rloop For each friend\rLambda-\u0026gt;\u0026gt;DynamoDB: Get friend\u0026#39;s privacy settings\rLambda-\u0026gt;\u0026gt;DynamoDB: Get friend\u0026#39;s posts\rNote over Lambda: Filter by privacy rules\rend\rLambda-\u0026gt;\u0026gt;Lambda: Aggregate \u0026amp; sort by date\rLambda--\u0026gt;\u0026gt;User: Filtered feedComponent Architecture#\rFrontend Architecture (Node.js)#\rsmart-cooking-webapp/\r├── src/\r│ ├── routes/\r│ │ ├── index.js # Landing page\r│ │ ├── auth.js # Auth routes (login, register, verify)\r│ │ ├── dashboard.js # Dashboard \u0026amp; ingredients\r│ │ ├── recipes.js # Recipe routes (detail, search, suggestions)\r│ │ ├── cooking.js # Cooking history \u0026amp; sessions\r│ │ ├── social.js # Social feed, friends, profiles\r│ │ └── settings.js # Profile \u0026amp; privacy settings\r│ ├── views/\r│ │ ├── layouts/\r│ │ │ └── main.ejs # Main layout template\r│ │ ├── auth/\r│ │ │ ├── login.ejs # Login page\r│ │ │ ├── register.ejs # Registration\r│ │ │ └── verify.ejs # Email verification\r│ │ ├── dashboard/\r│ │ │ ├── index.ejs # User dashboard\r│ │ │ └── ingredients.ejs # Manage ingredients\r│ │ ├── recipes/\r│ │ │ ├── detail.ejs # Recipe detail\r│ │ │ ├── search.ejs # Recipe search\r│ │ │ └── suggestions.ejs # AI suggestions\r│ │ ├── cooking/\r│ │ │ ├── history.ejs # Cooking history\r│ │ │ └── session.ejs # Cooking session\r│ │ ├── social/\r│ │ │ ├── feed.ejs # Social feed\r│ │ │ ├── friends.ejs # Friends list\r│ │ │ └── profile.ejs # User profile\r│ │ └── settings/\r│ │ ├── profile.ejs # Profile settings\r│ │ └── privacy.ejs # Privacy settings\r│ ├── middleware/\r│ │ ├── auth.js # Authentication middleware\r│ │ ├── validation.js # Input validation\r│ │ └── errorHandler.js # Error handling\r│ ├── services/\r│ │ ├── apiClient.js # API client\r│ │ ├── authService.js # Auth helpers\r│ │ └── utils.js # Utilities\r│ └── public/\r│ ├── css/\r│ │ └── styles.css # Global styles\r│ ├── js/\r│ │ ├── auth.js # Auth frontend logic\r│ │ ├── recipes.js # Recipe frontend logic\r│ │ └── ingredients.js # Ingredients frontend logic\r│ └── images/\r├── app.js # Express app setup\r├── server.js # Server entry point\r└── package.json # DependenciesBackend Architecture (Lambda)#\rlambda-functions/\r├── shared/\r│ ├── dynamodb.js # DynamoDB helpers\r│ ├── auth.js # Auth utilities\r│ ├── errors.js # Error handlers\r│ └── validation.js # Input validation\r├── auth-handler/\r│ ├── index.js # Post-authentication\r│ └── package.json\r├── recipe-crud/\r│ ├── index.js # Recipe CRUD\r│ ├── s3-upload.js # Image upload\r│ └── package.json\r├── ai-suggestion/\r│ ├── index.js # Main handler\r│ ├── bedrock-client.js # Bedrock API\r│ ├── ingredient-validator.js # Validation\r│ ├── recipe-query.js # DB queries\r│ └── package.json\r├── user-profile/\r│ ├── index.js # Profile CRUD\r│ └── package.json\r├── cooking-history/\r│ ├── index.js # History CRUD\r│ └── package.json\r├── rating-handler/\r│ ├── index.js # Rating + approval\r│ ├── auto-approval.js # Approval logic\r│ └── package.json\r├── social-friends/\r│ ├── index.js # Friends CRUD\r│ ├── privacy-filter.js # Privacy logic\r│ └── package.json\r├── posts-handler/\r│ ├── index.js # Posts CRUD\r│ └── package.json\r├── notifications/\r│ ├── index.js # Notifications\r│ └── package.json\r├── ingredient-validator/\r│ ├── index.js # Validation\r│ ├── fuzzy-search.js # Fuzzy matching\r│ └── package.json\r└── admin-ops/\r├── index.js # Admin operations\r└── package.jsonSecurity Architecture#\rAuthentication Flow#\rsequenceDiagram\rparticipant User\rparticipant WebApp\rparticipant Cognito\rparticipant APIGateway\rparticipant Lambda\rUser-\u0026gt;\u0026gt;WebApp: Enter credentials\rWebApp-\u0026gt;\u0026gt;Cognito: InitiateAuth\rCognito--\u0026gt;\u0026gt;WebApp: JWT tokens (Access + Refresh)\rWebApp-\u0026gt;\u0026gt;WebApp: Store tokens (localStorage)\rNote over User,Lambda: Subsequent API calls\rUser-\u0026gt;\u0026gt;WebApp: Click \u0026#34;Get Suggestions\u0026#34;\rWebApp-\u0026gt;\u0026gt;APIGateway: GET /ai/suggest\u0026lt;br/\u0026gt;Authorization: Bearer {token}\rAPIGateway-\u0026gt;\u0026gt;Cognito: Validate token\rCognito--\u0026gt;\u0026gt;APIGateway: Token valid + user_id\rAPIGateway-\u0026gt;\u0026gt;Lambda: Invoke with context\rLambda--\u0026gt;\u0026gt;APIGateway: Response\rAPIGateway--\u0026gt;\u0026gt;WebApp: JSON responseAuthorization Layers#\rgraph TD\rA[API Request] --\u0026gt; B{WAF Check}\rB --\u0026gt;|Block| C[403 Forbidden]\rB --\u0026gt;|Pass| D{Rate Limit}\rD --\u0026gt;|Exceed| E[429 Too Many Requests]\rD --\u0026gt;|Pass| F{JWT Valid?}\rF --\u0026gt;|No| G[401 Unauthorized]\rF --\u0026gt;|Yes| H{Schema Valid?}\rH --\u0026gt;|No| I[400 Bad Request]\rH --\u0026gt;|Yes| J{User Active?}\rJ --\u0026gt;|No| K[403 Forbidden]\rJ --\u0026gt;|Yes| L{Has Permission?}\rL --\u0026gt;|No| M[403 Forbidden]\rL --\u0026gt;|Yes| N[Invoke Lambda]IAM Roles Structure#\rRoles: LambdaExecutionRole: Permissions: - logs:CreateLogGroup - logs:CreateLogStream - logs:PutLogEvents - xray:PutTraceSegments - xray:PutTelemetryRecords AISuggestionRole: Inherits: LambdaExecutionRole Additional: - dynamodb:Query - dynamodb:GetItem - dynamodb:PutItem - bedrock:InvokeModel RecipeCRUDRole: Inherits: LambdaExecutionRole Additional: - dynamodb:Query - dynamodb:GetItem - dynamodb:PutItem - dynamodb:UpdateItem - dynamodb:DeleteItem - s3:PutObject - s3:GetObject AdminRole: Inherits: RecipeCRUDRole Additional: - dynamodb:Scan - dynamodb:BatchWriteItem - cognito-idp:AdminDisableUserData Architecture#\rDynamoDB Single-Table Design#\rTable Name: smart-cooking-data\nAccess Patterns by Entity:\r1. Users\rPK: USER#\u0026lt;user_id\u0026gt;\rSK: PROFILE | PREFERENCES | PRIVACY\r2. Friendships\rPK: USER#\u0026lt;user_id\u0026gt;\rSK: FRIEND#\u0026lt;friend_id\u0026gt;\rGSI1: Reverse lookup\r3. Ingredients\rPK: USER#\u0026lt;user_id\u0026gt;\rSK: INGREDIENT#\u0026lt;name\u0026gt;\rPK: INGREDIENT#\u0026lt;id\u0026gt;\rSK: METADATA\rGSI1PK: CATEGORY#\u0026lt;category\u0026gt;\r4. Recipes\rPK: RECIPE#\u0026lt;recipe_id\u0026gt;\rSK: METADATA | INGREDIENT#\u0026lt;n\u0026gt;\rGSI1PK: USER#\u0026lt;user_id\u0026gt;\rGSI2PK: METHOD#\u0026lt;cooking_method\u0026gt; | CUISINE#\u0026lt;type\u0026gt;\r5. Cooking History\rPK: USER#\u0026lt;user_id\u0026gt;\rSK: COOKING#\u0026lt;timestamp\u0026gt;#\u0026lt;id\u0026gt;\rGSI1PK: USER#\u0026lt;user_id\u0026gt;#FAVORITE\r6. Ratings\rPK: RECIPE#\u0026lt;recipe_id\u0026gt;\rSK: RATING#\u0026lt;user_id\u0026gt;\r7. AI Suggestions\rPK: USER#\u0026lt;user_id\u0026gt;\rSK: SUGGESTION#\u0026lt;timestamp\u0026gt;\r8. Posts \u0026amp; Comments\rPK: POST#\u0026lt;post_id\u0026gt;\rSK: METADATA | COMMENT#\u0026lt;timestamp\u0026gt;\rGSI1PK: USER#\u0026lt;user_id\u0026gt;\r9. Notifications\rPK: USER#\u0026lt;user_id\u0026gt;\rSK: NOTIFICATION#\u0026lt;timestamp\u0026gt;\rGSI1PK: USER#\u0026lt;user_id\u0026gt;#UNREADIndexes Strategy#\rPrimary Index:\r- PK: Partition Key\r- SK: Sort Key\r- Purpose: Main access pattern\rGSI1 (User-Based Queries):\r- GSI1PK: Entity owner\r- GSI1SK: Timestamp or secondary sort\r- Purpose: User\u0026#39;s data, reverse lookups\rGSI2 (Discovery \u0026amp; Search):\r- GSI2PK: Category/Type\r- GSI2SK: Timestamp or rating\r- Purpose: Recipe search, browse by category\rGSI3 (Social Feed):\r- GSI3PK: Feed type\r- GSI3SK: Timestamp\r- Purpose: Newsfeed, public postsNetwork Architecture#\rVPC Configuration (Optional for MVP)#\rMVP: No VPC (all services are public AWS services) Future: VPC for RDS if needed Rationale: Serverless services don\u0026rsquo;t require VPC CDN Strategy#\rCloudFront Distribution:\rOrigins:\r- S3: Static assets (images, CSS, JS)\r- API Gateway: API endpoints\r- Amplify: Web app hosting\rBehaviors:\r/api/*:\r- TTL: 0 (no caching for API)\r- Forward headers: Authorization\r/assets/*:\r- TTL: 86400 (24 hours)\r- Compress: Yes\r/*:\r- TTL: 3600 (1 hour)\r- Compress: Yes\rGeo-Restrictions: None\rHTTPS: Required\rHTTP/2: EnabledIntegration Architecture#\rExternal Integrations (MVP)#\rAmazon Cognito\nPurpose: User authentication Integration: AWS SDK Fallback: N/A (critical service) Amazon Bedrock\nPurpose: AI recipe generation Integration: AWS SDK v3 Fallback: Return DB recipes only Timeout: 60 seconds Retry: 2 attempts with exponential backoff AWS Services (Internal)\nDynamoDB: Data persistence S3: File storage CloudWatch: Logging \u0026amp; monitoring X-Ray: Distributed tracing Scalability Architecture#\rHorizontal Scaling#\rLambda: Auto-scales to 1,000 concurrent (default) DynamoDB: On-demand mode (auto-scales) S3: Unlimited scaling CloudFront: Global edge network Vertical Scaling#\rLambda Memory: 256MB → 1024MB DynamoDB: On-demand → Provisioned Reserved Concurrency: Add for critical functions Caching Strategy#\rLayer 1: CloudFront (Edge)\r- Static assets: 24 hours\r- Web pages: 1 hour\rLayer 2: API Gateway (Optional)\r- Not used in MVP\r- Future: Cache GET requests\rLayer 3: Lambda (In-Memory)\r- Master ingredients: Cache in Lambda\r- User context: Cache for request duration\rLayer 4: DynamoDB\r- DAX (DynamoDB Accelerator): Post-MVP\r- Reduces read latency to microsecondsObservability Architecture#\rLogging Strategy#\rCloudWatch Log Groups:\r/aws/lambda/auth-handler\r/aws/lambda/recipe-crud\r/aws/lambda/ai-suggestion # Most important\r/aws/lambda/cooking-history\r/aws/lambda/rating-handler\r/aws/lambda/* # Others\r/aws/apigateway/smart-cooking-api\rLog Format (JSON):\r{\r\u0026#34;timestamp\u0026#34;: \u0026#34;ISO 8601\u0026#34;,\r\u0026#34;level\u0026#34;: \u0026#34;INFO|WARN|ERROR\u0026#34;,\r\u0026#34;request_id\u0026#34;: \u0026#34;UUID\u0026#34;,\r\u0026#34;user_id\u0026#34;: \u0026#34;UUID\u0026#34;,\r\u0026#34;function\u0026#34;: \u0026#34;function_name\u0026#34;,\r\u0026#34;message\u0026#34;: \u0026#34;...\u0026#34;,\r\u0026#34;metadata\u0026#34;: {...}\r}\rRetention: 7 days (cost optimization)Metrics \u0026amp; Alarms#\rCritical Alarms: - Lambda errors \u0026gt; 1% - API Gateway 5xx \u0026gt; 10 requests/5min - DynamoDB throttled requests \u0026gt; 0 - AI generation timeout \u0026gt; 10% - Monthly cost \u0026gt; $170 Warning Alarms: - Lambda duration \u0026gt; 5s (p95) - API latency \u0026gt; 500ms (p95) - Invalid ingredients \u0026gt; 10/hour - Monthly cost \u0026gt; $140 Metrics to Track: - API request count - Lambda invocations - DynamoDB read/write capacity - Bedrock API calls - S3 storage size - Cost per user - DB vs AI mix ratioDistributed Tracing#\rX-Ray Configuration:\rServices:\r- API Gateway (100% sampling)\r- Lambda AI Suggestion (100%)\r- Lambda Recipe CRUD (10% sampling)\r- DynamoDB (auto-instrumented)\r- Bedrock API (auto-instrumented)\rTrace Segments:\r1. API Gateway → Lambda\r2. Lambda → DynamoDB\r3. Lambda → Bedrock\r4. Lambda → S3\rAnnotations:\r- user_id\r- recipe_count\r- db_recipes_count\r- ai_recipes_countRelated Documents#\r00 - Overview 11 - Database 12 - API Spec 13 - Security 14 - AI Agent "},{"id":9,"href":"/docs/dlc/11-database/","title":"11 - Database Design","section":"Docs","content":"Thiết Kế Database - Smart Cooking App#\rDatabase Strategy#\rTechnology Choice: Amazon DynamoDB#\rWhy DynamoDB over RDS/PostgreSQL?\nCriteria DynamoDB RDS PostgreSQL Cost (MVP) $40-55/month $30-50/month (t3.micro) Cost (Scale) Scales with usage Fixed + storage growth Scaling Auto-scaling, zero config Manual scaling, downtime Maintenance Zero maintenance Patching, backups, monitoring Latency Single-digit ms 10-50ms Lambda Integration Native, optimized Connection pooling needed Serverless True serverless Always running Learning Curve High (single-table) Low (SQL familiar) Decision: DynamoDB for MVP\nServerless architecture alignment Better cost structure for variable load Lower operational overhead for solo developer Single-Table Design#\rTable Name: smart-cooking-data#\rDesign Philosophy:\nOne table to rule them all (single-table design) Composite primary key (PK + SK) GSI (Global Secondary Indexes) for alternate access patterns Denormalization where needed for performance Primary Key Structure#\rPK (Partition Key): Entity type + ID\rSK (Sort Key): Sub-entity type + timestamp/ID\rExample:\rUSER#123 | PROFILE\rUSER#123 | PREFERENCES\rRECIPE#456 | METADATA\rRECIPE#456 | INGREDIENT#001Entity Designs#\r1. Users#\rUser Profile#\r{ \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PROFILE\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;USER_PROFILE\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;cookmaster\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;date_of_birth\u0026#34;: \u0026#34;1990-01-15\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;Vietnam\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://s3.../avatar.jpg\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;is_active\u0026#34;: true, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-15T10:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-15T10:00:00Z\u0026#34;, \u0026#34;last_login\u0026#34;: \u0026#34;2025-01-20T15:30:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;ROLE#user\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;USER#2025-01-15T10:00:00Z\u0026#34; }Access Patterns:\nGet user by ID: PK=USER#\u0026lt;id\u0026gt;, SK=PROFILE List all admins: GSI1PK=ROLE#admin User Preferences#\r{ \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PREFERENCES\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;USER_PREFERENCES\u0026#34;, \u0026#34;dietary_restrictions\u0026#34;: [\u0026#34;vegetarian\u0026#34;], \u0026#34;allergies\u0026#34;: [\u0026#34;shrimp\u0026#34;, \u0026#34;crab\u0026#34;], \u0026#34;favorite_cuisines\u0026#34;: [\u0026#34;Vietnamese\u0026#34;, \u0026#34;Italian\u0026#34;], \u0026#34;preferred_cooking_methods\u0026#34;: [\u0026#34;stir-fry\u0026#34;, \u0026#34;steam\u0026#34;, \u0026#34;soup\u0026#34;], \u0026#34;preferred_recipe_count\u0026#34;: 3, \u0026#34;spice_level\u0026#34;: \u0026#34;medium\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-15T10:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-20T11:00:00Z\u0026#34; }Access Patterns:\nGet preferences: PK=USER#\u0026lt;id\u0026gt;, SK=PREFERENCES Privacy Settings#\r{ \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;PRIVACY\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;PRIVACY_SETTINGS\u0026#34;, \u0026#34;profile_visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;email_visibility\u0026#34;: \u0026#34;private\u0026#34;, \u0026#34;date_of_birth_visibility\u0026#34;: \u0026#34;friends\u0026#34;, \u0026#34;gender_visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;country_visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;recipes_visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;ingredients_visibility\u0026#34;: \u0026#34;friends\u0026#34;, \u0026#34;preferences_visibility\u0026#34;: \u0026#34;friends\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-15T10:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-15T10:00:00Z\u0026#34; }Access Patterns:\nGet privacy settings: PK=USER#\u0026lt;id\u0026gt;, SK=PRIVACY 2. User Ingredients#\r{ \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;INGREDIENT#\u0026lt;normalized_name\u0026gt;\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;USER_INGREDIENT\u0026#34;, \u0026#34;ingredient_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;ingredient_name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;thit ga\u0026#34;, \u0026#34;added_at\u0026#34;: \u0026#34;2025-01-20T09:00:00Z\u0026#34; }Access Patterns:\nList user ingredients: PK=USER#\u0026lt;id\u0026gt;, SK begins_with INGREDIENT# Check specific ingredient: PK=USER#\u0026lt;id\u0026gt;, SK=INGREDIENT#\u0026lt;name\u0026gt; 3. Master Ingredients#\r{ \u0026#34;PK\u0026#34;: \u0026#34;INGREDIENT#\u0026lt;ingredient_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;METADATA\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;MASTER_INGREDIENT\u0026#34;, \u0026#34;ingredient_id\u0026#34;: \u0026#34;uuid-789\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;thit ga\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;meat\u0026#34;, \u0026#34;aliases\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;chicken\u0026#34;, \u0026#34;thịt gà ta\u0026#34;], \u0026#34;is_active\u0026#34;: true, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-01T00:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-01T00:00:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;CATEGORY#meat\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;INGREDIENT#thit ga\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;INGREDIENT#SEARCH\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;NAME#thit ga\u0026#34; }Access Patterns:\nGet ingredient by ID: PK=INGREDIENT#\u0026lt;id\u0026gt;, SK=METADATA Search by normalized name: GSI2PK=INGREDIENT#SEARCH, GSI2SK begins_with NAME#\u0026lt;term\u0026gt; List by category: GSI1PK=CATEGORY#\u0026lt;category\u0026gt; 4. Recipes#\rRecipe Metadata#\r{ \u0026#34;PK\u0026#34;: \u0026#34;RECIPE#\u0026lt;recipe_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;METADATA\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;RECIPE\u0026#34;, \u0026#34;recipe_id\u0026#34;: \u0026#34;uuid-101\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Gà xào sả ớt\u0026#34;, \u0026#34;normalized_title\u0026#34;: \u0026#34;ga xao sa ot\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Món gà xào thơm ngon...\u0026#34;, \u0026#34;cuisine_type\u0026#34;: \u0026#34;Vietnamese\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;stir-fry\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;prep_time_minutes\u0026#34;: 15, \u0026#34;cook_time_minutes\u0026#34;: 20, \u0026#34;servings\u0026#34;: 2, \u0026#34;calories_per_serving\u0026#34;: 350, \u0026#34;instructions\u0026#34;: [ { \u0026#34;step_number\u0026#34;: 1, \u0026#34;description\u0026#34;: \u0026#34;Ướp gà với sả ớt\u0026#34;, \u0026#34;duration\u0026#34;: \u0026#34;10 phút\u0026#34; } ], \u0026#34;is_public\u0026#34;: true, \u0026#34;is_ai_generated\u0026#34;: true, \u0026#34;is_approved\u0026#34;: true, \u0026#34;approval_type\u0026#34;: \u0026#34;auto_rating\u0026#34;, \u0026#34;average_rating\u0026#34;: 4.5, \u0026#34;rating_count\u0026#34;: 12, \u0026#34;ai_cache_hit_count\u0026#34;: 0, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T10:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-22T14:00:00Z\u0026#34;, \u0026#34;approved_at\u0026#34;: \u0026#34;2025-01-22T14:00:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#uuid-123\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;RECIPE#2025-01-20T10:00:00Z\u0026#34;, \u0026#34;GSI2PK\u0026#34;: \u0026#34;METHOD#stir-fry\u0026#34;, \u0026#34;GSI2SK\u0026#34;: \u0026#34;RECIPE#4.5#2025-01-20T10:00:00Z\u0026#34; }Access Patterns:\nGet recipe: PK=RECIPE#\u0026lt;id\u0026gt;, SK=METADATA List user\u0026rsquo;s recipes: GSI1PK=USER#\u0026lt;user_id\u0026gt;, GSI1SK begins_with RECIPE# Search by cooking method: GSI2PK=METHOD#\u0026lt;method\u0026gt;, Sort by rating DESC Browse approved recipes: GSI2PK=APPROVED, GSI2SK begins_with RECIPE# Recipe Ingredients#\r{ \u0026#34;PK\u0026#34;: \u0026#34;RECIPE#\u0026lt;recipe_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;INGREDIENT#001\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;RECIPE_INGREDIENT\u0026#34;, \u0026#34;ingredient_name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;300g\u0026#34;, \u0026#34;unit\u0026#34;: \u0026#34;gram\u0026#34;, \u0026#34;is_optional\u0026#34;: false }Access Patterns:\nList recipe ingredients: PK=RECIPE#\u0026lt;id\u0026gt;, SK begins_with INGREDIENT# 5. Cooking History#\r{ \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;COOKING#2025-01-20T15:30:00Z#\u0026lt;history_id\u0026gt;\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;COOKING_HISTORY\u0026#34;, \u0026#34;history_id\u0026#34;: \u0026#34;uuid-202\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;recipe_id\u0026#34;: \u0026#34;uuid-101\u0026#34;, \u0026#34;suggestion_id\u0026#34;: \u0026#34;uuid-303\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;personal_rating\u0026#34;: 5, \u0026#34;personal_notes\u0026#34;: \u0026#34;Rất ngon, sẽ nấu lại!\u0026#34;, \u0026#34;is_favorite\u0026#34;: true, \u0026#34;cook_date\u0026#34;: \u0026#34;2025-01-20T18:00:00Z\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T15:30:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-20T18:05:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#uuid-123#FAVORITE\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;COOKING#2025-01-20T18:00:00Z\u0026#34; }Access Patterns:\nList cooking history: PK=USER#\u0026lt;id\u0026gt;, SK begins_with COOKING#, Sort DESC List favorites only: GSI1PK=USER#\u0026lt;id\u0026gt;#FAVORITE, Sort by cook_date DESC 6. Recipe Ratings#\r{ \u0026#34;PK\u0026#34;: \u0026#34;RECIPE#\u0026lt;recipe_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;RATING#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;RECIPE_RATING\u0026#34;, \u0026#34;rating_id\u0026#34;: \u0026#34;uuid-404\u0026#34;, \u0026#34;recipe_id\u0026#34;: \u0026#34;uuid-101\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;history_id\u0026#34;: \u0026#34;uuid-202\u0026#34;, \u0026#34;rating\u0026#34;: 5, \u0026#34;comment\u0026#34;: \u0026#34;Món này rất ngon!\u0026#34;, \u0026#34;is_verified_cook\u0026#34;: true, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T18:05:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-20T18:05:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#uuid-123\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;RATING#2025-01-20T18:05:00Z\u0026#34; }Access Patterns:\nGet all ratings for recipe: PK=RECIPE#\u0026lt;id\u0026gt;, SK begins_with RATING# Get user\u0026rsquo;s ratings: GSI1PK=USER#\u0026lt;id\u0026gt;, SK begins_with RATING# Check if user rated: PK=RECIPE#\u0026lt;id\u0026gt;, SK=RATING#\u0026lt;user_id\u0026gt; 7. AI Suggestions#\r{ \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;SUGGESTION#2025-01-20T10:00:00Z\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;AI_SUGGESTION\u0026#34;, \u0026#34;suggestion_id\u0026#34;: \u0026#34;uuid-303\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;recipe_ids\u0026#34;: [\u0026#34;uuid-101\u0026#34;, \u0026#34;uuid-102\u0026#34;, \u0026#34;uuid-103\u0026#34;], \u0026#34;cache_ids\u0026#34;: [], \u0026#34;prompt_text\u0026#34;: \u0026#34;Gợi ý món với gà, cà chua, hành\u0026#34;, \u0026#34;ingredients_used\u0026#34;: [\u0026#34;thịt gà\u0026#34;, \u0026#34;cà chua\u0026#34;, \u0026#34;hành tây\u0026#34;], \u0026#34;requested_recipe_count\u0026#34;: 3, \u0026#34;recipes_from_db\u0026#34;: 2, \u0026#34;recipes_from_ai\u0026#34;: 1, \u0026#34;invalid_ingredients\u0026#34;: [], \u0026#34;ai_response\u0026#34;: {...}, \u0026#34;was_from_cache\u0026#34;: false, \u0026#34;was_accepted\u0026#34;: true, \u0026#34;feedback_rating\u0026#34;: 5, \u0026#34;feedback_comment\u0026#34;: \u0026#34;Gợi ý rất hay!\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T10:00:00Z\u0026#34; }Access Patterns:\nList user\u0026rsquo;s suggestions: PK=USER#\u0026lt;id\u0026gt;, SK begins_with SUGGESTION#, Sort DESC Get specific suggestion: PK=USER#\u0026lt;id\u0026gt;, SK=SUGGESTION#\u0026lt;timestamp\u0026gt; 8. Friendships#\r{ \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;FRIEND#\u0026lt;friend_id\u0026gt;\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;FRIENDSHIP\u0026#34;, \u0026#34;friendship_id\u0026#34;: \u0026#34;uuid-505\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;friend_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;accepted\u0026#34;, \u0026#34;requested_at\u0026#34;: \u0026#34;2025-01-18T10:00:00Z\u0026#34;, \u0026#34;responded_at\u0026#34;: \u0026#34;2025-01-18T14:00:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#uuid-456\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;FRIEND#uuid-123\u0026#34; }Access Patterns:\nList user\u0026rsquo;s friends: PK=USER#\u0026lt;id\u0026gt;, SK begins_with FRIEND#, Filter status=accepted Reverse lookup (who friended me): GSI1PK=USER#\u0026lt;id\u0026gt;, SK begins_with FRIEND# Check friendship status: PK=USER#\u0026lt;id\u0026gt;, SK=FRIEND#\u0026lt;friend_id\u0026gt; 9. Posts#\r{ \u0026#34;PK\u0026#34;: \u0026#34;POST#\u0026lt;post_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;METADATA\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;POST\u0026#34;, \u0026#34;post_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;recipe_id\u0026#34;: \u0026#34;uuid-101\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Vừa nấu món này, rất ngon!\u0026#34;, \u0026#34;images\u0026#34;: [\u0026#34;https://s3.../post1.jpg\u0026#34;], \u0026#34;is_public\u0026#34;: true, \u0026#34;likes_count\u0026#34;: 15, \u0026#34;comments_count\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T20:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-20T20:00:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#uuid-123\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;POST#2025-01-20T20:00:00Z\u0026#34;, \u0026#34;GSI3PK\u0026#34;: \u0026#34;FEED#PUBLIC\u0026#34;, \u0026#34;GSI3SK\u0026#34;: \u0026#34;POST#2025-01-20T20:00:00Z\u0026#34; }Access Patterns:\nGet post: PK=POST#\u0026lt;id\u0026gt;, SK=METADATA List user\u0026rsquo;s posts: GSI1PK=USER#\u0026lt;id\u0026gt;, SK begins_with POST# Public feed: GSI3PK=FEED#PUBLIC, Sort DESC 10. Comments#\r{ \u0026#34;PK\u0026#34;: \u0026#34;POST#\u0026lt;post_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;COMMENT#2025-01-20T21:00:00Z#\u0026lt;comment_id\u0026gt;\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;COMMENT\u0026#34;, \u0026#34;comment_id\u0026#34;: \u0026#34;uuid-707\u0026#34;, \u0026#34;post_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;parent_comment_id\u0026#34;: null, \u0026#34;content\u0026#34;: \u0026#34;Trông rất ngon!\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T21:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-20T21:00:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#uuid-456\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;COMMENT#2025-01-20T21:00:00Z\u0026#34; }Access Patterns:\nList post comments: PK=POST#\u0026lt;id\u0026gt;, SK begins_with COMMENT#, Sort ASC List user\u0026rsquo;s comments: GSI1PK=USER#\u0026lt;id\u0026gt;, SK begins_with COMMENT# 11. Reactions#\r{ \u0026#34;PK\u0026#34;: \u0026#34;POST#\u0026lt;post_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;REACTION#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;REACTION\u0026#34;, \u0026#34;reaction_id\u0026#34;: \u0026#34;uuid-808\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;target_type\u0026#34;: \u0026#34;post\u0026#34;, \u0026#34;target_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;reaction_type\u0026#34;: \u0026#34;like\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T21:30:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#uuid-456\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;REACTION#2025-01-20T21:30:00Z\u0026#34; }Access Patterns:\nList post reactions: PK=POST#\u0026lt;id\u0026gt;, SK begins_with REACTION# Check user\u0026rsquo;s reaction: PK=POST#\u0026lt;id\u0026gt;, SK=REACTION#\u0026lt;user_id\u0026gt; List user\u0026rsquo;s reactions: GSI1PK=USER#\u0026lt;id\u0026gt;, SK begins_with REACTION# 12. Notifications#\r{ \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;NOTIFICATION#2025-01-20T21:00:00Z#\u0026lt;notification_id\u0026gt;\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;NOTIFICATION\u0026#34;, \u0026#34;notification_id\u0026#34;: \u0026#34;uuid-909\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;actor_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;comment\u0026#34;, \u0026#34;target_type\u0026#34;: \u0026#34;post\u0026#34;, \u0026#34;target_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;John commented on your post\u0026#34;, \u0026#34;is_read\u0026#34;: false, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T21:00:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#uuid-123#UNREAD\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;NOTIFICATION#2025-01-20T21:00:00Z\u0026#34; }Access Patterns:\nList notifications: PK=USER#\u0026lt;id\u0026gt;, SK begins_with NOTIFICATION#, Sort DESC List unread only: GSI1PK=USER#\u0026lt;id\u0026gt;#UNREAD, Sort DESC 13. Invalid Ingredient Reports (Optional)#\r{ \u0026#34;PK\u0026#34;: \u0026#34;INVALID_INGREDIENT#\u0026lt;normalized_name\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;entity_type\u0026#34;: \u0026#34;INVALID_INGREDIENT_REPORT\u0026#34;, \u0026#34;report_id\u0026#34;: \u0026#34;uuid-1010\u0026#34;, \u0026#34;ingredient_name\u0026#34;: \u0026#34;abc xyz\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;abc xyz\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;user_report_count\u0026#34;: 1, \u0026#34;total_reports\u0026#34;: 5, \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;admin_notes\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T10:00:00Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2025-01-20T10:00:00Z\u0026#34;, \u0026#34;GSI1PK\u0026#34;: \u0026#34;REPORTS#PENDING\u0026#34;, \u0026#34;GSI1SK\u0026#34;: \u0026#34;TOTAL#5#2025-01-20T10:00:00Z\u0026#34; }Access Patterns:\nCheck if ingredient reported: PK=INVALID_INGREDIENT#\u0026lt;name\u0026gt;, SK=USER#\u0026lt;user_id\u0026gt; List pending reports (admin): GSI1PK=REPORTS#PENDING, Sort by total DESC Global Secondary Indexes (GSI)#\rGSI1: User-Based Queries#\rGSI1PK: Entity owner or type\rGSI1SK: Timestamp or secondary sort key\rUse Cases:\r- ROLE#admin → List all admins\r- USER#\u0026lt;id\u0026gt; → User\u0026#39;s recipes, ratings, comments\r- USER#\u0026lt;id\u0026gt;#FAVORITE → User\u0026#39;s favorite recipes\r- USER#\u0026lt;id\u0026gt;#UNREAD → Unread notifications\r- CATEGORY#\u0026lt;category\u0026gt; → Ingredients by categoryProjection: ALL (include all attributes)\nGSI2: Search \u0026amp; Discovery#\rGSI2PK: Category or filter type\rGSI2SK: Composite sort key (rating + timestamp)\rUse Cases:\r- METHOD#stir-fry → Recipes by cooking method\r- CUISINE#Vietnamese → Recipes by cuisine\r- MEALTYPE#main → Recipes by meal type\r- INGREDIENT#SEARCH → Ingredient fuzzy search\r- APPROVED → Browse approved recipesProjection: ALL\nGSI3: Social Feed#\rGSI3PK: Feed type\rGSI3SK: Timestamp\rUse Cases:\r- FEED#PUBLIC → Public posts (explore feed)\r- FEED#\u0026lt;user_id\u0026gt; → User\u0026#39;s personalized feedProjection: ALL\nCapacity Planning#\rRead/Write Patterns (MVP - 1,000 users)#\rDaily Operations (estimate):\rUsers:\r- Login: 500 reads/day\r- Profile updates: 100 writes/day\rIngredients:\r- List ingredients: 1,000 reads/day\r- Add/remove: 200 writes/day\rAI Suggestions:\r- Requests: 1,000/day (peak feature)\r- DB queries: 4,000 reads/day\r- Save suggestions: 1,000 writes/day\rRecipes:\r- View details: 3,000 reads/day\r- Create (AI): 200 writes/day\rCooking History:\r- Start/complete: 300 writes/day\r- View history: 500 reads/day\rRatings:\r- Submit rating: 150 writes/day\r- Query ratings: 300 reads/day\rSocial (Phase 2):\r- Posts: 200 writes/day\r- Comments: 500 writes/day\r- Reactions: 1,000 writes/day\r- Feed reads: 2,000 reads/day\rTotal Daily:\rReads: ~12,000/day = ~139/hour = ~0.04/second\rWrites: ~3,250/day = ~38/hour = ~0.01/secondPricing Calculation (On-Demand)#\rDynamoDB On-Demand Pricing:\rWrites: $1.25 per million write request units\rReads: $0.25 per million read request units\rMonthly (30 days):\rReads: 12,000 × 30 = 360,000/month\rCost: 360,000 / 1,000,000 × $0.25 = $0.09\rWrites: 3,250 × 30 = 97,500/month\rCost: 97,500 / 1,000,000 × $1.25 = $0.12\rStorage: ~200MB = ~$0.05\rGSI (3 indexes): ~$0.20\rBackups (PITR): ~$20\rTotal: ~$20-25/month (MVP)\rAs scale grows (10,000 users):\rReads: 3.6M/month = $0.90\rWrites: 975K/month = $1.22\rStorage: 2GB = $0.50\rGSI: $2.00\rBackups: $40\rTotal: ~$45-50/monthData Lifecycle Management#\rTTL (Time-To-Live) Policies#\r// AI Suggestions - Keep 90 days { \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;SUGGESTION#\u0026lt;timestamp\u0026gt;\u0026#34;, \u0026#34;ttl\u0026#34;: Math.floor(Date.now() / 1000) + (90 * 24 * 60 * 60) } // Notifications - Keep 30 days { \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;NOTIFICATION#\u0026lt;timestamp\u0026gt;\u0026#34;, \u0026#34;ttl\u0026#34;: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60) } // Old cooking history - Archive after 1 year (optional) { \u0026#34;PK\u0026#34;: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;COOKING#\u0026lt;timestamp\u0026gt;\u0026#34;, \u0026#34;ttl\u0026#34;: Math.floor(Date.now() / 1000) + (365 * 24 * 60 * 60) }Backup Strategy#\rDynamoDB Backup: Method: Point-in-Time Recovery (PITR) Retention: 35 days Recovery: Any point in last 35 days Cost: ~$20-40/month Manual Backups: Frequency: Weekly (before major updates) Retention: 3 months Tool: AWS Backup serviceQuery Optimization#\rBest Practices#\rUse Composite Sort Keys\nBad: SK = \u0026#34;RECIPE\u0026#34;\rGood: SK = \u0026#34;RECIPE#2025-01-20T10:00:00Z\u0026#34;\rWhy: Enables range queries and sorting Denormalize for Read Performance\n// Store user name in post (avoid extra query) { \u0026#34;PK\u0026#34;: \u0026#34;POST#606\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;METADATA\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;user_name\u0026#34;: \u0026#34;John Doe\u0026#34;, // Denormalized \u0026#34;user_avatar\u0026#34;: \u0026#34;https://...\u0026#34; // Denormalized } Use GSI Sparse Indexes\n// Only index favorites (save cost) { \u0026#34;PK\u0026#34;: \u0026#34;USER#123\u0026#34;, \u0026#34;SK\u0026#34;: \u0026#34;COOKING#...\u0026#34;, \u0026#34;is_favorite\u0026#34;: true, \u0026#34;GSI1PK\u0026#34;: \u0026#34;USER#123#FAVORITE\u0026#34; // Only if favorite } Batch Operations\n// Get multiple recipes at once const params = { RequestItems: { \u0026#39;smart-cooking-data\u0026#39;: { Keys: [ { PK: \u0026#39;RECIPE#101\u0026#39;, SK: \u0026#39;METADATA\u0026#39; }, { PK: \u0026#39;RECIPE#102\u0026#39;, SK: \u0026#39;METADATA\u0026#39; }, { PK: \u0026#39;RECIPE#103\u0026#39;, SK: \u0026#39;METADATA\u0026#39; } ] } } }; await docClient.batchGet(params); Anti-Patterns to Avoid#\rScan Operations: Never use Scan in production Hot Partitions: Avoid using user_id as PK for high-traffic items Large Items: Keep items \u0026lt; 100KB (max 400KB) Unbounded Queries: Always use pagination\nRelated Documents#\r10 - Architecture 12 - API Spec 20 - Backend 31 - Scaling "},{"id":10,"href":"/docs/dlc/12-api-spec/","title":"12 - API Specification","section":"Docs","content":"API Specification - Smart Cooking App#\rAPI Overview#\rBase Configuration#\rAPI Name: Smart Cooking API Base URL: https://api.smartcooking.app Version: v1 Protocol: HTTPS only (TLS 1.2+) Format: JSON Authentication: JWT Bearer Token (Cognito)API Gateway Configuration#\rType: REST API Stage: prod Endpoint Type: Regional CORS: Enabled - Origins: [\u0026#39;https://smartcooking.app\u0026#39;, \u0026#39;http://localhost:3000\u0026#39;] - Methods: [\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;, \u0026#39;PUT\u0026#39;, \u0026#39;DELETE\u0026#39;, \u0026#39;OPTIONS\u0026#39;] - Headers: [\u0026#39;Content-Type\u0026#39;, \u0026#39;Authorization\u0026#39;, \u0026#39;X-Request-ID\u0026#39;] - Credentials: true Throttling: Rate Limit: 1000 requests/second Burst Limit: 2000 requests Timeout: 29 seconds (API Gateway max)Authentication#\rAuthentication Flow#\rPOST /auth/login Content-Type: application/json { \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;SecurePass123\u0026#34; } Response 200 OK: { \u0026#34;access_token\u0026#34;: \u0026#34;eyJraWQiOiJ...\u0026#34;, \u0026#34;refresh_token\u0026#34;: \u0026#34;eyJjdHkiOiJ...\u0026#34;, \u0026#34;id_token\u0026#34;: \u0026#34;eyJraWQiOiJ...\u0026#34;, \u0026#34;expires_in\u0026#34;: 3600, \u0026#34;token_type\u0026#34;: \u0026#34;Bearer\u0026#34; }Authenticated Requests#\rGET /api/v1/user/profile Authorization: Bearer eyJraWQiOiJ... Content-Type: application/jsonAPI Endpoints#\r1. Authentication \u0026amp; User Management#\rPOST /auth/register#\rDescription: Register new user\nRequest:\n{ \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;SecurePass123\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;cookmaster\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;John Doe\u0026#34; }Response 201 Created:\n{ \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;cookmaster\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Verification email sent\u0026#34; }Errors:\n400: Invalid email format, weak password 409: Email or username already exists POST /auth/login#\rDescription: Login user\nRequest:\n{ \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;SecurePass123\u0026#34; }Response 200 OK:\n{ \u0026#34;access_token\u0026#34;: \u0026#34;eyJraWQiOiJ...\u0026#34;, \u0026#34;refresh_token\u0026#34;: \u0026#34;eyJjdHkiOiJ...\u0026#34;, \u0026#34;expires_in\u0026#34;: 3600, \u0026#34;user\u0026#34;: { \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;cookmaster\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34; } }Errors:\n401: Invalid credentials 403: Account not verified GET /user/profile#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;cookmaster\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;date_of_birth\u0026#34;: \u0026#34;1990-01-15\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;Vietnam\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://s3.../avatar.jpg\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-15T10:00:00Z\u0026#34; } PUT /user/profile#\rAuth: Required\nRequest:\n{ \u0026#34;full_name\u0026#34;: \u0026#34;John Smith\u0026#34;, \u0026#34;date_of_birth\u0026#34;: \u0026#34;1990-01-15\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;Vietnam\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://s3.../new-avatar.jpg\u0026#34; }Response 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Profile updated successfully\u0026#34;, \u0026#34;user\u0026#34;: { /* updated user object */ } } PUT /user/preferences#\rAuth: Required\nRequest:\n{ \u0026#34;dietary_restrictions\u0026#34;: [\u0026#34;vegetarian\u0026#34;], \u0026#34;allergies\u0026#34;: [\u0026#34;shrimp\u0026#34;, \u0026#34;crab\u0026#34;], \u0026#34;favorite_cuisines\u0026#34;: [\u0026#34;Vietnamese\u0026#34;, \u0026#34;Italian\u0026#34;], \u0026#34;preferred_cooking_methods\u0026#34;: [\u0026#34;stir-fry\u0026#34;, \u0026#34;steam\u0026#34;, \u0026#34;soup\u0026#34;], \u0026#34;preferred_recipe_count\u0026#34;: 3, \u0026#34;spice_level\u0026#34;: \u0026#34;medium\u0026#34; }Response 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Preferences updated\u0026#34;, \u0026#34;preferences\u0026#34;: { /* updated preferences */ } } 2. Ingredient Management#\rGET /user/ingredients#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;ingredients\u0026#34;: [ { \u0026#34;ingredient_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;ingredient_name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;thit ga\u0026#34;, \u0026#34;added_at\u0026#34;: \u0026#34;2025-01-20T09:00:00Z\u0026#34; }, { \u0026#34;ingredient_id\u0026#34;: \u0026#34;uuid-457\u0026#34;, \u0026#34;ingredient_name\u0026#34;: \u0026#34;Cà chua\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;ca chua\u0026#34;, \u0026#34;added_at\u0026#34;: \u0026#34;2025-01-20T09:05:00Z\u0026#34; } ], \u0026#34;count\u0026#34;: 2 } POST /user/ingredients#\rAuth: Required\nRequest:\n{ \u0026#34;ingredient_name\u0026#34;: \u0026#34;Thịt gà\u0026#34; }Response 201 Created:\n{ \u0026#34;ingredient_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;ingredient_name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;thit ga\u0026#34;, \u0026#34;added_at\u0026#34;: \u0026#34;2025-01-20T09:00:00Z\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Ingredient added\u0026#34; }Response 200 OK (Auto-corrected):\n{ \u0026#34;ingredient_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;ingredient_name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;original_input\u0026#34;: \u0026#34;thit ga\u0026#34;, \u0026#34;corrected\u0026#34;: true, \u0026#34;confidence\u0026#34;: 0.85, \u0026#34;message\u0026#34;: \u0026#34;Ingredient auto-corrected and added\u0026#34; }Errors:\n400: Invalid ingredient with suggestions { \u0026#34;error\u0026#34;: \u0026#34;ingredient_not_found\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Không tìm thấy nguyên liệu: abc xyz\u0026#34;, \u0026#34;suggestions\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;, \u0026#34;tôm\u0026#34;] } DELETE /user/ingredients/{ingredient_id}#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Ingredient removed\u0026#34; } POST /ingredients/validate#\rAuth: Required Description: Validate multiple ingredients at once\nRequest:\n{ \u0026#34;ingredients\u0026#34;: [\u0026#34;thịt gà\u0026#34;, \u0026#34;abc xyz\u0026#34;, \u0026#34;thit ca\u0026#34;] }Response 200 OK:\n{ \u0026#34;valid\u0026#34;: [ { \u0026#34;ingredient_name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;thit ga\u0026#34; } ], \u0026#34;invalid\u0026#34;: [\u0026#34;abc xyz\u0026#34;], \u0026#34;corrected\u0026#34;: [ { \u0026#34;original\u0026#34;: \u0026#34;thit ca\u0026#34;, \u0026#34;matched\u0026#34;: \u0026#34;Thịt cá\u0026#34;, \u0026#34;confidence\u0026#34;: 0.9 } ], \u0026#34;suggestions\u0026#34;: [ { \u0026#34;original\u0026#34;: \u0026#34;abc xyz\u0026#34;, \u0026#34;similar\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;, \u0026#34;tôm\u0026#34;, \u0026#34;mực\u0026#34;] } ] } GET /ingredients/search#\rAuth: Required Description: Search master ingredients\nQuery Params:\nq: Search term (required) category: Filter by category (optional) limit: Max results (default: 20) Example:\nGET /ingredients/search?q=ga\u0026amp;category=meat\u0026amp;limit=10Response 200 OK:\n{ \u0026#34;results\u0026#34;: [ { \u0026#34;ingredient_id\u0026#34;: \u0026#34;uuid-789\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;thit ga\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;meat\u0026#34;, \u0026#34;aliases\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;chicken\u0026#34;] }, { \u0026#34;ingredient_id\u0026#34;: \u0026#34;uuid-790\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Gà ta\u0026#34;, \u0026#34;normalized_name\u0026#34;: \u0026#34;ga ta\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;meat\u0026#34;, \u0026#34;aliases\u0026#34;: [\u0026#34;gà đồi\u0026#34;, \u0026#34;gà nhà\u0026#34;] } ], \u0026#34;count\u0026#34;: 2 } 3. AI Recipe Suggestions#\rPOST /ai/suggest#\rAuth: Required Timeout: 60 seconds\nRequest:\n{ \u0026#34;ingredients\u0026#34;: [\u0026#34;thịt gà\u0026#34;, \u0026#34;cà chua\u0026#34;, \u0026#34;hành tây\u0026#34;], \u0026#34;recipe_count\u0026#34;: 3 }Response 200 OK (Flexible Mix):\n{ \u0026#34;suggestions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Gà xào cà chua\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;stir-fry\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;cuisine_type\u0026#34;: \u0026#34;Vietnamese\u0026#34;, \u0026#34;prep_time_minutes\u0026#34;: 15, \u0026#34;cook_time_minutes\u0026#34;: 20, \u0026#34;servings\u0026#34;: 2, \u0026#34;difficulty\u0026#34;: \u0026#34;easy\u0026#34;, \u0026#34;match_score\u0026#34;: 0.95, \u0026#34;is_approved\u0026#34;: true, \u0026#34;average_rating\u0026#34;: 4.5, \u0026#34;rating_count\u0026#34;: 12, \u0026#34;ingredients\u0026#34;: [ { \u0026#34;ingredient_name\u0026#34;: \u0026#34;Thịt gà\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;300g\u0026#34;, \u0026#34;preparation\u0026#34;: \u0026#34;Cắt miếng vừa\u0026#34; } ], \u0026#34;instructions\u0026#34;: [ { \u0026#34;step_number\u0026#34;: 1, \u0026#34;description\u0026#34;: \u0026#34;Ướp gà với gia vị\u0026#34;, \u0026#34;duration\u0026#34;: \u0026#34;10 phút\u0026#34; } ], \u0026#34;nutritional_info\u0026#34;: { \u0026#34;calories\u0026#34;: 350, \u0026#34;protein\u0026#34;: \u0026#34;30g\u0026#34;, \u0026#34;carbs\u0026#34;: \u0026#34;20g\u0026#34;, \u0026#34;fat\u0026#34;: \u0026#34;15g\u0026#34; } }, { \u0026#34;id\u0026#34;: \u0026#34;recipe-002\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Canh cà chua\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;soup\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;soup\u0026#34;, \u0026#34;match_score\u0026#34;: 0.80, \u0026#34;is_approved\u0026#34;: true, \u0026#34;average_rating\u0026#34;: 4.2 }, { \u0026#34;id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Gà hấp cà chua hành\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;ai\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;steam\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;is_new\u0026#34;: true, \u0026#34;is_approved\u0026#34;: false, \u0026#34;ingredients\u0026#34;: [...], \u0026#34;instructions\u0026#34;: [...], \u0026#34;note\u0026#34;: \u0026#34;Recipe created by AI - Try it and rate!\u0026#34; } ], \u0026#34;stats\u0026#34;: { \u0026#34;requested\u0026#34;: 3, \u0026#34;from_database\u0026#34;: 2, \u0026#34;from_ai\u0026#34;: 1, \u0026#34;processing_time_ms\u0026#34;: 3500 }, \u0026#34;warnings\u0026#34;: [] }Response 200 OK (With Warnings):\n{ \u0026#34;suggestions\u0026#34;: [...], \u0026#34;stats\u0026#34;: { \u0026#34;requested\u0026#34;: 3, \u0026#34;from_database\u0026#34;: 0, \u0026#34;from_ai\u0026#34;: 3 }, \u0026#34;warnings\u0026#34;: [ { \u0026#34;ingredient\u0026#34;: \u0026#34;abc xyz\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Nguyên liệu không hợp lệ, AI cố gắng xử lý\u0026#34;, \u0026#34;suggestions\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;], \u0026#34;reported\u0026#34;: true } ] }Errors:\n400: All ingredients invalid { \u0026#34;error\u0026#34;: \u0026#34;all_ingredients_invalid\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Tất cả nguyên liệu không hợp lệ\u0026#34;, \u0026#34;invalid_ingredients\u0026#34;: [\u0026#34;abc\u0026#34;, \u0026#34;xyz\u0026#34;], \u0026#34;suggestions\u0026#34;: [ { \u0026#34;original\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;similar\u0026#34;: [\u0026#34;cá\u0026#34;, \u0026#34;gà\u0026#34;] } ] } 400: Too few ingredients { \u0026#34;error\u0026#34;: \u0026#34;insufficient_ingredients\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Cần ít nhất 2 nguyên liệu\u0026#34; } 403: Rate limit exceeded (free tier) { \u0026#34;error\u0026#34;: \u0026#34;rate_limit_exceeded\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Bạn đã hết lượt gợi ý. Nâng cấp Premium?\u0026#34;, \u0026#34;limit\u0026#34;: 10, \u0026#34;used\u0026#34;: 10, \u0026#34;reset_at\u0026#34;: \u0026#34;2025-02-01T00:00:00Z\u0026#34; } GET /ai/suggestions#\rAuth: Required Description: Get user\u0026rsquo;s suggestion history\nQuery Params:\nlimit: Max results (default: 20) offset: Pagination offset Response 200 OK:\n{ \u0026#34;suggestions\u0026#34;: [ { \u0026#34;suggestion_id\u0026#34;: \u0026#34;uuid-303\u0026#34;, \u0026#34;ingredients_used\u0026#34;: [\u0026#34;thịt gà\u0026#34;, \u0026#34;cà chua\u0026#34;], \u0026#34;requested_recipe_count\u0026#34;: 3, \u0026#34;recipes_from_db\u0026#34;: 2, \u0026#34;recipes_from_ai\u0026#34;: 1, \u0026#34;was_accepted\u0026#34;: true, \u0026#34;feedback_rating\u0026#34;: 5, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T10:00:00Z\u0026#34; } ], \u0026#34;count\u0026#34;: 1, \u0026#34;has_more\u0026#34;: false } POST /ai/feedback#\rAuth: Required Description: Provide feedback on AI suggestion\nRequest:\n{ \u0026#34;suggestion_id\u0026#34;: \u0026#34;uuid-303\u0026#34;, \u0026#34;was_accepted\u0026#34;: true, \u0026#34;feedback_rating\u0026#34;: 5, \u0026#34;feedback_comment\u0026#34;: \u0026#34;Gợi ý rất hay!\u0026#34; }Response 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Feedback saved. Thank you!\u0026#34; } 4. Cooking History \u0026amp; Rating#\rPOST /cooking/start#\rAuth: Required\nRequest:\n{ \u0026#34;recipe_id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;suggestion_id\u0026#34;: \u0026#34;uuid-303\u0026#34; }Response 201 Created:\n{ \u0026#34;history_id\u0026#34;: \u0026#34;uuid-202\u0026#34;, \u0026#34;recipe_id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;cooking\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T15:30:00Z\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Bắt đầu nấu ăn!\u0026#34; } PUT /cooking/{history_id}/complete#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;history_id\u0026#34;: \u0026#34;uuid-202\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;cook_date\u0026#34;: \u0026#34;2025-01-20T18:00:00Z\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Hoàn thành! Vui lòng đánh giá món ăn.\u0026#34;, \u0026#34;show_rating_form\u0026#34;: true } GET /user/cooking-history#\rAuth: Required\nQuery Params:\nlimit: Max results (default: 20) offset: Pagination favorites: true/false (filter favorites only) status: cooking/completed/failed Response 200 OK:\n{ \u0026#34;history\u0026#34;: [ { \u0026#34;history_id\u0026#34;: \u0026#34;uuid-202\u0026#34;, \u0026#34;recipe_id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;recipe_name\u0026#34;: \u0026#34;Gà xào cà chua\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;personal_rating\u0026#34;: 5, \u0026#34;personal_notes\u0026#34;: \u0026#34;Rất ngon!\u0026#34;, \u0026#34;is_favorite\u0026#34;: true, \u0026#34;cook_date\u0026#34;: \u0026#34;2025-01-20T18:00:00Z\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T15:30:00Z\u0026#34; } ], \u0026#34;count\u0026#34;: 1, \u0026#34;has_more\u0026#34;: false } DELETE /cooking/{history_id}#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Cooking history deleted\u0026#34; } PUT /cooking/{history_id}/favorite#\rAuth: Required\nRequest:\n{ \u0026#34;is_favorite\u0026#34;: true }Response 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Added to favorites\u0026#34; } POST /recipes/{recipe_id}/rate#\rAuth: Required\nRequest:\n{ \u0026#34;rating\u0026#34;: 5, \u0026#34;comment\u0026#34;: \u0026#34;Món này rất ngon!\u0026#34;, \u0026#34;history_id\u0026#34;: \u0026#34;uuid-202\u0026#34; }Response 200 OK (Auto-approved):\n{ \u0026#34;success\u0026#34;: true, \u0026#34;rating_saved\u0026#34;: true, \u0026#34;average_rating\u0026#34;: 4.2, \u0026#34;rating_count\u0026#34;: 13, \u0026#34;auto_approved\u0026#34;: true, \u0026#34;message\u0026#34;: \u0026#34;Công thức đã được thêm vào database!\u0026#34;, \u0026#34;recipe\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;is_approved\u0026#34;: true, \u0026#34;is_public\u0026#34;: true, \u0026#34;approval_type\u0026#34;: \u0026#34;auto_rating\u0026#34; } }Response 200 OK (Not approved):\n{ \u0026#34;success\u0026#34;: true, \u0026#34;rating_saved\u0026#34;: true, \u0026#34;average_rating\u0026#34;: 3.5, \u0026#34;rating_count\u0026#34;: 8, \u0026#34;auto_approved\u0026#34;: false, \u0026#34;message\u0026#34;: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34; }Errors:\n400: Invalid rating (must be 1-5) 409: Already rated this recipe 5. Recipe Management#\rGET /recipes/{recipe_id}#\rAuth: Optional (required for private recipes)\nResponse 200 OK:\n{ \u0026#34;recipe_id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Gà xào cà chua\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Món gà xào thơm ngon...\u0026#34;, \u0026#34;cuisine_type\u0026#34;: \u0026#34;Vietnamese\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;stir-fry\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;prep_time_minutes\u0026#34;: 15, \u0026#34;cook_time_minutes\u0026#34;: 20, \u0026#34;servings\u0026#34;: 2, \u0026#34;difficulty\u0026#34;: \u0026#34;easy\u0026#34;, \u0026#34;calories_per_serving\u0026#34;: 350, \u0026#34;ingredients\u0026#34;: [...], \u0026#34;instructions\u0026#34;: [...], \u0026#34;nutritional_info\u0026#34;: {...}, \u0026#34;is_public\u0026#34;: true, \u0026#34;is_ai_generated\u0026#34;: false, \u0026#34;is_approved\u0026#34;: true, \u0026#34;average_rating\u0026#34;: 4.5, \u0026#34;rating_count\u0026#34;: 12, \u0026#34;created_by\u0026#34;: { \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;cookmaster\u0026#34; }, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-15T10:00:00Z\u0026#34; }Errors:\n404: Recipe not found 403: Recipe is private GET /recipes/search#\rAuth: Optional\nQuery Params:\nq: Search query (optional) cuisine_type: Vietnamese/Italian/\u0026hellip; (optional) cooking_method: stir-fry/steam/soup/\u0026hellip; (optional) meal_type: main/side/soup/\u0026hellip; (optional) min_rating: Minimum rating (optional) sort: rating/created_at/popularity (default: rating) limit: Max results (default: 20) offset: Pagination Example:\nGET /recipes/search?cuisine_type=Vietnamese\u0026amp;cooking_method=stir-fry\u0026amp;min_rating=4\u0026amp;sort=rating\u0026amp;limit=10Response 200 OK:\n{ \u0026#34;recipes\u0026#34;: [ { \u0026#34;recipe_id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Gà xào cà chua\u0026#34;, \u0026#34;cuisine_type\u0026#34;: \u0026#34;Vietnamese\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;stir-fry\u0026#34;, \u0026#34;average_rating\u0026#34;: 4.5, \u0026#34;rating_count\u0026#34;: 12, \u0026#34;prep_time_minutes\u0026#34;: 15, \u0026#34;image_url\u0026#34;: \u0026#34;https://s3.../recipe-001.jpg\u0026#34; } ], \u0026#34;count\u0026#34;: 1, \u0026#34;has_more\u0026#34;: false } POST /recipes#\rAuth: Required Description: Create custom recipe (not from AI)\nRequest:\n{ \u0026#34;title\u0026#34;: \u0026#34;Món của tôi\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Công thức tự tạo\u0026#34;, \u0026#34;cuisine_type\u0026#34;: \u0026#34;Vietnamese\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;stir-fry\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;ingredients\u0026#34;: [...], \u0026#34;instructions\u0026#34;: [...] }Response 201 Created:\n{ \u0026#34;recipe_id\u0026#34;: \u0026#34;recipe-999\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Recipe created. It will be public after approval.\u0026#34;, \u0026#34;is_approved\u0026#34;: false } PUT /recipes/{recipe_id}#\rAuth: Required (own recipes only)\nRequest:\n{ \u0026#34;title\u0026#34;: \u0026#34;Updated title\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Updated description\u0026#34; }Response 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Recipe updated\u0026#34;, \u0026#34;recipe\u0026#34;: {...} } DELETE /recipes/{recipe_id}#\rAuth: Required (own recipes or admin)\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Recipe deleted\u0026#34; } 6. Privacy Settings#\rGET /user/privacy#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;profile_visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;email_visibility\u0026#34;: \u0026#34;private\u0026#34;, \u0026#34;date_of_birth_visibility\u0026#34;: \u0026#34;friends\u0026#34;, \u0026#34;gender_visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;country_visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;recipes_visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;ingredients_visibility\u0026#34;: \u0026#34;friends\u0026#34;, \u0026#34;preferences_visibility\u0026#34;: \u0026#34;friends\u0026#34; } PUT /user/privacy#\rAuth: Required\nRequest:\n{ \u0026#34;profile_visibility\u0026#34;: \u0026#34;friends\u0026#34;, \u0026#34;ingredients_visibility\u0026#34;: \u0026#34;private\u0026#34; }Response 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Privacy settings updated\u0026#34;, \u0026#34;settings\u0026#34;: {...} } 7. Social - Friends#\rPOST /friends/request#\rAuth: Required\nRequest:\n{ \u0026#34;friend_id\u0026#34;: \u0026#34;uuid-456\u0026#34; }Response 201 Created:\n{ \u0026#34;friendship_id\u0026#34;: \u0026#34;uuid-505\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Friend request sent\u0026#34; } GET /friends#\rAuth: Required\nQuery Params:\nstatus: pending/accepted/blocked Response 200 OK:\n{ \u0026#34;friends\u0026#34;: [ { \u0026#34;friendship_id\u0026#34;: \u0026#34;uuid-505\u0026#34;, \u0026#34;friend_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;friend1\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;Friend One\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://s3.../avatar.jpg\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;accepted\u0026#34;, \u0026#34;requested_at\u0026#34;: \u0026#34;2025-01-18T10:00:00Z\u0026#34; } ], \u0026#34;count\u0026#34;: 1 } PUT /friends/{friendship_id}/accept#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Friend request accepted\u0026#34;, \u0026#34;friendship\u0026#34;: {...} } PUT /friends/{friendship_id}/reject#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Friend request rejected\u0026#34; } DELETE /friends/{friendship_id}#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Friendship removed\u0026#34; } 8. Social - Posts \u0026amp; Comments#\rPOST /posts#\rAuth: Required\nRequest:\n{ \u0026#34;content\u0026#34;: \u0026#34;Vừa nấu món này, rất ngon!\u0026#34;, \u0026#34;recipe_id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;images\u0026#34;: [\u0026#34;https://s3.../post1.jpg\u0026#34;], \u0026#34;is_public\u0026#34;: true }Response 201 Created:\n{ \u0026#34;post_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Post created\u0026#34; } GET /posts/feed#\rAuth: Required Description: Get personalized feed (friends\u0026rsquo; posts)\nQuery Params:\nlimit: Max results (default: 20) offset: Pagination Response 200 OK:\n{ \u0026#34;posts\u0026#34;: [ { \u0026#34;post_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;friend1\u0026#34;, \u0026#34;user_avatar\u0026#34;: \u0026#34;https://s3.../avatar.jpg\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Vừa nấu món này!\u0026#34;, \u0026#34;recipe_id\u0026#34;: \u0026#34;recipe-001\u0026#34;, \u0026#34;recipe_name\u0026#34;: \u0026#34;Gà xào cà chua\u0026#34;, \u0026#34;images\u0026#34;: [\u0026#34;https://s3.../post1.jpg\u0026#34;], \u0026#34;likes_count\u0026#34;: 15, \u0026#34;comments_count\u0026#34;: 3, \u0026#34;user_has_liked\u0026#34;: false, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T20:00:00Z\u0026#34; } ], \u0026#34;has_more\u0026#34;: false } GET /posts/{post_id}#\rAuth: Optional\nResponse 200 OK:\n{ \u0026#34;post_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;user\u0026#34;: {...}, \u0026#34;content\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;recipe\u0026#34;: {...}, \u0026#34;images\u0026#34;: [...], \u0026#34;likes_count\u0026#34;: 15, \u0026#34;comments_count\u0026#34;: 3, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T20:00:00Z\u0026#34; } PUT /posts/{post_id}#\rAuth: Required (own posts only)\nRequest:\n{ \u0026#34;content\u0026#34;: \u0026#34;Updated content\u0026#34; }Response 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Post updated\u0026#34; } DELETE /posts/{post_id}#\rAuth: Required (own posts or admin)\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Post deleted\u0026#34; } POST /posts/{post_id}/comments#\rAuth: Required\nRequest:\n{ \u0026#34;content\u0026#34;: \u0026#34;Trông rất ngon!\u0026#34;, \u0026#34;parent_comment_id\u0026#34;: null }Response 201 Created:\n{ \u0026#34;comment_id\u0026#34;: \u0026#34;uuid-707\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Comment added\u0026#34; } GET /posts/{post_id}/comments#\rAuth: Optional\nResponse 200 OK:\n{ \u0026#34;comments\u0026#34;: [ { \u0026#34;comment_id\u0026#34;: \u0026#34;uuid-707\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;commenter\u0026#34;, \u0026#34;user_avatar\u0026#34;: \u0026#34;https://s3.../avatar.jpg\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Trông rất ngon!\u0026#34;, \u0026#34;parent_comment_id\u0026#34;: null, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T21:00:00Z\u0026#34; } ], \u0026#34;count\u0026#34;: 1 } POST /reactions#\rAuth: Required\nRequest:\n{ \u0026#34;target_type\u0026#34;: \u0026#34;post\u0026#34;, \u0026#34;target_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;reaction_type\u0026#34;: \u0026#34;like\u0026#34; }Response 201 Created:\n{ \u0026#34;reaction_id\u0026#34;: \u0026#34;uuid-808\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Reaction added\u0026#34; } DELETE /reactions/{reaction_id}#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Reaction removed\u0026#34; } 9. Notifications#\rGET /notifications#\rAuth: Required\nQuery Params:\nunread_only: true/false (default: false) limit: Max results (default: 20) Response 200 OK:\n{ \u0026#34;notifications\u0026#34;: [ { \u0026#34;notification_id\u0026#34;: \u0026#34;uuid-909\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;comment\u0026#34;, \u0026#34;actor\u0026#34;: { \u0026#34;user_id\u0026#34;: \u0026#34;uuid-456\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;friend1\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://s3.../avatar.jpg\u0026#34; }, \u0026#34;target_type\u0026#34;: \u0026#34;post\u0026#34;, \u0026#34;target_id\u0026#34;: \u0026#34;uuid-606\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;John commented on your post\u0026#34;, \u0026#34;is_read\u0026#34;: false, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-20T21:00:00Z\u0026#34; } ], \u0026#34;unread_count\u0026#34;: 5, \u0026#34;count\u0026#34;: 10 } PUT /notifications/{notification_id}/read#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;Notification marked as read\u0026#34; } PUT /notifications/read-all#\rAuth: Required\nResponse 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;All notifications marked as read\u0026#34;, \u0026#34;count\u0026#34;: 5 } 10. Admin Operations#\rGET /admin/users#\rAuth: Required (admin only)\nQuery Params:\nrole: user/admin is_active: true/false limit, offset Response 200 OK:\n{ \u0026#34;users\u0026#34;: [ { \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;user1\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;is_active\u0026#34;: true, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-15T10:00:00Z\u0026#34; } ], \u0026#34;count\u0026#34;: 1 } PUT /admin/users/{user_id}/ban#\rAuth: Required (admin only)\nRequest:\n{ \u0026#34;reason\u0026#34;: \u0026#34;Spam content\u0026#34; }Response 200 OK:\n{ \u0026#34;message\u0026#34;: \u0026#34;User banned\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;uuid-123\u0026#34; } GET /admin/statistics#\rAuth: Required (admin only)\nResponse 200 OK:\n{ \u0026#34;total_users\u0026#34;: 1000, \u0026#34;active_users_last_30_days\u0026#34;: 600, \u0026#34;total_recipes\u0026#34;: 5000, \u0026#34;approved_recipes\u0026#34;: 2000, \u0026#34;ai_generated_recipes\u0026#34;: 3000, \u0026#34;total_ai_suggestions\u0026#34;: 10000, \u0026#34;average_db_ai_mix\u0026#34;: \u0026#34;60/40\u0026#34;, \u0026#34;invalid_ingredient_reports\u0026#34;: 50, \u0026#34;monthly_cost_usd\u0026#34;: 155.50 } Response Codes#\rSuccess Codes#\r200 OK: Request successful 201 Created: Resource created 204 No Content: Successful deletion Client Error Codes#\r400 Bad Request: Invalid input 401 Unauthorized: Missing or invalid token 403 Forbidden: Insufficient permissions 404 Not Found: Resource not found 409 Conflict: Resource already exists 429 Too Many Requests: Rate limit exceeded Server Error Codes#\r500 Internal Server Error: Unexpected error 503 Service Unavailable: Service temporarily down 504 Gateway Timeout: Request timeout (AI generation) Error Response Format#\r{ \u0026#34;error\u0026#34;: \u0026#34;error_code\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Human-readable error message\u0026#34;, \u0026#34;details\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;Additional context\u0026#34; }, \u0026#34;timestamp\u0026#34;: \u0026#34;2025-01-20T10:00:00Z\u0026#34;, \u0026#34;request_id\u0026#34;: \u0026#34;uuid-xxx\u0026#34; }Rate Limiting#\rFree Tier: AI Suggestions: 10/month API Requests: 1000/hour Premium Tier: AI Suggestions: Unlimited API Requests: 10000/hour Rate Limit Headers: X-RateLimit-Limit: 1000 X-RateLimit-Remaining: 995 X-RateLimit-Reset: 1706097600Related Documents#\r10 - Architecture 11 - Database 13 - Security 20 - Backend "},{"id":11,"href":"/docs/dlc/13-security/","title":"13 - Security","section":"Docs","content":"Security Architecture - Smart Cooking App#\r   Security Overview#\rSecurity Principles#\rDefense in Depth: Multiple layers of security Least Privilege: Minimum necessary permissions Zero Trust: Verify everything, trust nothing Encryption Everywhere: At rest and in transit Security by Default: Secure configurations out of the box Compliance \u0026amp; Standards#\rStandards: - OWASP Top 10 (Web Application Security) - AWS Well-Architected Framework (Security Pillar) - GDPR-Ready (EU data protection) Certifications Target: - SOC 2 Type II (Post-MVP) - ISO 27001 (Future)   Authentication \u0026amp; Authorization#\r1. Amazon Cognito User Pool#\rConfiguration#\rUser Pool Settings: Name: smart-cooking-users Sign-in Options: - Email - Username Password Policy: Minimum Length: 8 characters Require: - Lowercase letters - Uppercase letters - Numbers - Special characters (optional) Temporary Password: 24 hours expiry MFA (Multi-Factor Authentication): Status: Optional (MVP), Required (Premium - Future) Methods: SMS, TOTP Account Recovery: Methods: Email verification code Email Verification: Required: Yes Code Expiry: 24 hours User Attributes: Standard: email, name, birthdate, gender Custom: - country - preferred_cooking_methods - dietary_restrictionsJWT Token Structure#\rAccess Token (1 hour expiry):\n{ \u0026#34;sub\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;cognito:username\u0026#34;: \u0026#34;cookmaster\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;email_verified\u0026#34;: true, \u0026#34;iss\u0026#34;: \u0026#34;https://cognito-idp.us-east-1.amazonaws.com/...\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;abc123...\u0026#34;, \u0026#34;token_use\u0026#34;: \u0026#34;access\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;aws.cognito.signin.user.admin\u0026#34;, \u0026#34;auth_time\u0026#34;: 1706097600, \u0026#34;exp\u0026#34;: 1706101200, \u0026#34;iat\u0026#34;: 1706097600 }ID Token (1 hour expiry):\n{ \u0026#34;sub\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;cognito:username\u0026#34;: \u0026#34;cookmaster\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;custom:role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;custom:country\u0026#34;: \u0026#34;Vietnam\u0026#34;, \u0026#34;iss\u0026#34;: \u0026#34;https://cognito-idp.us-east-1.amazonaws.com/...\u0026#34;, \u0026#34;aud\u0026#34;: \u0026#34;abc123...\u0026#34;, \u0026#34;token_use\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;auth_time\u0026#34;: 1706097600, \u0026#34;exp\u0026#34;: 1706101200, \u0026#34;iat\u0026#34;: 1706097600 }Refresh Token (30 days expiry):\nUsed to get new Access/ID tokens Stored securely in httpOnly cookie (not localStorage) Rotated on each use 2. API Gateway Authorization#\rCognito Authorizer Configuration#\rAuthorizer Type: COGNITO_USER_POOLS User Pool: smart-cooking-users Token Source: Authorization header Token Validation: - Signature verification - Expiration check - Issuer validation Authorization Caching: 300 seconds (5 minutes) Identity Source: method.request.header.Authorization Unauthorized Response: Status: 401 Body: { \u0026#34;message\u0026#34;: \u0026#34;Unauthorized\u0026#34; }Request Validation Flow#\rsequenceDiagram\rparticipant Client\rparticipant APIGateway\rparticipant Cognito\rparticipant Lambda\rparticipant DynamoDB\rClient-\u0026gt;\u0026gt;APIGateway: Request + JWT Token\rAPIGateway-\u0026gt;\u0026gt;APIGateway: Validate request schema\rAPIGateway-\u0026gt;\u0026gt;Cognito: Verify JWT signature\rCognito--\u0026gt;\u0026gt;APIGateway: Token valid + claims\rAPIGateway-\u0026gt;\u0026gt;APIGateway: Check authorization cache\ralt Token valid \u0026amp; cached\rAPIGateway-\u0026gt;\u0026gt;Lambda: Invoke with context\relse Token invalid\rAPIGateway--\u0026gt;\u0026gt;Client: 401 Unauthorized\rend\rLambda-\u0026gt;\u0026gt;Lambda: Extract user_id from context\rLambda-\u0026gt;\u0026gt;DynamoDB: Query with user_id\rLambda-\u0026gt;\u0026gt;Lambda: Check permissions (role, ownership)\ralt Has permission\rLambda--\u0026gt;\u0026gt;APIGateway: Success response\relse No permission\rLambda--\u0026gt;\u0026gt;APIGateway: 403 Forbidden\rend\rAPIGateway--\u0026gt;\u0026gt;Client: Response3. Lambda Authorization#\rContext Extraction#\r// Lambda receives Cognito context from API Gateway exports.handler = async (event, context) =\u0026gt; { // Extract user identity from Cognito authorizer const claims = event.requestContext.authorizer.claims; const userId = claims.sub; const username = claims[\u0026#39;cognito:username\u0026#39;]; const email = claims.email; const role = claims[\u0026#39;custom:role\u0026#39;] || \u0026#39;user\u0026#39;; // Authorization checks if (!isUserActive(userId)) { return { statusCode: 403, body: JSON.stringify({ error: \u0026#39;account_inactive\u0026#39;, message: \u0026#39;Your account has been deactivated\u0026#39; }) }; } // Resource ownership check if (requestedUserId !== userId \u0026amp;\u0026amp; role !== \u0026#39;admin\u0026#39;) { return { statusCode: 403, body: JSON.stringify({ error: \u0026#39;forbidden\u0026#39;, message: \u0026#39;You do not have permission to access this resource\u0026#39; }) }; } // Proceed with business logic // ... };Role-Based Access Control (RBAC)#\rconst PERMISSIONS = { user: [ \u0026#39;read:own_profile\u0026#39;, \u0026#39;write:own_profile\u0026#39;, \u0026#39;read:own_ingredients\u0026#39;, \u0026#39;write:own_ingredients\u0026#39;, \u0026#39;read:public_recipes\u0026#39;, \u0026#39;write:own_recipes\u0026#39;, \u0026#39;read:ai_suggestions\u0026#39;, \u0026#39;write:ai_suggestions\u0026#39;, \u0026#39;read:own_cooking_history\u0026#39;, \u0026#39;write:own_cooking_history\u0026#39;, \u0026#39;write:recipe_ratings\u0026#39;, \u0026#39;read:friends\u0026#39;, \u0026#39;write:friends\u0026#39;, \u0026#39;read:own_posts\u0026#39;, \u0026#39;write:own_posts\u0026#39;, \u0026#39;write:comments\u0026#39;, \u0026#39;write:reactions\u0026#39; ], admin: [ \u0026#39;*\u0026#39;, // All permissions \u0026#39;read:all_users\u0026#39;, \u0026#39;write:user_status\u0026#39;, \u0026#39;read:all_recipes\u0026#39;, \u0026#39;write:recipe_approval\u0026#39;, \u0026#39;read:statistics\u0026#39;, \u0026#39;read:invalid_reports\u0026#39; ] }; function hasPermission(role, permission) { const rolePermissions = PERMISSIONS[role] || []; return rolePermissions.includes(\u0026#39;*\u0026#39;) || rolePermissions.includes(permission); }   AWS WAF (Web Application Firewall)#\rWAF Rules Configuration#\rWAF WebACL: smart-cooking-waf Scope: REGIONAL (API Gateway) Default Action: ALLOW Managed Rule Groups: - AWSManagedRulesCommonRuleSet: Priority: 1 Excludes: [] # Protects against: # - SQL injection # - XSS (Cross-Site Scripting) # - Path traversal # - Command injection - AWSManagedRulesKnownBadInputsRuleSet: Priority: 2 # Blocks malicious request patterns Custom Rules: - RateLimitRule: Priority: 10 Type: RATE_BASED Limit: 1000 requests per 5 minutes per IP Action: BLOCK Scope: IP - GeoBlockRule: Priority: 20 Type: GEO_MATCH Countries: [] # No blocking in MVP Action: BLOCK # Future: Block high-risk countries - APIEndpointProtection: Priority: 30 Type: REGEX_PATTERN_SET Patterns: - /admin/* (Require admin token) - /ai/suggest (Rate limit: 100/hour/user) Action: CUSTOM_RESPONSE Logging: Enabled: Yes Destination: CloudWatch Logs LogGroup: /aws/waf/smart-cookingRate Limiting Strategy#\rTiers: Global: Requests: 1000 per 5 minutes per IP Action: Block for 10 minutes Free User: AI Suggestions: 10 per month API Requests: 1000 per hour Action: 429 Too Many Requests Premium User: AI Suggestions: Unlimited API Requests: 10000 per hour Action: 429 (soft limit, can burst) Admin: No limits   Data Encryption#\r1. Encryption at Rest#\rDynamoDB Encryption#\rEncryption: Type: AWS Managed Keys (AWS KMS) Key: aws/dynamodb Algorithm: AES-256 Scope: All tables and indexes Point-in-Time Recovery (PITR): Enabled: Yes Encrypted: Yes (same key)S3 Encryption#\rBuckets: - smart-cooking-recipe-images-prod - smart-cooking-user-avatars-prod - smart-cooking-post-images-prod Encryption: Type: SSE-S3 (Server-Side Encryption with S3 managed keys) Algorithm: AES-256 Bucket Policies: - Deny unencrypted uploads - Require HTTPS Versioning: Enabled (critical buckets) MFA Delete: Enabled (production)CloudWatch Logs Encryption#\rEncryption: Type: AWS KMS Key: aws/logs All log groups: Encrypted by default2. Encryption in Transit#\rHTTPS Enforcement#\rCloudFront: Protocol: HTTPS only TLS Version: 1.2 minimum (prefer 1.3) Ciphers: Strong ciphers only - TLS_AES_128_GCM_SHA256 - TLS_AES_256_GCM_SHA384 - TLS_CHACHA20_POLY1305_SHA256 Certificate: AWS Certificate Manager (ACM) API Gateway: Protocol: HTTPS only TLS Version: 1.2 minimum Certificate: ACM S3 Pre-signed URLs: Protocol: HTTPS Expiry: 15 minutes3. Secrets Management#\rAWS Secrets Manager#\rSecrets Stored: - bedrock/api-key (if needed) - database/credentials (if using RDS - not in MVP) - third-party/api-keys (future) Configuration: Rotation: Automatic (30 days) Encryption: AWS KMS Access: IAM roles only Lambda Access: - Cache secrets in memory (Lambda lifecycle) - Refresh on rotationEnvironment Variables#\r// Lambda environment variables (encrypted) process.env.DYNAMODB_TABLE = \u0026#39;smart-cooking-data\u0026#39;; process.env.S3_BUCKET_RECIPES = \u0026#39;smart-cooking-recipe-images-prod\u0026#39;; process.env.COGNITO_USER_POOL_ID = \u0026#39;us-east-1_abc123\u0026#39;; process.env.BEDROCK_MODEL_ID = \u0026#39;anthropic.claude-3-haiku-20240307-v1:0\u0026#39;; // Never store in code: // ❌ API keys // ❌ Database passwords // ❌ Secret tokens    IAM (Identity and Access Management)#\rLambda Execution Roles#\rBase Lambda Role#\r{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:*:*:*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;xray:PutTraceSegments\u0026#34;, \u0026#34;xray:PutTelemetryRecords\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] }AI Suggestion Lambda Role#\r{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:GetItem\u0026#34;, \u0026#34;dynamodb:Query\u0026#34;, \u0026#34;dynamodb:PutItem\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:dynamodb:us-east-1:*:table/smart-cooking-data\u0026#34;, \u0026#34;arn:aws:dynamodb:us-east-1:*:table/smart-cooking-data/index/*\u0026#34; ] }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;bedrock:InvokeModel\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-*\u0026#34; } ] }Recipe CRUD Lambda Role#\r{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:GetItem\u0026#34;, \u0026#34;dynamodb:Query\u0026#34;, \u0026#34;dynamodb:PutItem\u0026#34;, \u0026#34;dynamodb:UpdateItem\u0026#34;, \u0026#34;dynamodb:DeleteItem\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:us-east-1:*:table/smart-cooking-data*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::smart-cooking-*/*\u0026#34; } ] }S3 Bucket Policies#\rRecipe Images Bucket#\r{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;DenyUnencryptedUploads\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::smart-cooking-recipe-images-prod/*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringNotEquals\u0026#34;: { \u0026#34;s3:x-amz-server-side-encryption\u0026#34;: \u0026#34;AES256\u0026#34; } } }, { \u0026#34;Sid\u0026#34;: \u0026#34;RequireHTTPS\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::smart-cooking-recipe-images-prod/*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;Bool\u0026#34;: { \u0026#34;aws:SecureTransport\u0026#34;: \u0026#34;false\u0026#34; } } }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllowCloudFrontRead\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;cloudfront.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::smart-cooking-recipe-images-prod/*\u0026#34; } ] }   Security Monitoring \u0026amp; Incident Response#\rCloudWatch Alarms#\rSecurity Alarms: - UnauthorizedAPIAttempts: Metric: API Gateway 4xx errors Threshold: \u0026gt; 100 in 5 minutes Action: SNS notification - SuspiciousActivityDetected: Metric: WAF blocked requests Threshold: \u0026gt; 50 from same IP in 5 minutes Action: SNS + Lambda investigation - LambdaExecutionErrors: Metric: Lambda errors Threshold: \u0026gt; 10 in 5 minutes Action: SNS notification - UnusualDataAccess: Metric: DynamoDB throttled requests Threshold: \u0026gt; 0 Action: SNS notification - CostAnomaly: Metric: Daily AWS cost Threshold: \u0026gt; $20/day (MVP) Action: SNS + Auto-disable non-critical functionsAWS X-Ray Tracing#\rTracing: Services: - API Gateway (100% sampling) - Lambda AI Suggestion (100%) - Lambda Recipe CRUD (10% sampling) - DynamoDB (auto) - Bedrock (auto) Annotations: - user_id - request_id - api_endpoint - error_type Segments Tracked: - Authentication - Authorization - Database queries - AI API calls - S3 operationsLogging Strategy#\rCloudWatch Log Groups: /aws/lambda/*: Retention: 7 days Format: JSON Fields: - timestamp - level (INFO/WARN/ERROR) - request_id - user_id - function_name - message - metadata /aws/apigateway/smart-cooking-api: Retention: 7 days Format: CLF (Common Log Format) Include: - Request/Response bodies (excluding sensitive data) - Headers (excluding Authorization) - Status codes - Latency /aws/waf/smart-cooking: Retention: 30 days Include: - Blocked requests - Rate limit violations - Rule matches Sensitive Data Filtering: - Password fields: Always masked - JWT tokens: Masked - Email addresses: Partially masked (u***@example.com) - Payment info: Never logged (future)🔍 Vulnerability Management#\rOWASP Top 10 Mitigations#\r1. Injection (SQL, NoSQL, Command)#\rMitigations: - DynamoDB: Parameterized queries (SDK handles) - Input validation: API Gateway + Lambda - WAF: SQL injection rule set - Code review: No eval(), no dynamic queries2. Broken Authentication#\rMitigations: - Cognito User Pool: Industry-standard auth - JWT tokens: Short-lived (1 hour) - Refresh tokens: Secure httpOnly cookies - MFA: Optional (premium feature) - Password policy: Strong requirements3. Sensitive Data Exposure#\rMitigations: - HTTPS: Everywhere - Encryption at rest: All data (DynamoDB, S3) - Secrets Manager: API keys - No sensitive data in logs - Privacy settings: User control4. XML External Entities (XXE)#\rMitigations: - Not applicable: JSON-only API5. Broken Access Control#\rMitigations: - JWT validation: Every request - Resource ownership: Checked in Lambda - RBAC: user/admin roles - Privacy filtering: Applied before response - API Gateway: Method-level authorization6. Security Misconfiguration#\rMitigations: - Infrastructure as Code: Consistent config - AWS Config: Compliance monitoring - Security Group: Least privilege - S3 Buckets: Private by default - Error messages: No stack traces in production7. Cross-Site Scripting (XSS)#\rMitigations: - API: JSON only (not HTML) - Frontend: React auto-escapes - CSP headers: Content Security Policy - Input validation: Sanitize user content - WAF: XSS rule set8. Insecure Deserialization#\rMitigations: - JSON parsing: Safe (JSON.parse) - No user-controlled deserialization - Input validation: Schema validation9. Using Components with Known Vulnerabilities#\rMitigations: - Dependabot: Automated vulnerability scanning - npm audit: Regular checks - AWS managed services: Auto-patched - Lambda runtime: Latest Node.js 20 LTS10. Insufficient Logging \u0026amp; Monitoring#\rMitigations: - CloudWatch: Comprehensive logging - X-Ray: Distributed tracing - Alarms: Real-time alerts - Retention: 7-30 days - Centralized: All logs in CloudWatch   API Security Best Practices#\rRequest Validation#\r// API Gateway Request Validator const requestSchema = { type: \u0026#39;object\u0026#39;, required: [\u0026#39;ingredients\u0026#39;, \u0026#39;recipe_count\u0026#39;], properties: { ingredients: { type: \u0026#39;array\u0026#39;, minItems: 2, maxItems: 20, items: { type: \u0026#39;string\u0026#39;, minLength: 1, maxLength: 100 } }, recipe_count: { type: \u0026#39;integer\u0026#39;, minimum: 1, maximum: 5 } } }; // Lambda validation function validateInput(body) { // Sanitize strings const sanitized = body.ingredients.map(ing =\u0026gt; ing.trim().replace(/[\u0026lt;\u0026gt;]/g, \u0026#39;\u0026#39;) ); // Validate count based on user tier if (userTier === \u0026#39;free\u0026#39; \u0026amp;\u0026amp; body.recipe_count \u0026gt; 1) { throw new Error(\u0026#39;Free tier limited to 1 recipe\u0026#39;); } return sanitized; }CORS Configuration#\rAPI Gateway CORS: Access-Control-Allow-Origin: - https://smartcooking.app - http://localhost:3000 (development) Access-Control-Allow-Methods: - GET, POST, PUT, DELETE, OPTIONS Access-Control-Allow-Headers: - Content-Type - Authorization - X-Request-ID Access-Control-Max-Age: 3600 Access-Control-Allow-Credentials: trueSecurity Headers#\r// Lambda response headers const securityHeaders = { \u0026#39;Strict-Transport-Security\u0026#39;: \u0026#39;max-age=31536000; includeSubDomains\u0026#39;, \u0026#39;X-Content-Type-Options\u0026#39;: \u0026#39;nosniff\u0026#39;, \u0026#39;X-Frame-Options\u0026#39;: \u0026#39;DENY\u0026#39;, \u0026#39;X-XSS-Protection\u0026#39;: \u0026#39;1; mode=block\u0026#39;, \u0026#39;Content-Security-Policy\u0026#39;: \u0026#34;default-src \u0026#39;self\u0026#39;; img-src \u0026#39;self\u0026#39; https://s3.amazonaws.com; script-src \u0026#39;self\u0026#39;\u0026#34;, \u0026#39;Referrer-Policy\u0026#39;: \u0026#39;strict-origin-when-cross-origin\u0026#39;, \u0026#39;Permissions-Policy\u0026#39;: \u0026#39;geolocation=(), microphone=(), camera=()\u0026#39; };   Privacy \u0026amp; Data Protection#\rGDPR Compliance#\rData Subject Rights: 1. Right to Access: Endpoint: GET /user/data-export Format: JSON Includes: Profile, recipes, history, posts 2. Right to Deletion: Endpoint: DELETE /user/account Process: - Delete user data from DynamoDB - Delete S3 objects - Anonymize logs (keep for 7 days) - Delete Cognito user 3. Right to Rectification: Endpoint: PUT /user/profile User can update any personal data 4. Right to Portability: Endpoint: GET /user/data-export Format: JSON (machine-readable) 5. Right to Object: Endpoint: PUT /user/privacy User can restrict data usage 6. Right to be Informed: Privacy Policy: Clear explanation Consent: Explicit opt-in Notifications: Data breach within 72 hours Data Minimization: - Collect only necessary data - AI uses: age range (not exact birthdate) - Location: Country only (not city/address) - No tracking pixels (MVP) Data Retention: - User data: Until account deletion - Logs: 7-30 days - Backups: 35 days (PITR) - AI suggestions: 90 days (optional)AI Privacy Policy#\r## AI Agent Data Usage The Smart Cooking AI uses the following data to personalize recipe suggestions: **Data Used:** - Age range (derived from birth year) - for nutritional recommendations - Gender - for portion size recommendations - Country - for regional cuisine preferences - Cooking preferences (stir-fry, steam, soup, etc.) - Favorite cuisines (Vietnamese, Italian, etc.) - Allergies - **CRITICAL** for food safety **Data NOT Used:** - Full name - Email address - Exact location - Payment information - Browsing history **Purpose:** - Personalize recipe suggestions only - No advertising or marketing - No third-party sharing - No profiling beyond cooking preferences **User Control:** - You can update preferences anytime - You can delete your data anytime - AI suggestions are optionalRelated Documents#\r10 - Architecture 12 - API Spec 14 - AI Agent 41 - Privacy "},{"id":12,"href":"/docs/dlc/14-ai-agent/","title":"14 - AI Agent Design","section":"Docs","content":"AI Agent Design - Smart Cooking App#\r   AI Agent Overview#\rVision#\rTạo AI agent thông minh có khả năng:\nHiểu ngữ cảnh: Personalize dựa trên user profile Linh hoạt: Mix DB và AI recipes để tối ưu cost Đa dạng: Gợi ý các phương pháp nấu khác nhau An toàn: Tuyệt đối tránh allergies Học hỏi: Tự động cải thiện qua community ratings Core Technologies#\rAI Provider: Amazon Bedrock Model: Claude 3 Haiku (cost-effective) or Sonnet (quality) Input Limit: 200K tokens Output Limit: 8K tokens recommended Timeout: 60 seconds Fallback: DB recipes only if AI fails   AI Agent Features#\r1. Flexible DB/AI Mix Strategy ⭐#\rConcept#\rUser Request: \u0026#34;Gợi ý 3 món với gà, cà chua, hành\u0026#34;\rSystem Process:\rStep 1: Validate ingredients với master_ingredients\rStep 2: Query DB cho approved recipes (match + diverse categories)\rStep 3: Calculate gap = requested_count - db_count\rStep 4: Generate gap recipes bằng AI\rStep 5: Return combined results\rExample Output:\r- 2 món từ DB (xào, canh) ← Tiết kiệm cost\r- 1 món từ AI (hấp) ← Đa dạng phương phápFlow Diagram#\rsequenceDiagram\rparticipant User\rparticipant Lambda\rparticipant DynamoDB\rparticipant Bedrock\rUser-\u0026gt;\u0026gt;Lambda: POST /ai/suggest\u0026lt;br/\u0026gt;{ingredients, recipe_count: 3}\rNote over Lambda: STEP 1: Validate\rLambda-\u0026gt;\u0026gt;DynamoDB: Check master_ingredients\rDynamoDB--\u0026gt;\u0026gt;Lambda: All valid ✅\rNote over Lambda: STEP 2: Query DB\rLambda-\u0026gt;\u0026gt;DynamoDB: Query approved recipes\u0026lt;br/\u0026gt;WHERE match ingredients\u0026lt;br/\u0026gt;AND diverse categories\rDynamoDB--\u0026gt;\u0026gt;Lambda: Found 2 recipes:\u0026lt;br/\u0026gt;- Gà xào cà chua (stir-fry)\u0026lt;br/\u0026gt;- Canh cà chua (soup)\rNote over Lambda: STEP 3: Calculate Gap\u0026lt;br/\u0026gt;Requested: 3\u0026lt;br/\u0026gt;DB: 2\u0026lt;br/\u0026gt;Gap: 1\rNote over Lambda: STEP 4: Generate AI\rLambda-\u0026gt;\u0026gt;Bedrock: Generate 1 recipe\u0026lt;br/\u0026gt;(diverse: steam/bake/grill)\rBedrock--\u0026gt;\u0026gt;Lambda: AI Recipe:\u0026lt;br/\u0026gt;- Gà hấp cà chua (steam)\rNote over Lambda: STEP 5: Combine\rLambda-\u0026gt;\u0026gt;DynamoDB: Save suggestion history\rLambda--\u0026gt;\u0026gt;User: Return 3 recipes:\u0026lt;br/\u0026gt;2 DB + 1 AICost Optimization#\rScenarios: Case 1: DB Coverage High (80%) Request: 5 recipes DB Found: 4 recipes AI Generate: 1 recipe Cost: 1 AI call (~$0.002) Savings: 80% vs pure AI Case 2: DB Coverage Medium (60%) Request: 5 recipes DB Found: 3 recipes AI Generate: 2 recipes Cost: 2 AI calls (~$0.004) Savings: 60% vs pure AI Case 3: DB Coverage Low (20%) Request: 5 recipes DB Found: 1 recipe AI Generate: 4 recipes Cost: 4 AI calls (~$0.008) Savings: 20% vs pure AI Case 4: Cold Start (0%) Request: 5 recipes DB Found: 0 recipes AI Generate: 5 recipes Cost: 5 AI calls (~$0.010) Savings: 0% (but builds DB!) Strategy: - Start: 0% DB, 100% AI - Month 3: 30% DB, 70% AI - Month 6: 60% DB, 40% AI - Month 12: 80% DB, 20% AI Total Cost Reduction: 0% → 80% over 1 year2. Category-Based Diversity ⭐#\rProblem#\rUser nhận 5 món giống nhau (tất cả xào) → Không diverse\nSolution#\r// Query DB với category diversity async function queryDiverseRecipes(ingredients, count) { const categories = [\u0026#39;stir-fry\u0026#39;, \u0026#39;soup\u0026#39;, \u0026#39;steam\u0026#39;, \u0026#39;grill\u0026#39;, \u0026#39;bake\u0026#39;]; const results = []; // Try to get 1 recipe per category for (const method of categories) { if (results.length \u0026gt;= count) break; const recipe = await ddb.query({ IndexName: \u0026#39;GSI2\u0026#39;, KeyConditionExpression: \u0026#39;GSI2PK = :pk\u0026#39;, FilterExpression: \u0026#39;contains(ingredients_list, :ing)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `METHOD#${method}`, \u0026#39;:ing\u0026#39;: ingredients[0] // Main ingredient }, Limit: 1 }); if (recipe.Items.length \u0026gt; 0) { results.push(recipe.Items[0]); } } return results; }AI Prompt for Diversity#\rGenerate a recipe with these requirements:\r- Cooking method: {method} (must be different from DB recipes)\r- Ensure diversity in meal preparation3. Invalid Ingredient Handling ⭐#\rFlow#\rgraph TD\rA[User Input: \u0026#39;abc xyz\u0026#39;] --\u0026gt; B{Check master_ingredients}\rB --\u0026gt;|Not Found| C[Fuzzy Search]\rC --\u0026gt; D{Found Similar?}\rD --\u0026gt;|Yes| E[Auto-correct: \u0026#39;gà\u0026#39;]\rD --\u0026gt;|No| F[Log to CloudWatch]\rF --\u0026gt; G{Report Count \u0026gt;= 5?}\rG --\u0026gt;|Yes| H[Notify Admin]\rG --\u0026gt;|No| I[Increment Counter]\rE --\u0026gt; J[Continue with corrected]\rH --\u0026gt; K[Admin Reviews]\rI --\u0026gt; L[Return suggestions]Implementation#\rasync function validateIngredientsWithReporting(ingredients, userId) { const validated = []; const invalid = []; const warnings = []; for (const ing of ingredients) { const normalized = normalizeText(ing); // Check exact match const exactMatch = await ddb.query({ TableName: \u0026#39;smart-cooking-data\u0026#39;, IndexName: \u0026#39;GSI2\u0026#39;, KeyConditionExpression: \u0026#39;GSI2PK = :pk AND GSI2SK = :sk\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: \u0026#39;INGREDIENT#SEARCH\u0026#39;, \u0026#39;:sk\u0026#39;: `NAME#${normalized}` } }); if (exactMatch.Items.length \u0026gt; 0) { validated.push(exactMatch.Items[0].name); continue; } // Fuzzy search const similar = await fuzzySearchIngredients(normalized); if (similar.length \u0026gt; 0 \u0026amp;\u0026amp; similar[0].confidence \u0026gt;= 0.8) { // Auto-correct validated.push(similar[0].name); warnings.push({ original: ing, corrected: similar[0].name, confidence: similar[0].confidence }); } else { // Invalid - log and report invalid.push(ing); // Log to CloudWatch console.log(JSON.stringify({ level: \u0026#39;WARN\u0026#39;, event: \u0026#39;invalid_ingredient\u0026#39;, user_id: userId, ingredient: ing, normalized: normalized, suggestions: similar.slice(0, 5) })); // Increment report count await incrementInvalidReport(normalized, userId); warnings.push({ ingredient: ing, message: \u0026#39;Nguyên liệu không hợp lệ\u0026#39;, suggestions: similar.slice(0, 5).map(s =\u0026gt; s.name), reported: true }); } } return { validated, invalid, warnings }; } async function incrementInvalidReport(normalized, userId) { // Check if already reported by this user const existing = await ddb.get({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Key: { PK: `INVALID_INGREDIENT#${normalized}`, SK: `USER#${userId}` } }); if (existing.Item) { // Increment user report count await ddb.update({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Key: { PK: `INVALID_INGREDIENT#${normalized}`, SK: `USER#${userId}` }, UpdateExpression: \u0026#39;ADD user_report_count :inc\u0026#39;, ExpressionAttributeValues: { \u0026#39;:inc\u0026#39;: 1 } }); } else { // Create new report await ddb.put({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `INVALID_INGREDIENT#${normalized}`, SK: `USER#${userId}`, ingredient_name: normalized, user_report_count: 1, total_reports: 1, status: \u0026#39;pending\u0026#39;, created_at: new Date().toISOString(), GSI1PK: \u0026#39;REPORTS#PENDING\u0026#39;, GSI1SK: `TOTAL#1#${new Date().toISOString()}` } }); } // Check if should notify admin (\u0026gt;= 5 reports) const totalReports = await getTotalReports(normalized); if (totalReports \u0026gt;= 5) { await notifyAdmin(\u0026#39;invalid_ingredient_threshold\u0026#39;, { ingredient: normalized, total_reports: totalReports }); } }   AI Prompt Engineering#\rBase Prompt Template#\rfunction buildAIPrompt(ingredients, userContext, diverseCategory) { const age = userContext.birth_year ? new Date().getFullYear() - userContext.birth_year : null; return `You are a professional chef. Create a creative recipe based on: **Available Ingredients:** ${ingredients.map(ing =\u0026gt; `- ${ing}`).join(\u0026#39;\\n\u0026#39;)} **User Context (for personalization):** ${age ? `- Age: ${age} years (adjust nutrition)` : \u0026#39;\u0026#39;} ${userContext.gender ? `- Gender: ${userContext.gender} (adjust portion size)` : \u0026#39;\u0026#39;} ${userContext.country ? `- Country: ${userContext.country} (prefer local cuisine)` : \u0026#39;\u0026#39;} **Cooking Preferences:** ${userContext.preferred_cooking_methods?.length \u0026gt; 0 ? `- Preferred methods: ${userContext.preferred_cooking_methods.join(\u0026#39;, \u0026#39;)}` : \u0026#39;- No specific preference\u0026#39;} **Favorite Cuisines:** ${userContext.cuisine_preference?.length \u0026gt; 0 ? `- Preferred cuisines: ${userContext.cuisine_preference.join(\u0026#39;, \u0026#39;)}` : \u0026#39;- No preference\u0026#39;} **Allergies (ABSOLUTELY AVOID):** ${userContext.allergies?.length \u0026gt; 0 ? userContext.allergies.map(a =\u0026gt; `- ❌ ${a} (NEVER USE)`).join(\u0026#39;\\n\u0026#39;) : \u0026#39;- No allergies\u0026#39;} **Requirements:** 1. Use MOST or ALL of the provided ingredients 2. Cooking method: **${diverseCategory}** (IMPORTANT: Must use this method) 3. If country is ${userContext.country}, prefer local cuisine style 4. If favorite cuisine is ${userContext.cuisine_preference?.join(\u0026#39;/\u0026#39;)}, use that style 5. **ABSOLUTELY NEVER** use allergy ingredients: ${userContext.allergies?.join(\u0026#39;, \u0026#39;) || \u0026#39;None\u0026#39;} 6. Suitable for ${age ? `${age} years old` : \u0026#39;adults\u0026#39;} 7. Creative and unique recipe (not in database) 8. Nutritionally balanced **Return JSON format:** { \u0026#34;name\u0026#34;: \u0026#34;Recipe name in ${userContext.country || \u0026#39;local\u0026#39;} language\u0026#34;, \u0026#34;cuisine_type\u0026#34;: \u0026#34;${userContext.cuisine_preference?.[0] || \u0026#39;Vietnamese\u0026#39;}\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;${diverseCategory}\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;main/side/soup/dessert\u0026#34;, \u0026#34;difficulty\u0026#34;: \u0026#34;easy/medium/hard\u0026#34;, \u0026#34;cooking_time\u0026#34;: \u0026#34;30 minutes\u0026#34;, \u0026#34;servings\u0026#34;: 2, \u0026#34;ingredients\u0026#34;: [ { \u0026#34;ingredient_name\u0026#34;: \u0026#34;Ingredient name\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;100g\u0026#34;, \u0026#34;preparation\u0026#34;: \u0026#34;Chop into pieces\u0026#34; } ], \u0026#34;instructions\u0026#34;: [ { \u0026#34;step_number\u0026#34;: 1, \u0026#34;description\u0026#34;: \u0026#34;Step description\u0026#34;, \u0026#34;duration\u0026#34;: \u0026#34;5 minutes\u0026#34; } ], \u0026#34;nutritional_info\u0026#34;: { \u0026#34;calories\u0026#34;: 300, \u0026#34;protein\u0026#34;: \u0026#34;20g\u0026#34;, \u0026#34;carbs\u0026#34;: \u0026#34;30g\u0026#34;, \u0026#34;fat\u0026#34;: \u0026#34;10g\u0026#34; }, \u0026#34;tags\u0026#34;: [\u0026#34;healthy\u0026#34;, \u0026#34;quick\u0026#34;, \u0026#34;family-friendly\u0026#34;], \u0026#34;notes\u0026#34;: \u0026#34;Suitable for ${age ? `${age} years old` : \u0026#39;adults\u0026#39;}. ${userContext.allergies?.length \u0026gt; 0 ? \u0026#39;Allergy-safe.\u0026#39; : \u0026#39;\u0026#39;}\u0026#34; }`; }Privacy-Aware Prompt#\r// Privacy metadata (logged but NOT sent to AI) const privacyMetadata = { age_range: age ? `${Math.floor(age / 10) * 10}-${Math.floor(age / 10) * 10 + 9}` : null, gender: userContext.gender || null, country: userContext.country || null, cuisine_preference: userContext.cuisine_preference || [], allergies_avoided: userContext.allergies || [], // NOT included: email: undefined, full_name: undefined, exact_birthdate: undefined, address: undefined }; // Saved to DynamoDB for audit await ddb.put({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `USER#${userId}`, SK: `AI_SUGGESTION#${timestamp}`, personalization_used: privacyMetadata, prompt_hash: hashPrompt(prompt), // For debugging created_at: new Date().toISOString() } });   AI Response Processing#\rParse \u0026amp; Validate#\rasync function processAIResponse(aiResponse, ingredients, userContext) { let recipe; try { // Parse JSON from AI const responseBody = JSON.parse(aiResponse.body); const recipeText = responseBody.content[0].text; recipe = JSON.parse(recipeText); } catch (error) { console.error(\u0026#39;AI response parsing error:\u0026#39;, error); throw new Error(\u0026#39;Failed to parse AI recipe\u0026#39;); } // Validate required fields const requiredFields = [ \u0026#39;name\u0026#39;, \u0026#39;cuisine_type\u0026#39;, \u0026#39;cooking_method\u0026#39;, \u0026#39;ingredients\u0026#39;, \u0026#39;instructions\u0026#39; ]; for (const field of requiredFields) { if (!recipe[field]) { throw new Error(`Missing required field: ${field}`); } } // Validate NO allergies if (userContext.allergies?.length \u0026gt; 0) { const recipeIngredients = recipe.ingredients.map( ing =\u0026gt; normalizeText(ing.ingredient_name) ); const allergyFound = userContext.allergies.some(allergy =\u0026gt; { const normalized = normalizeText(allergy); return recipeIngredients.some(ing =\u0026gt; ing.includes(normalized)); }); if (allergyFound) { console.error(\u0026#39;AI generated recipe with allergy ingredient!\u0026#39;); throw new Error(\u0026#39;Recipe contains allergy ingredients\u0026#39;); } } // Add metadata recipe.recipe_id = `ai-gen-${generateUUID()}`; recipe.source = \u0026#39;ai\u0026#39;; recipe.is_new = true; recipe.is_approved = false; recipe.is_ai_generated = true; recipe.created_by = \u0026#39;bedrock-ai\u0026#39;; recipe.created_at = new Date().toISOString(); recipe.personalization_used = { age_range: userContext.age_range, gender: userContext.gender, country: userContext.country, allergies_avoided: userContext.allergies }; return recipe; }Error Handling \u0026amp; Fallback#\rasync function generateAIRecipesWithFallback( ingredients, userContext, count, usedMethods ) { const recipes = []; const availableMethods = [ \u0026#39;stir-fry\u0026#39;, \u0026#39;soup\u0026#39;, \u0026#39;steam\u0026#39;, \u0026#39;grill\u0026#39;, \u0026#39;bake\u0026#39;, \u0026#39;fry\u0026#39;, \u0026#39;boil\u0026#39; ].filter(m =\u0026gt; !usedMethods.includes(m)); for (let i = 0; i \u0026lt; count; i++) { const method = availableMethods[i % availableMethods.length]; try { const recipe = await callBedrockAI(ingredients, userContext, method); recipes.push(recipe); } catch (error) { console.error(`AI generation failed for ${method}:`, error); // Fallback: Try DB again const fallbackRecipe = await queryRecipeByMethod(method, ingredients); if (fallbackRecipe) { recipes.push(fallbackRecipe); } else { // Ultimate fallback: Return generic recipe template recipes.push(createGenericRecipe(ingredients, method)); } } } return recipes; } function createGenericRecipe(ingredients, method) { return { recipe_id: `generic-${generateUUID()}`, name: `${ingredients[0]} ${method}`, source: \u0026#39;fallback\u0026#39;, cooking_method: method, ingredients: ingredients.map(ing =\u0026gt; ({ ingredient_name: ing, quantity: \u0026#39;To taste\u0026#39; })), instructions: [ { step_number: 1, description: `Prepare ${ingredients.join(\u0026#39;, \u0026#39;)} using ${method} method`, duration: \u0026#39;30 minutes\u0026#39; } ], note: \u0026#39;Generic recipe - AI unavailable. Please customize.\u0026#39; }; }   AI Performance Metrics#\rTracking#\r// Save AI suggestion with metrics await ddb.put({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `USER#${userId}`, SK: `SUGGESTION#${new Date().toISOString()}`, suggestion_id: generateUUID(), ingredients_used: ingredients, requested_recipe_count: count, recipes_from_db: dbRecipes.length, recipes_from_ai: aiRecipes.length, invalid_ingredients: invalidIngredients, // Performance metrics db_query_time_ms: dbQueryTime, ai_generation_time_ms: aiGenerationTime, total_time_ms: totalTime, // Cost tracking ai_input_tokens: inputTokens, ai_output_tokens: outputTokens, estimated_cost_usd: (inputTokens * 0.00025 + outputTokens * 0.00125) / 1000, created_at: new Date().toISOString(), // For analytics GSI1PK: \u0026#39;ANALYTICS#AI_USAGE\u0026#39;, GSI1SK: `DATE#${new Date().toISOString().split(\u0026#39;T\u0026#39;)[0]}` } });Analytics Dashboard (Admin)#\rasync function getAIAnalytics(startDate, endDate) { const suggestions = await ddb.query({ TableName: \u0026#39;smart-cooking-data\u0026#39;, IndexName: \u0026#39;GSI1\u0026#39;, KeyConditionExpression: \u0026#39;GSI1PK = :pk AND GSI1SK BETWEEN :start AND :end\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: \u0026#39;ANALYTICS#AI_USAGE\u0026#39;, \u0026#39;:start\u0026#39;: `DATE#${startDate}`, \u0026#39;:end\u0026#39;: `DATE#${endDate}` } }); const stats = { total_suggestions: suggestions.Items.length, total_recipes_generated: suggestions.Items.reduce( (sum, item) =\u0026gt; sum + item.recipes_from_ai, 0 ), total_recipes_from_db: suggestions.Items.reduce( (sum, item) =\u0026gt; sum + item.recipes_from_db, 0 ), db_coverage_ratio: 0, avg_generation_time_ms: 0, total_cost_usd: suggestions.Items.reduce( (sum, item) =\u0026gt; sum + (item.estimated_cost_usd || 0), 0 ), invalid_ingredients_count: suggestions.Items.reduce( (sum, item) =\u0026gt; sum + (item.invalid_ingredients?.length || 0), 0 ) }; const totalRecipes = stats.total_recipes_generated + stats.total_recipes_from_db; stats.db_coverage_ratio = totalRecipes \u0026gt; 0 ? (stats.total_recipes_from_db / totalRecipes * 100).toFixed(1) + \u0026#39;%\u0026#39; : \u0026#39;0%\u0026#39;; stats.avg_generation_time_ms = Math.round( suggestions.Items.reduce( (sum, item) =\u0026gt; sum + (item.ai_generation_time_ms || 0), 0 ) / suggestions.Items.length ); return stats; }🎓 AI Learning \u0026amp; Improvement#\rAuto-Approval Feedback Loop#\rgraph TD\rA[AI Generate Recipe] --\u0026gt; B[User Cooks]\rB --\u0026gt; C[User Rates \u0026gt;= 4 stars]\rC --\u0026gt; D[Auto-Approve Recipe]\rD --\u0026gt; E[Add to Public DB]\rE --\u0026gt; F[Available for Future Queries]\rF --\u0026gt; G[Reduces AI Cost]\rG --\u0026gt; H[More Users Cook]\rH --\u0026gt; I[More Ratings]\rI --\u0026gt; J{Still \u0026gt;= 4 stars?}\rJ --\u0026gt;|Yes| K[Keep Approved]\rJ --\u0026gt;|No| L[Demote from Featured]Continuous Improvement#\r// After recipe approval, analyze for quality async function analyzeApprovedRecipe(recipeId) { const recipe = await getRecipe(recipeId); const ratings = await getRecipeRatings(recipeId); const analysis = { recipe_id: recipeId, average_rating: recipe.average_rating, rating_count: recipe.rating_count, was_ai_generated: recipe.is_ai_generated, cooking_method: recipe.cooking_method, cuisine_type: recipe.cuisine_type, // User feedback analysis positive_keywords: extractKeywords( ratings.filter(r =\u0026gt; r.rating \u0026gt;= 4).map(r =\u0026gt; r.comment) ), negative_keywords: extractKeywords( ratings.filter(r =\u0026gt; r.rating \u0026lt; 4).map(r =\u0026gt; r.comment) ), // Success factors success_factors: [] }; // Identify what worked if (recipe.average_rating \u0026gt;= 4.5) { analysis.success_factors.push(\u0026#39;high_quality\u0026#39;); } if (recipe.cooking_time_minutes \u0026lt;= 30) { analysis.success_factors.push(\u0026#39;quick_recipe\u0026#39;); } if (recipe.difficulty === \u0026#39;easy\u0026#39;) { analysis.success_factors.push(\u0026#39;easy_to_make\u0026#39;); } // Save for future prompt optimization await ddb.put({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: \u0026#39;ANALYTICS#RECIPE_SUCCESS\u0026#39;, SK: `RATING#${recipe.average_rating}#${recipeId}`, ...analysis, created_at: new Date().toISOString() } }); return analysis; }Related Documents#\r10 - Architecture 11 - Database 12 - API Spec 20 - Backend 30 - Cost Analysis "},{"id":13,"href":"/docs/dlc/20-backend/","title":"20 - Backend Implementation","section":"Docs","content":"Backend Implementation - Smart Cooking App#\r   Lambda Functions Architecture#\rFunction Overview#\rLambda Functions (11 total): 1. auth-handler (256MB, 10s) 2. recipe-crud (512MB, 30s) 3. ai-suggestion (1024MB, 60s) ⭐ Core 4. user-profile (256MB, 10s) 5. cooking-history (256MB, 10s) ⭐ New 6. rating-handler (256MB, 10s) ⭐ New 7. ingredient-validator (256MB, 10s) ⭐ New 8. social-friends (256MB, 10s) 9. posts-handler (512MB, 30s) 10. notifications (256MB, 10s) 11. admin-ops (512MB, 30s) Runtime: Node.js 20 (all functions) Deployment: AWS SAM or CDK   Core Lambda Functions#\r1. AI Suggestion Engine (ai-suggestion) ⭐#\rPurpose: Flexible DB/AI mix for recipe suggestions\n// Main handler exports.handler = async (event, context) =\u0026gt; { const { ingredients, recipe_count = 1 } = JSON.parse(event.body); const userId = event.requestContext.authorizer.claims.sub; try { // Step 1: Validate ingredients const validation = await validateIngredients(ingredients); if (validation.invalid.length === ingredients.length) { return errorResponse(400, \u0026#39;all_ingredients_invalid\u0026#39;, validation); } // Step 2: Get user context for AI personalization const userContext = await getUserContext(userId); // Step 3: Query DB for approved recipes (diverse categories) const dbRecipes = await queryDiverseRecipes( validation.valid, userContext, recipe_count ); // Step 4: Calculate AI gap const aiGap = Math.max(0, recipe_count - dbRecipes.length); // Step 5: Generate AI recipes if needed const aiRecipes = aiGap \u0026gt; 0 ? await generateAIRecipes(validation.valid, userContext, aiGap) : []; // Step 6: Save suggestion history await saveSuggestionHistory({ userId, ingredients: validation.valid, requestedCount: recipe_count, dbCount: dbRecipes.length, aiCount: aiRecipes.length, invalidIngredients: validation.invalid }); return successResponse({ suggestions: [...dbRecipes, ...aiRecipes], stats: { requested: recipe_count, from_database: dbRecipes.length, from_ai: aiRecipes.length }, warnings: validation.warnings }); } catch (error) { console.error(\u0026#39;AI Suggestion Error:\u0026#39;, error); return errorResponse(500, \u0026#39;ai_generation_failed\u0026#39;); } }; // Validate ingredients with master table async function validateIngredients(ingredients) { const valid = []; const invalid = []; const warnings = []; for (const ingredient of ingredients) { const normalized = normalizeText(ingredient); // Check exact match const exactMatch = await ddb.query({ TableName: process.env.DYNAMODB_TABLE, IndexName: \u0026#39;GSI2\u0026#39;, KeyConditionExpression: \u0026#39;GSI2PK = :pk AND GSI2SK = :sk\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: \u0026#39;INGREDIENT#SEARCH\u0026#39;, \u0026#39;:sk\u0026#39;: `NAME#${normalized}` } }); if (exactMatch.Items?.length \u0026gt; 0) { valid.push(exactMatch.Items[0].name); } else { // Fuzzy search const similar = await fuzzySearchIngredients(normalized); if (similar.length \u0026gt; 0 \u0026amp;\u0026amp; similar[0].confidence \u0026gt;= 0.8) { // Auto-correct valid.push(similar[0].name); warnings.push({ original: ingredient, corrected: similar[0].name, confidence: similar[0].confidence }); } else { // Invalid - log and report invalid.push(ingredient); await logInvalidIngredient(ingredient, userId); warnings.push({ ingredient, message: \u0026#39;Nguyên liệu không hợp lệ\u0026#39;, suggestions: similar.slice(0, 5).map(s =\u0026gt; s.name), reported: true }); } } } return { valid, invalid, warnings }; } // Query diverse recipes by categories async function queryDiverseRecipes(ingredients, userContext, count) { const categories = [\u0026#39;stir-fry\u0026#39;, \u0026#39;soup\u0026#39;, \u0026#39;steam\u0026#39;, \u0026#39;grill\u0026#39;, \u0026#39;bake\u0026#39;]; const results = []; // Try to get recipes from different categories for (const method of categories) { if (results.length \u0026gt;= count) break; const recipes = await ddb.query({ TableName: process.env.DYNAMODB_TABLE, IndexName: \u0026#39;GSI2\u0026#39;, KeyConditionExpression: \u0026#39;GSI2PK = :pk\u0026#39;, FilterExpression: \u0026#39;is_approved = :approved AND contains(ingredients_list, :ing)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `METHOD#${method}`, \u0026#39;:approved\u0026#39;: true, \u0026#39;:ing\u0026#39;: ingredients[0] // Main ingredient }, Limit: 1 }); if (recipes.Items?.length \u0026gt; 0) { results.push({ ...recipes.Items[0], source: \u0026#39;database\u0026#39;, match_score: calculateMatchScore(recipes.Items[0], ingredients) }); } } return results; } // Generate AI recipes with Bedrock async function generateAIRecipes(ingredients, userContext, count) { const recipes = []; const usedMethods = [\u0026#39;stir-fry\u0026#39;, \u0026#39;soup\u0026#39;, \u0026#39;steam\u0026#39;, \u0026#39;grill\u0026#39;, \u0026#39;bake\u0026#39;]; for (let i = 0; i \u0026lt; count; i++) { const method = usedMethods[i % usedMethods.length]; try { const recipe = await callBedrock(ingredients, userContext, method); recipes.push({ ...recipe, recipe_id: `ai-gen-${generateUUID()}`, source: \u0026#39;ai\u0026#39;, is_new: true, is_approved: false }); } catch (error) { console.error(`AI generation failed for ${method}:`, error); // Continue with other recipes } } return recipes; }2. Cooking History Handler (cooking-history) ⭐#\rPurpose: Track personal cooking sessions and favorites\nexports.handler = async (event, context) =\u0026gt; { const { httpMethod, pathParameters } = event; const userId = event.requestContext.authorizer.claims.sub; switch (httpMethod) { case \u0026#39;POST\u0026#39;: return await startCooking(event, userId); case \u0026#39;PUT\u0026#39;: return await completeCooking(event, userId, pathParameters.id); case \u0026#39;GET\u0026#39;: return await getCookingHistory(event, userId); case \u0026#39;DELETE\u0026#39;: return await deleteCookingHistory(userId, pathParameters.id); default: return errorResponse(405, \u0026#39;method_not_allowed\u0026#39;); } }; // Start cooking session async function startCooking(event, userId) { const { recipe_id, suggestion_id } = JSON.parse(event.body); const historyId = generateUUID(); await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: { PK: `USER#${userId}`, SK: `COOKING#${new Date().toISOString()}#${historyId}`, history_id: historyId, user_id: userId, recipe_id, suggestion_id, status: \u0026#39;cooking\u0026#39;, created_at: new Date().toISOString(), updated_at: new Date().toISOString() } }); return successResponse({ history_id: historyId, message: \u0026#39;Bắt đầu nấu ăn!\u0026#39; }); } // Complete cooking session async function completeCooking(event, userId, historyId) { await ddb.update({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `USER#${userId}`, SK: `COOKING#${historyId}` }, UpdateExpression: \u0026#39;SET #status = :status, cook_date = :date, updated_at = :updated\u0026#39;, ExpressionAttributeNames: { \u0026#39;#status\u0026#39;: \u0026#39;status\u0026#39; }, ExpressionAttributeValues: { \u0026#39;:status\u0026#39;: \u0026#39;completed\u0026#39;, \u0026#39;:date\u0026#39;: new Date().toISOString(), \u0026#39;:updated\u0026#39;: new Date().toISOString() } }); return successResponse({ message: \u0026#39;Hoàn thành! Vui lòng đánh giá món ăn.\u0026#39;, show_rating_form: true }); } // Get cooking history async function getCookingHistory(event, userId) { const { favorites } = event.queryStringParameters || {}; let filterExpression = undefined; if (favorites === \u0026#39;true\u0026#39;) { filterExpression = \u0026#39;is_favorite = :favorite\u0026#39;; } const result = await ddb.query({ TableName: process.env.DYNAMODB_TABLE, KeyConditionExpression: \u0026#39;PK = :pk AND begins_with(SK, :sk)\u0026#39;, FilterExpression: filterExpression, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `USER#${userId}`, \u0026#39;:sk\u0026#39;: \u0026#39;COOKING#\u0026#39;, ...(filterExpression \u0026amp;\u0026amp; { \u0026#39;:favorite\u0026#39;: true }) }, ScanIndexForward: false // Newest first }); return successResponse({ history: result.Items || [] }); }3. Rating Handler (rating-handler) ⭐#\rPurpose: Auto-approval system based on ratings\nexports.handler = async (event, context) =\u0026gt; { const { recipe_id } = event.pathParameters; const { rating, comment, history_id } = JSON.parse(event.body); const userId = event.requestContext.authorizer.claims.sub; // Validate rating if (rating \u0026lt; 1 || rating \u0026gt; 5) { return errorResponse(400, \u0026#39;invalid_rating\u0026#39;, \u0026#39;Rating must be 1-5\u0026#39;); } try { // Step 1: Save rating await saveRating(recipe_id, userId, rating, comment, history_id); // Step 2: Update cooking history if (history_id) { await updateCookingHistory(userId, history_id, rating); } // Step 3: Calculate average rating const avgRating = await calculateAverageRating(recipe_id); const ratingCount = await getRatingCount(recipe_id); // Step 4: Auto-approval check if (avgRating \u0026gt;= 4.0) { await approveRecipe(recipe_id, avgRating, ratingCount); return successResponse({ success: true, rating_saved: true, average_rating: avgRating, rating_count: ratingCount, auto_approved: true, message: \u0026#39;Công thức đã được thêm vào database!\u0026#39; }); } return successResponse({ success: true, rating_saved: true, average_rating: avgRating, rating_count: ratingCount, auto_approved: false, message: \u0026#39;Cảm ơn đánh giá của bạn!\u0026#39; }); } catch (error) { console.error(\u0026#39;Rating Error:\u0026#39;, error); return errorResponse(500, \u0026#39;rating_failed\u0026#39;); } }; // Auto-approve recipe async function approveRecipe(recipeId, avgRating, ratingCount) { await ddb.update({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `RECIPE#${recipeId}`, SK: \u0026#39;METADATA\u0026#39; }, UpdateExpression: ` SET is_approved = :approved, is_public = :public, approval_type = :type, average_rating = :rating, rating_count = :count, approved_at = :approved_at, updated_at = :updated_at `, ExpressionAttributeValues: { \u0026#39;:approved\u0026#39;: true, \u0026#39;:public\u0026#39;: true, \u0026#39;:type\u0026#39;: \u0026#39;auto_rating\u0026#39;, \u0026#39;:rating\u0026#39;: avgRating, \u0026#39;:count\u0026#39;: ratingCount, \u0026#39;:approved_at\u0026#39;: new Date().toISOString(), \u0026#39;:updated_at\u0026#39;: new Date().toISOString() } }); }4. Ingredient Validator (ingredient-validator) ⭐#\rPurpose: Validate ingredients and fuzzy search\nexports.handler = async (event, context) =\u0026gt; { const { ingredients } = JSON.parse(event.body); const userId = event.requestContext.authorizer.claims.sub; const validation = await validateIngredientsWithMaster(ingredients, userId); return successResponse(validation); }; // Fuzzy search for similar ingredients async function fuzzySearchIngredients(searchTerm) { // Simple fuzzy search implementation const allIngredients = await ddb.query({ TableName: process.env.DYNAMODB_TABLE, IndexName: \u0026#39;GSI1\u0026#39;, KeyConditionExpression: \u0026#39;GSI1PK = :pk\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: \u0026#39;INGREDIENT#ACTIVE\u0026#39; } }); const results = []; for (const item of allIngredients.Items || []) { const similarity = calculateSimilarity(searchTerm, item.normalized_name); if (similarity \u0026gt;= 0.3) { results.push({ name: item.name, confidence: similarity }); } } return results.sort((a, b) =\u0026gt; b.confidence - a.confidence); } // Log invalid ingredient for admin review async function logInvalidIngredient(ingredient, userId) { const normalized = normalizeText(ingredient); // Log to CloudWatch console.log(JSON.stringify({ level: \u0026#39;WARN\u0026#39;, event: \u0026#39;invalid_ingredient\u0026#39;, user_id: userId, ingredient, normalized, timestamp: new Date().toISOString() })); // Increment report count in database try { await ddb.update({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `INVALID_INGREDIENT#${normalized}`, SK: `USER#${userId}` }, UpdateExpression: \u0026#39;ADD report_count :inc SET updated_at = :updated\u0026#39;, ExpressionAttributeValues: { \u0026#39;:inc\u0026#39;: 1, \u0026#39;:updated\u0026#39;: new Date().toISOString() } }); } catch (error) { // Create new report entry await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: { PK: `INVALID_INGREDIENT#${normalized}`, SK: `USER#${userId}`, ingredient_name: ingredient, normalized_name: normalized, report_count: 1, created_at: new Date().toISOString(), updated_at: new Date().toISOString() } }); } }   Shared Utilities#\rDynamoDB Helper#\r// shared/dynamodb.js const { DynamoDBClient } = require(\u0026#39;@aws-sdk/client-dynamodb\u0026#39;); const { DynamoDBDocumentClient, QueryCommand, PutCommand, UpdateCommand } = require(\u0026#39;@aws-sdk/lib-dynamodb\u0026#39;); const client = new DynamoDBClient({}); const ddb = DynamoDBDocumentClient.from(client); module.exports = { query: (params) =\u0026gt; ddb.send(new QueryCommand(params)), put: (params) =\u0026gt; ddb.send(new PutCommand(params)), update: (params) =\u0026gt; ddb.send(new UpdateCommand(params)), // Add other operations as needed };Response Helpers#\r// shared/responses.js function successResponse(data, statusCode = 200) { return { statusCode, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type,Authorization\u0026#39; }, body: JSON.stringify(data) }; } function errorResponse(statusCode, error, message, details = {}) { return { statusCode, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39; }, body: JSON.stringify({ error, message, details, timestamp: new Date().toISOString() }) }; } module.exports = { successResponse, errorResponse };Bedrock Client#\r// shared/bedrock-client.js const { BedrockRuntimeClient, InvokeModelCommand } = require(\u0026#39;@aws-sdk/client-bedrock-runtime\u0026#39;); const client = new BedrockRuntimeClient({ region: \u0026#39;us-east-1\u0026#39; }); async function callBedrock(ingredients, userContext, cookingMethod) { const prompt = buildPrompt(ingredients, userContext, cookingMethod); const response = await client.send(new InvokeModelCommand({ modelId: \u0026#39;anthropic.claude-3-haiku-20240307-v1:0\u0026#39;, contentType: \u0026#39;application/json\u0026#39;, accept: \u0026#39;application/json\u0026#39;, body: JSON.stringify({ anthropic_version: \u0026#39;bedrock-2023-05-31\u0026#39;, max_tokens: 2048, messages: [{ role: \u0026#39;user\u0026#39;, content: prompt }] }) })); const responseBody = JSON.parse(new TextDecoder().decode(response.body)); return JSON.parse(responseBody.content[0].text); } function buildPrompt(ingredients, userContext, cookingMethod) { const age = userContext.birth_year ? new Date().getFullYear() - userContext.birth_year : null; return `Bạn là đầu bếp chuyên nghiệp. Tạo công thức với: **Nguyên liệu**: ${ingredients.join(\u0026#39;, \u0026#39;)} **Phương pháp**: ${cookingMethod} **Người dùng**: ${age ? `${age} tuổi` : \u0026#39;người lớn\u0026#39;}, ${userContext.gender || \u0026#39;không rõ giới tính\u0026#39;} **Quốc gia**: ${userContext.country || \u0026#39;Việt Nam\u0026#39;} **Dị ứng tránh**: ${userContext.allergies?.join(\u0026#39;, \u0026#39;) || \u0026#39;Không\u0026#39;} Trả về JSON: { \u0026#34;name\u0026#34;: \u0026#34;Tên món\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;${cookingMethod}\u0026#34;, \u0026#34;ingredients\u0026#34;: [{\u0026#34;ingredient_name\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;...\u0026#34;}], \u0026#34;instructions\u0026#34;: [{\u0026#34;step_number\u0026#34;: 1, \u0026#34;description\u0026#34;: \u0026#34;...\u0026#34;}] }`; } module.exports = { callBedrock };   Error Handling \u0026amp; Logging#\rCentralized Error Handler#\r// shared/error-handler.js class AppError extends Error { constructor(message, statusCode, errorCode) { super(message); this.statusCode = statusCode; this.errorCode = errorCode; this.isOperational = true; } } function handleError(error, context) { console.error(\u0026#39;Lambda Error:\u0026#39;, { error: error.message, stack: error.stack, context: context.functionName, requestId: context.awsRequestId }); if (error.isOperational) { return errorResponse(error.statusCode, error.errorCode, error.message); } return errorResponse(500, \u0026#39;internal_server_error\u0026#39;, \u0026#39;Something went wrong\u0026#39;); } module.exports = { AppError, handleError };Structured Logging#\r// shared/logger.js function log(level, message, metadata = {}) { console.log(JSON.stringify({ timestamp: new Date().toISOString(), level, message, ...metadata })); } module.exports = { info: (message, meta) =\u0026gt; log(\u0026#39;INFO\u0026#39;, message, meta), warn: (message, meta) =\u0026gt; log(\u0026#39;WARN\u0026#39;, message, meta), error: (message, meta) =\u0026gt; log(\u0026#39;ERROR\u0026#39;, message, meta) };Related Documents#\r10 - Architecture 11 - Database 12 - API Spec 21 - Frontend 22 - DevOps "},{"id":14,"href":"/docs/dlc/21-frontend/","title":"21 - Frontend Implementation","section":"Docs","content":"Frontend Implementation - Smart Cooking App#\r   Technology Stack#\rFramework: Node.js + Express.js Template Engine: EJS Styling: Tailwind CSS + Custom Components State Management: Client-side JavaScript Authentication: AWS Cognito SDK HTTP Client: Axios (client) + AWS SDK (server) Deployment: AWS Amplify Hosting   Project Structure#\rsmart-cooking-webapp/ ├── src/ │ ├── routes/ │ │ ├── index.js # Landing page │ │ ├── auth.js # Auth routes (login, register, verify) │ │ ├── dashboard.js # Dashboard \u0026amp; ingredients │ │ ├── recipes.js # Recipe routes (detail, search, suggestions) │ │ ├── cooking.js # Cooking history \u0026amp; sessions │ │ ├── social.js # Social feed, friends, profiles │ │ └── settings.js # Profile \u0026amp; privacy settings │ ├── views/ │ │ ├── layouts/ │ │ │ └── main.ejs # Main layout template │ │ ├── auth/ │ │ │ ├── login.ejs # Login page │ │ │ ├── register.ejs # Registration │ │ │ └── verify.ejs # Email verification │ │ ├── dashboard/ │ │ │ ├── index.ejs # User dashboard │ │ │ └── ingredients.ejs # Manage ingredients │ │ ├── recipes/ │ │ │ ├── detail.ejs # Recipe detail │ │ │ ├── search.ejs # Recipe search │ │ │ └── suggestions.ejs # AI suggestions │ │ ├── cooking/ │ │ │ ├── history.ejs # Cooking history │ │ │ └── session.ejs # Cooking session │ │ ├── social/ │ │ │ ├── feed.ejs # Social feed │ │ │ ├── friends.ejs # Friends list │ │ │ └── profile.ejs # User profile │ │ └── settings/ │ │ ├── profile.ejs # Profile settings │ │ └── privacy.ejs # Privacy settings │ ├── middleware/ │ │ ├── auth.js # Authentication middleware │ │ ├── validation.js # Input validation │ │ └── errorHandler.js # Error handling │ ├── services/ │ │ ├── apiClient.js # API client │ │ ├── authService.js # Auth helpers │ │ └── utils.js # Utilities │ └── public/ │ ├── css/ │ │ └── styles.css # Global styles │ ├── js/ │ │ ├── auth.js # Auth frontend logic │ │ ├── recipes.js # Recipe frontend logic │ │ └── ingredients.js # Ingredients frontend logic │ └── images/ ├── app.js # Express app setup ├── server.js # Server entry point └── package.json # Dependencies   Authentication Implementation#\rAuth Service (Node.js)#\r// src/services/authService.js const { CognitoIdentityProviderClient, InitiateAuthCommand, SignUpCommand } = require(\u0026#39;@aws-sdk/client-cognito-identity-provider\u0026#39;); const jwt = require(\u0026#39;jsonwebtoken\u0026#39;); class AuthService { constructor() { this.cognitoClient = new CognitoIdentityProviderClient({ region: process.env.AWS_REGION }); this.clientId = process.env.COGNITO_CLIENT_ID; } async login(email, password) { try { const command = new InitiateAuthCommand({ AuthFlow: \u0026#39;USER_PASSWORD_AUTH\u0026#39;, ClientId: this.clientId, AuthParameters: { USERNAME: email, PASSWORD: password } }); const result = await this.cognitoClient.send(command); return { accessToken: result.AuthenticationResult.AccessToken, refreshToken: result.AuthenticationResult.RefreshToken, idToken: result.AuthenticationResult.IdToken }; } catch (error) { console.error(\u0026#39;Login error:\u0026#39;, error); throw new Error(\u0026#39;Đăng nhập thất bại\u0026#39;); } } async register(userData) { try { const command = new SignUpCommand({ ClientId: this.clientId, Username: userData.email, Password: userData.password, UserAttributes: [ { Name: \u0026#39;email\u0026#39;, Value: userData.email }, { Name: \u0026#39;name\u0026#39;, Value: userData.fullName }, { Name: \u0026#39;custom:username\u0026#39;, Value: userData.username } ] }); const result = await this.cognitoClient.send(command); return result; } catch (error) { console.error(\u0026#39;Registration error:\u0026#39;, error); throw new Error(\u0026#39;Đăng ký thất bại\u0026#39;); } } verifyToken(token) { try { // Verify JWT token (simplified - in production use proper JWT verification) const decoded = jwt.decode(token); return decoded; } catch (error) { throw new Error(\u0026#39;Token không hợp lệ\u0026#39;); } } extractUserFromToken(token) { const decoded = this.verifyToken(token); return { id: decoded.sub, email: decoded.email, username: decoded[\u0026#39;custom:username\u0026#39;], fullName: decoded.name, role: decoded[\u0026#39;custom:role\u0026#39;] || \u0026#39;user\u0026#39; }; } } module.exports = new AuthService();Auth Middleware#\r// src/middleware/auth.js const authService = require(\u0026#39;../services/authService\u0026#39;); const requireAuth = (req, res, next) =\u0026gt; { const token = req.headers.authorization?.replace(\u0026#39;Bearer \u0026#39;, \u0026#39;\u0026#39;) || req.cookies.accessToken; if (!token) { return res.redirect(\u0026#39;/auth/login\u0026#39;); } try { const user = authService.extractUserFromToken(token); req.user = user; res.locals.user = user; next(); } catch (error) { res.clearCookie(\u0026#39;accessToken\u0026#39;); return res.redirect(\u0026#39;/auth/login\u0026#39;); } }; const optionalAuth = (req, res, next) =\u0026gt; { const token = req.headers.authorization?.replace(\u0026#39;Bearer \u0026#39;, \u0026#39;\u0026#39;) || req.cookies.accessToken; if (token) { try { const user = authService.extractUserFromToken(token); req.user = user; res.locals.user = user; } catch (error) { res.clearCookie(\u0026#39;accessToken\u0026#39;); } } next(); }; module.exports = { requireAuth, optionalAuth };Auth Routes#\r// src/routes/auth.js const express = require(\u0026#39;express\u0026#39;); const authService = require(\u0026#39;../services/authService\u0026#39;); const { body, validationResult } = require(\u0026#39;express-validator\u0026#39;); const router = express.Router(); // Login page router.get(\u0026#39;/login\u0026#39;, (req, res) =\u0026gt; { if (req.cookies.accessToken) { return res.redirect(\u0026#39;/dashboard\u0026#39;); } res.render(\u0026#39;auth/login\u0026#39;, { title: \u0026#39;Đăng nhập\u0026#39;, error: req.query.error }); }); // Login handler router.post(\u0026#39;/login\u0026#39;, [ body(\u0026#39;email\u0026#39;).isEmail().withMessage(\u0026#39;Email không hợp lệ\u0026#39;), body(\u0026#39;password\u0026#39;).isLength({ min: 8 }).withMessage(\u0026#39;Mật khẩu phải có ít nhất 8 ký tự\u0026#39;) ], async (req, res) =\u0026gt; { const errors = validationResult(req); if (!errors.isEmpty()) { return res.render(\u0026#39;auth/login\u0026#39;, { title: \u0026#39;Đăng nhập\u0026#39;, error: errors.array()[0].msg, email: req.body.email }); } try { const { email, password } = req.body; const tokens = await authService.login(email, password); // Set HTTP-only cookie res.cookie(\u0026#39;accessToken\u0026#39;, tokens.accessToken, { httpOnly: true, secure: process.env.NODE_ENV === \u0026#39;production\u0026#39;, maxAge: 24 * 60 * 60 * 1000 // 24 hours }); res.redirect(\u0026#39;/dashboard\u0026#39;); } catch (error) { res.render(\u0026#39;auth/login\u0026#39;, { title: \u0026#39;Đăng nhập\u0026#39;, error: error.message, email: req.body.email }); } }); // Register page router.get(\u0026#39;/register\u0026#39;, (req, res) =\u0026gt; { if (req.cookies.accessToken) { return res.redirect(\u0026#39;/dashboard\u0026#39;); } res.render(\u0026#39;auth/register\u0026#39;, { title: \u0026#39;Đăng ký tài khoản\u0026#39;, error: req.query.error }); }); // Register handler router.post(\u0026#39;/register\u0026#39;, [ body(\u0026#39;email\u0026#39;).isEmail().withMessage(\u0026#39;Email không hợp lệ\u0026#39;), body(\u0026#39;password\u0026#39;).isLength({ min: 8 }).withMessage(\u0026#39;Mật khẩu phải có ít nhất 8 ký tự\u0026#39;), body(\u0026#39;fullName\u0026#39;).notEmpty().withMessage(\u0026#39;Họ tên không được để trống\u0026#39;), body(\u0026#39;username\u0026#39;).isLength({ min: 3 }).withMessage(\u0026#39;Username phải có ít nhất 3 ký tự\u0026#39;) ], async (req, res) =\u0026gt; { const errors = validationResult(req); if (!errors.isEmpty()) { return res.render(\u0026#39;auth/register\u0026#39;, { title: \u0026#39;Đăng ký tài khoản\u0026#39;, error: errors.array()[0].msg, formData: req.body }); } try { const userData = req.body; await authService.register(userData); res.render(\u0026#39;auth/verify\u0026#39;, { title: \u0026#39;Xác thực email\u0026#39;, email: userData.email, message: \u0026#39;Vui lòng kiểm tra email để xác thực tài khoản\u0026#39; }); } catch (error) { res.render(\u0026#39;auth/register\u0026#39;, { title: \u0026#39;Đăng ký tài khoản\u0026#39;, error: error.message, formData: req.body }); } }); // Logout router.post(\u0026#39;/logout\u0026#39;, (req, res) =\u0026gt; { res.clearCookie(\u0026#39;accessToken\u0026#39;); res.redirect(\u0026#39;/\u0026#39;); }); module.exports = router;   Core Components#\rAI Suggestion Card#\r// components/recipes/SuggestionCard.tsx \u0026#39;use client\u0026#39;; import { useState } from \u0026#39;react\u0026#39;; import { Card, CardContent, CardHeader, CardTitle } from \u0026#39;@/components/ui/card\u0026#39;; import { Button } from \u0026#39;@/components/ui/button\u0026#39;; import { Badge } from \u0026#39;@/components/ui/badge\u0026#39;; import { Clock, Users, Star, Sparkles } from \u0026#39;lucide-react\u0026#39;; import { Recipe } from \u0026#39;@/types/recipe\u0026#39;; interface SuggestionCardProps { recipe: Recipe; onStartCooking: (recipeId: string) =\u0026gt; void; } export default function SuggestionCard({ recipe, onStartCooking }: SuggestionCardProps) { const [isStarting, setIsStarting] = useState(false); const handleStartCooking = async () =\u0026gt; { setIsStarting(true); try { await onStartCooking(recipe.recipe_id); } finally { setIsStarting(false); } }; return ( \u0026lt;Card className=\u0026#34;h-full\u0026#34;\u0026gt; \u0026lt;CardHeader\u0026gt; \u0026lt;div className=\u0026#34;flex items-start justify-between\u0026#34;\u0026gt; \u0026lt;CardTitle className=\u0026#34;text-lg\u0026#34;\u0026gt;{recipe.name}\u0026lt;/CardTitle\u0026gt; \u0026lt;div className=\u0026#34;flex gap-1\u0026#34;\u0026gt; {recipe.source === \u0026#39;ai\u0026#39; \u0026amp;\u0026amp; ( \u0026lt;Badge variant=\u0026#34;secondary\u0026#34; className=\u0026#34;flex items-center gap-1\u0026#34;\u0026gt; \u0026lt;Sparkles className=\u0026#34;h-3 w-3\u0026#34; /\u0026gt; AI \u0026lt;/Badge\u0026gt; )} {recipe.is_new \u0026amp;\u0026amp; ( \u0026lt;Badge variant=\u0026#34;outline\u0026#34;\u0026gt;Mới\u0026lt;/Badge\u0026gt; )} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/CardHeader\u0026gt; \u0026lt;CardContent className=\u0026#34;space-y-4\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex items-center gap-4 text-sm text-muted-foreground\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex items-center gap-1\u0026#34;\u0026gt; \u0026lt;Clock className=\u0026#34;h-4 w-4\u0026#34; /\u0026gt; {recipe.prep_time_minutes + recipe.cook_time_minutes} phút \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;flex items-center gap-1\u0026#34;\u0026gt; \u0026lt;Users className=\u0026#34;h-4 w-4\u0026#34; /\u0026gt; {recipe.servings} người \u0026lt;/div\u0026gt; {recipe.average_rating \u0026amp;\u0026amp; ( \u0026lt;div className=\u0026#34;flex items-center gap-1\u0026#34;\u0026gt; \u0026lt;Star className=\u0026#34;h-4 w-4 fill-yellow-400 text-yellow-400\u0026#34; /\u0026gt; {recipe.average_rating} \u0026lt;/div\u0026gt; )} \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;space-y-2\u0026#34;\u0026gt; \u0026lt;h4 className=\u0026#34;font-medium\u0026#34;\u0026gt;Nguyên liệu:\u0026lt;/h4\u0026gt; \u0026lt;div className=\u0026#34;flex flex-wrap gap-1\u0026#34;\u0026gt; {recipe.ingredients?.slice(0, 3).map((ing, index) =\u0026gt; ( \u0026lt;Badge key={index} variant=\u0026#34;outline\u0026#34; className=\u0026#34;text-xs\u0026#34;\u0026gt; {ing.ingredient_name} \u0026lt;/Badge\u0026gt; ))} {recipe.ingredients?.length \u0026gt; 3 \u0026amp;\u0026amp; ( \u0026lt;Badge variant=\u0026#34;outline\u0026#34; className=\u0026#34;text-xs\u0026#34;\u0026gt; +{recipe.ingredients.length - 3} khác \u0026lt;/Badge\u0026gt; )} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;space-y-2\u0026#34;\u0026gt; \u0026lt;h4 className=\u0026#34;font-medium\u0026#34;\u0026gt;Phương pháp:\u0026lt;/h4\u0026gt; \u0026lt;Badge variant=\u0026#34;secondary\u0026#34;\u0026gt;{recipe.cooking_method}\u0026lt;/Badge\u0026gt; \u0026lt;/div\u0026gt; {recipe.source === \u0026#39;ai\u0026#39; \u0026amp;\u0026amp; ( \u0026lt;div className=\u0026#34;text-sm text-muted-foreground bg-blue-50 p-2 rounded\u0026#34;\u0026gt;    Món mới từ AI - Hãy thử và đánh giá để giúp cộng đồng! \u0026lt;/div\u0026gt; )} \u0026lt;Button onClick={handleStartCooking} className=\u0026#34;w-full\u0026#34; disabled={isStarting} \u0026gt; {isStarting ? \u0026#39;Đang bắt đầu...\u0026#39; : \u0026#39;Bắt đầu nấu\u0026#39;} \u0026lt;/Button\u0026gt; \u0026lt;/CardContent\u0026gt; \u0026lt;/Card\u0026gt; ); }Ingredient Input Component#\r// components/ingredients/IngredientInput.tsx \u0026#39;use client\u0026#39;; import { useState } from \u0026#39;react\u0026#39;; import { useForm } from \u0026#39;react-hook-form\u0026#39;; import { Button } from \u0026#39;@/components/ui/button\u0026#39;; import { Input } from \u0026#39;@/components/ui/input\u0026#39;; import { Alert, AlertDescription } from \u0026#39;@/components/ui/alert\u0026#39;; import { Badge } from \u0026#39;@/components/ui/badge\u0026#39;; import { X, Plus, AlertTriangle } from \u0026#39;lucide-react\u0026#39;; import { useIngredientStore } from \u0026#39;@/lib/stores/ingredientStore\u0026#39;; export default function IngredientInput() { const [inputValue, setInputValue] = useState(\u0026#39;\u0026#39;); const [validationResult, setValidationResult] = useState\u0026lt;any\u0026gt;(null); const { addIngredient, validateIngredients } = useIngredientStore(); const handleValidate = async () =\u0026gt; { if (!inputValue.trim()) return; try { const result = await validateIngredients([inputValue.trim()]); setValidationResult(result); } catch (error) { console.error(\u0026#39;Validation error:\u0026#39;, error); } }; const handleAdd = async (ingredientName: string) =\u0026gt; { try { await addIngredient(ingredientName); setInputValue(\u0026#39;\u0026#39;); setValidationResult(null); } catch (error) { console.error(\u0026#39;Add ingredient error:\u0026#39;, error); } }; const handleAcceptCorrection = (corrected: string) =\u0026gt; { handleAdd(corrected); }; return ( \u0026lt;div className=\u0026#34;space-y-4\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex gap-2\u0026#34;\u0026gt; \u0026lt;Input placeholder=\u0026#34;Nhập tên nguyên liệu...\u0026#34; value={inputValue} onChange={(e) =\u0026gt; setInputValue(e.target.value)} onKeyPress={(e) =\u0026gt; e.key === \u0026#39;Enter\u0026#39; \u0026amp;\u0026amp; handleValidate()} /\u0026gt; \u0026lt;Button onClick={handleValidate} disabled={!inputValue.trim()}\u0026gt; \u0026lt;Plus className=\u0026#34;h-4 w-4\u0026#34; /\u0026gt; \u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; {validationResult \u0026amp;\u0026amp; ( \u0026lt;div className=\u0026#34;space-y-3\u0026#34;\u0026gt; {/* Valid ingredients */} {validationResult.valid?.map((ingredient: string, index: number) =\u0026gt; ( \u0026lt;Alert key={index} className=\u0026#34;border-green-200 bg-green-50\u0026#34;\u0026gt; \u0026lt;AlertDescription className=\u0026#34;flex items-center justify-between\u0026#34;\u0026gt; \u0026lt;span\u0026gt;✅ \u0026#34;{ingredient}\u0026#34; hợp lệ\u0026lt;/span\u0026gt; \u0026lt;Button size=\u0026#34;sm\u0026#34; onClick={() =\u0026gt; handleAdd(ingredient)}\u0026gt; Thêm \u0026lt;/Button\u0026gt; \u0026lt;/AlertDescription\u0026gt; \u0026lt;/Alert\u0026gt; ))} {/* Corrected ingredients */} {validationResult.corrected?.map((item: any, index: number) =\u0026gt; ( \u0026lt;Alert key={index} className=\u0026#34;border-yellow-200 bg-yellow-50\u0026#34;\u0026gt; \u0026lt;AlertTriangle className=\u0026#34;h-4 w-4\u0026#34; /\u0026gt; \u0026lt;AlertDescription className=\u0026#34;flex items-center justify-between\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Bạn có muốn dùng \u0026#34;{item.matched}\u0026#34; thay vì \u0026#34;{item.original}\u0026#34;?\u0026lt;/p\u0026gt; \u0026lt;p className=\u0026#34;text-xs text-muted-foreground\u0026#34;\u0026gt; Độ chính xác: {Math.round(item.confidence * 100)}% \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;flex gap-2\u0026#34;\u0026gt; \u0026lt;Button size=\u0026#34;sm\u0026#34; variant=\u0026#34;outline\u0026#34; onClick={() =\u0026gt; setValidationResult(null)} \u0026gt; Bỏ qua \u0026lt;/Button\u0026gt; \u0026lt;Button size=\u0026#34;sm\u0026#34; onClick={() =\u0026gt; handleAcceptCorrection(item.matched)} \u0026gt; Chấp nhận \u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/AlertDescription\u0026gt; \u0026lt;/Alert\u0026gt; ))} {/* Invalid ingredients with suggestions */} {validationResult.suggestions?.map((item: any, index: number) =\u0026gt; ( \u0026lt;Alert key={index} variant=\u0026#34;destructive\u0026#34;\u0026gt; \u0026lt;X className=\u0026#34;h-4 w-4\u0026#34; /\u0026gt; \u0026lt;AlertDescription\u0026gt; \u0026lt;p\u0026gt;❌ Không tìm thấy \u0026#34;{item.original}\u0026#34;\u0026lt;/p\u0026gt; {item.similar?.length \u0026gt; 0 \u0026amp;\u0026amp; ( \u0026lt;div className=\u0026#34;mt-2\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;text-xs\u0026#34;\u0026gt;Có thể bạn muốn:\u0026lt;/p\u0026gt; \u0026lt;div className=\u0026#34;flex flex-wrap gap-1 mt-1\u0026#34;\u0026gt; {item.similar.slice(0, 5).map((suggestion: string, i: number) =\u0026gt; ( \u0026lt;Badge key={i} variant=\u0026#34;outline\u0026#34; className=\u0026#34;cursor-pointer hover:bg-gray-100\u0026#34; onClick={() =\u0026gt; handleAdd(suggestion)} \u0026gt; {suggestion} \u0026lt;/Badge\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; )} \u0026lt;/AlertDescription\u0026gt; \u0026lt;/Alert\u0026gt; ))} \u0026lt;/div\u0026gt; )} \u0026lt;/div\u0026gt; ); }Cooking History Card#\r// components/cooking/HistoryCard.tsx \u0026#39;use client\u0026#39;; import { useState } from \u0026#39;react\u0026#39;; import { Card, CardContent, CardHeader, CardTitle } from \u0026#39;@/components/ui/card\u0026#39;; import { Button } from \u0026#39;@/components/ui/button\u0026#39;; import { Badge } from \u0026#39;@/components/ui/badge\u0026#39;; import { Star, Heart, Clock, Calendar } from \u0026#39;lucide-react\u0026#39;; import { CookingHistory } from \u0026#39;@/types/recipe\u0026#39;; import RatingModal from \u0026#39;./RatingModal\u0026#39;; interface HistoryCardProps { history: CookingHistory; onToggleFavorite: (historyId: string, isFavorite: boolean) =\u0026gt; void; onRate: (historyId: string, rating: number, comment?: string) =\u0026gt; void; } export default function HistoryCard({ history, onToggleFavorite, onRate }: HistoryCardProps) { const [showRatingModal, setShowRatingModal] = useState(false); const formatDate = (dateString: string) =\u0026gt; { return new Date(dateString).toLocaleDateString(\u0026#39;vi-VN\u0026#39;); }; const getStatusBadge = (status: string) =\u0026gt; { const variants = { \u0026#39;completed\u0026#39;: \u0026#39;default\u0026#39;, \u0026#39;cooking\u0026#39;: \u0026#39;secondary\u0026#39;, \u0026#39;planned\u0026#39;: \u0026#39;outline\u0026#39; } as const; const labels = { \u0026#39;completed\u0026#39;: \u0026#39;Hoàn thành\u0026#39;, \u0026#39;cooking\u0026#39;: \u0026#39;Đang nấu\u0026#39;, \u0026#39;planned\u0026#39;: \u0026#39;Dự định\u0026#39; }; return ( \u0026lt;Badge variant={variants[status as keyof typeof variants]}\u0026gt; {labels[status as keyof typeof labels]} \u0026lt;/Badge\u0026gt; ); }; return ( \u0026lt;\u0026gt; \u0026lt;Card\u0026gt; \u0026lt;CardHeader\u0026gt; \u0026lt;div className=\u0026#34;flex items-start justify-between\u0026#34;\u0026gt; \u0026lt;CardTitle className=\u0026#34;text-lg\u0026#34;\u0026gt;{history.recipe_name}\u0026lt;/CardTitle\u0026gt; \u0026lt;div className=\u0026#34;flex items-center gap-2\u0026#34;\u0026gt; {getStatusBadge(history.status)} \u0026lt;Button variant=\u0026#34;ghost\u0026#34; size=\u0026#34;sm\u0026#34; onClick={() =\u0026gt; onToggleFavorite(history.history_id, !history.is_favorite)} \u0026gt; \u0026lt;Heart className={`h-4 w-4 ${history.is_favorite ? \u0026#39;fill-red-500 text-red-500\u0026#39; : \u0026#39;\u0026#39;}`} /\u0026gt; \u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/CardHeader\u0026gt; \u0026lt;CardContent className=\u0026#34;space-y-3\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex items-center gap-4 text-sm text-muted-foreground\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex items-center gap-1\u0026#34;\u0026gt; \u0026lt;Calendar className=\u0026#34;h-4 w-4\u0026#34; /\u0026gt; {formatDate(history.cook_date || history.created_at)} \u0026lt;/div\u0026gt; {history.personal_rating \u0026amp;\u0026amp; ( \u0026lt;div className=\u0026#34;flex items-center gap-1\u0026#34;\u0026gt; \u0026lt;Star className=\u0026#34;h-4 w-4 fill-yellow-400 text-yellow-400\u0026#34; /\u0026gt; {history.personal_rating}/5 \u0026lt;/div\u0026gt; )} \u0026lt;/div\u0026gt; {history.personal_notes \u0026amp;\u0026amp; ( \u0026lt;div className=\u0026#34;text-sm bg-gray-50 p-2 rounded\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;font-medium\u0026#34;\u0026gt;Ghi chú:\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{history.personal_notes}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; )} \u0026lt;div className=\u0026#34;flex gap-2\u0026#34;\u0026gt; {history.status === \u0026#39;completed\u0026#39; \u0026amp;\u0026amp; !history.personal_rating \u0026amp;\u0026amp; ( \u0026lt;Button size=\u0026#34;sm\u0026#34; onClick={() =\u0026gt; setShowRatingModal(true)} \u0026gt; Đánh giá món ăn \u0026lt;/Button\u0026gt; )} \u0026lt;Button variant=\u0026#34;outline\u0026#34; size=\u0026#34;sm\u0026#34;\u0026gt; Xem công thức \u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/CardContent\u0026gt; \u0026lt;/Card\u0026gt; \u0026lt;RatingModal isOpen={showRatingModal} onClose={() =\u0026gt; setShowRatingModal(false)} recipeName={history.recipe_name} onSubmit={(rating, comment) =\u0026gt; { onRate(history.history_id, rating, comment); setShowRatingModal(false); }} /\u0026gt; \u0026lt;/\u0026gt; ); }   State Management#\rRecipe Store#\r// lib/stores/recipeStore.ts import { create } from \u0026#39;zustand\u0026#39;; import { api } from \u0026#39;@/lib/api\u0026#39;; import { Recipe, AISuggestion } from \u0026#39;@/types/recipe\u0026#39;; interface RecipeState { suggestions: Recipe[]; isLoadingSuggestions: boolean; getSuggestions: (ingredients: string[], count?: number) =\u0026gt; Promise\u0026lt;void\u0026gt;; startCooking: (recipeId: string, suggestionId?: string) =\u0026gt; Promise\u0026lt;string\u0026gt;; completeCooking: (historyId: string) =\u0026gt; Promise\u0026lt;void\u0026gt;; rateRecipe: (recipeId: string, rating: number, comment?: string, historyId?: string) =\u0026gt; Promise\u0026lt;any\u0026gt;; } export const useRecipeStore = create\u0026lt;RecipeState\u0026gt;((set, get) =\u0026gt; ({ suggestions: [], isLoadingSuggestions: false, getSuggestions: async (ingredients: string[], count = 1) =\u0026gt; { set({ isLoadingSuggestions: true }); try { const response = await api.post(\u0026#39;/ai/suggest\u0026#39;, { ingredients, recipe_count: count }); set({ suggestions: response.data.suggestions, isLoadingSuggestions: false }); } catch (error) { console.error(\u0026#39;Get suggestions error:\u0026#39;, error); set({ isLoadingSuggestions: false }); throw error; } }, startCooking: async (recipeId: string, suggestionId?: string) =\u0026gt; { const response = await api.post(\u0026#39;/cooking/start\u0026#39;, { recipe_id: recipeId, suggestion_id: suggestionId }); return response.data.history_id; }, completeCooking: async (historyId: string) =\u0026gt; { await api.put(`/cooking/${historyId}/complete`); }, rateRecipe: async (recipeId: string, rating: number, comment?: string, historyId?: string) =\u0026gt; { const response = await api.post(`/recipes/${recipeId}/rate`, { rating, comment, history_id: historyId }); return response.data; } }));Related Documents#\r10 - Architecture 20 - Backend 22 - DevOps 40 - Auth "},{"id":15,"href":"/docs/dlc/22-devops/","title":"22 - DevOps \u0026 Deployment","section":"Docs","content":"DevOps \u0026amp; Deployment - Smart Cooking App#\r   Deployment Strategy#\rInfrastructure as Code (IaC)#\rTool: AWS CDK (TypeScript) Alternative: AWS SAM Reason: Better TypeScript integration, more flexible than SAM Structure: - cdk/ ├── lib/ │ ├── database-stack.ts # DynamoDB tables │ ├── lambda-stack.ts # Lambda functions │ ├── api-stack.ts # API Gateway │ ├── auth-stack.ts # Cognito │ ├── storage-stack.ts # S3 buckets │ ├── monitoring-stack.ts # CloudWatch, X-Ray │ └── main-stack.ts # Main orchestration ├── bin/ │ └── app.ts # CDK app entry └── package.jsonEnvironment Strategy#\rEnvironments: - dev: Development (personal) - staging: Pre-production testing - prod: Production Naming Convention: - Resources: smart-cooking-{env}-{resource} - Example: smart-cooking-prod-api-gateway   CI/CD Pipeline#\rFrontend Pipeline (AWS Amplify)#\r# amplify.yml version: 1 applications: - frontend: phases: preBuild: commands: - npm ci build: commands: - npm run build - npm start \u0026amp; - sleep 5 - pkill -f \u0026#34;node\u0026#34; artifacts: baseDirectory: . files: - \u0026#39;**/*\u0026#39; excludePaths: - node_modules/**/* - .git/**/* cache: paths: - node_modules/**/* customHeaders: - pattern: \u0026#39;**/*\u0026#39; headers: - key: \u0026#39;Strict-Transport-Security\u0026#39; value: \u0026#39;max-age=31536000; includeSubDomains\u0026#39; - key: \u0026#39;X-Content-Type-Options\u0026#39; value: \u0026#39;nosniff\u0026#39; - key: \u0026#39;X-Frame-Options\u0026#39; value: \u0026#39;DENY\u0026#39; environments: main: environmentVariables: API_URL: https://api.smartcooking.app NODE_ENV: production PORT: 3000 develop: environmentVariables: API_URL: https://api-dev.smartcooking.app NODE_ENV: development PORT: 3000Backend Pipeline (GitHub Actions)#\r# .github/workflows/deploy.yml name: Deploy Backend on: push: branches: [main, develop] pull_request: branches: [main] env: AWS_REGION: us-east-1 jobs: test: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Setup Node.js uses: actions/setup-node@v4 with: node-version: \u0026#39;20\u0026#39; cache: \u0026#39;npm\u0026#39; - name: Install dependencies run: npm ci - name: Run tests run: npm test - name: Run linting run: npm run lint deploy-dev: if: github.ref == \u0026#39;refs/heads/develop\u0026#39; needs: test runs-on: ubuntu-latest environment: development steps: - uses: actions/checkout@v4 - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v4 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ${{ env.AWS_REGION }} - name: Setup Node.js uses: actions/setup-node@v4 with: node-version: \u0026#39;20\u0026#39; cache: \u0026#39;npm\u0026#39; - name: Install dependencies run: npm ci - name: Deploy CDK stack run: | cd cdk npm ci npx cdk deploy --all --require-approval never env: ENVIRONMENT: dev deploy-prod: if: github.ref == \u0026#39;refs/heads/main\u0026#39; needs: test runs-on: ubuntu-latest environment: production steps: - uses: actions/checkout@v4 - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v4 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }} aws-region: ${{ env.AWS_REGION }} - name: Setup Node.js uses: actions/setup-node@v4 with: node-version: \u0026#39;20\u0026#39; cache: \u0026#39;npm\u0026#39; - name: Install dependencies run: npm ci - name: Deploy CDK stack run: | cd cdk npm ci npx cdk deploy --all --require-approval never env: ENVIRONMENT: prod   Infrastructure Code#\rMain CDK Stack#\r// cdk/lib/main-stack.ts import * as cdk from \u0026#39;aws-cdk-lib\u0026#39;; import { Construct } from \u0026#39;constructs\u0026#39;; import { DatabaseStack } from \u0026#39;./database-stack\u0026#39;; import { LambdaStack } from \u0026#39;./lambda-stack\u0026#39;; import { ApiStack } from \u0026#39;./api-stack\u0026#39;; import { AuthStack } from \u0026#39;./auth-stack\u0026#39;; import { StorageStack } from \u0026#39;./storage-stack\u0026#39;; import { MonitoringStack } from \u0026#39;./monitoring-stack\u0026#39;; export class MainStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); const env = process.env.ENVIRONMENT || \u0026#39;dev\u0026#39;; // Database const databaseStack = new DatabaseStack(this, \u0026#39;Database\u0026#39;, { environment: env }); // Storage const storageStack = new StorageStack(this, \u0026#39;Storage\u0026#39;, { environment: env }); // Auth const authStack = new AuthStack(this, \u0026#39;Auth\u0026#39;, { environment: env }); // Lambda Functions const lambdaStack = new LambdaStack(this, \u0026#39;Lambda\u0026#39;, { environment: env, table: databaseStack.table, userPool: authStack.userPool, buckets: storageStack.buckets }); // API Gateway const apiStack = new ApiStack(this, \u0026#39;Api\u0026#39;, { environment: env, lambdaFunctions: lambdaStack.functions, userPool: authStack.userPool }); // Monitoring new MonitoringStack(this, \u0026#39;Monitoring\u0026#39;, { environment: env, api: apiStack.api, lambdaFunctions: lambdaStack.functions }); // Outputs new cdk.CfnOutput(this, \u0026#39;ApiUrl\u0026#39;, { value: apiStack.api.url, description: \u0026#39;API Gateway URL\u0026#39; }); new cdk.CfnOutput(this, \u0026#39;UserPoolId\u0026#39;, { value: authStack.userPool.userPoolId, description: \u0026#39;Cognito User Pool ID\u0026#39; }); } }Lambda Stack#\r// cdk/lib/lambda-stack.ts import * as cdk from \u0026#39;aws-cdk-lib\u0026#39;; import * as lambda from \u0026#39;aws-cdk-lib/aws-lambda\u0026#39;; import * as dynamodb from \u0026#39;aws-cdk-lib/aws-dynamodb\u0026#39;; import * as cognito from \u0026#39;aws-cdk-lib/aws-cognito\u0026#39;; import * as s3 from \u0026#39;aws-cdk-lib/aws-s3\u0026#39;; import { Construct } from \u0026#39;constructs\u0026#39;; interface LambdaStackProps { environment: string; table: dynamodb.Table; userPool: cognito.UserPool; buckets: { [key: string]: s3.Bucket }; } export class LambdaStack extends Construct { public readonly functions: { [key: string]: lambda.Function }; constructor(scope: Construct, id: string, props: LambdaStackProps) { super(scope, id); const commonEnvironment = { DYNAMODB_TABLE: props.table.tableName, USER_POOL_ID: props.userPool.userPoolId, ENVIRONMENT: props.environment }; // AI Suggestion Function (Most important) const aiSuggestionFunction = new lambda.Function(this, \u0026#39;AiSuggestion\u0026#39;, { functionName: `smart-cooking-${props.environment}-ai-suggestion`, runtime: lambda.Runtime.NODEJS_20_X, handler: \u0026#39;index.handler\u0026#39;, code: lambda.Code.fromAsset(\u0026#39;lambda-functions/ai-suggestion\u0026#39;), memorySize: 1024, timeout: cdk.Duration.seconds(60), environment: { ...commonEnvironment, BEDROCK_MODEL_ID: \u0026#39;anthropic.claude-3-haiku-20240307-v1:0\u0026#39; }, tracing: lambda.Tracing.ACTIVE }); // Cooking History Function const cookingHistoryFunction = new lambda.Function(this, \u0026#39;CookingHistory\u0026#39;, { functionName: `smart-cooking-${props.environment}-cooking-history`, runtime: lambda.Runtime.NODEJS_20_X, handler: \u0026#39;index.handler\u0026#39;, code: lambda.Code.fromAsset(\u0026#39;lambda-functions/cooking-history\u0026#39;), memorySize: 256, timeout: cdk.Duration.seconds(10), environment: commonEnvironment, tracing: lambda.Tracing.ACTIVE }); // Rating Handler Function const ratingHandlerFunction = new lambda.Function(this, \u0026#39;RatingHandler\u0026#39;, { functionName: `smart-cooking-${props.environment}-rating-handler`, runtime: lambda.Runtime.NODEJS_20_X, handler: \u0026#39;index.handler\u0026#39;, code: lambda.Code.fromAsset(\u0026#39;lambda-functions/rating-handler\u0026#39;), memorySize: 256, timeout: cdk.Duration.seconds(10), environment: commonEnvironment, tracing: lambda.Tracing.ACTIVE }); // Ingredient Validator Function const ingredientValidatorFunction = new lambda.Function(this, \u0026#39;IngredientValidator\u0026#39;, { functionName: `smart-cooking-${props.environment}-ingredient-validator`, runtime: lambda.Runtime.NODEJS_20_X, handler: \u0026#39;index.handler\u0026#39;, code: lambda.Code.fromAsset(\u0026#39;lambda-functions/ingredient-validator\u0026#39;), memorySize: 256, timeout: cdk.Duration.seconds(10), environment: commonEnvironment, tracing: lambda.Tracing.ACTIVE }); // Grant permissions props.table.grantReadWriteData(aiSuggestionFunction); props.table.grantReadWriteData(cookingHistoryFunction); props.table.grantReadWriteData(ratingHandlerFunction); props.table.grantReadWriteData(ingredientValidatorFunction); // Grant Bedrock permissions to AI function aiSuggestionFunction.addToRolePolicy( new cdk.aws_iam.PolicyStatement({ effect: cdk.aws_iam.Effect.ALLOW, actions: [\u0026#39;bedrock:InvokeModel\u0026#39;], resources: [\u0026#39;arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-*\u0026#39;] }) ); this.functions = { aiSuggestion: aiSuggestionFunction, cookingHistory: cookingHistoryFunction, ratingHandler: ratingHandlerFunction, ingredientValidator: ingredientValidatorFunction }; } }Database Stack#\r// cdk/lib/database-stack.ts import * as cdk from \u0026#39;aws-cdk-lib\u0026#39;; import * as dynamodb from \u0026#39;aws-cdk-lib/aws-dynamodb\u0026#39;; import { Construct } from \u0026#39;constructs\u0026#39;; interface DatabaseStackProps { environment: string; } export class DatabaseStack extends Construct { public readonly table: dynamodb.Table; constructor(scope: Construct, id: string, props: DatabaseStackProps) { super(scope, id); // Single table design this.table = new dynamodb.Table(this, \u0026#39;SmartCookingTable\u0026#39;, { tableName: `smart-cooking-${props.environment}-data`, partitionKey: { name: \u0026#39;PK\u0026#39;, type: dynamodb.AttributeType.STRING }, sortKey: { name: \u0026#39;SK\u0026#39;, type: dynamodb.AttributeType.STRING }, billingMode: dynamodb.BillingMode.ON_DEMAND, encryption: dynamodb.TableEncryption.AWS_MANAGED, pointInTimeRecovery: props.environment === \u0026#39;prod\u0026#39;, removalPolicy: props.environment === \u0026#39;prod\u0026#39; ? cdk.RemovalPolicy.RETAIN : cdk.RemovalPolicy.DESTROY, // Global Secondary Indexes globalSecondaryIndexes: [ { indexName: \u0026#39;GSI1\u0026#39;, partitionKey: { name: \u0026#39;GSI1PK\u0026#39;, type: dynamodb.AttributeType.STRING }, sortKey: { name: \u0026#39;GSI1SK\u0026#39;, type: dynamodb.AttributeType.STRING } }, { indexName: \u0026#39;GSI2\u0026#39;, partitionKey: { name: \u0026#39;GSI2PK\u0026#39;, type: dynamodb.AttributeType.STRING }, sortKey: { name: \u0026#39;GSI2SK\u0026#39;, type: dynamodb.AttributeType.STRING } }, { indexName: \u0026#39;GSI3\u0026#39;, partitionKey: { name: \u0026#39;GSI3PK\u0026#39;, type: dynamodb.AttributeType.STRING }, sortKey: { name: \u0026#39;GSI3SK\u0026#39;, type: dynamodb.AttributeType.STRING } } ] }); // Add TTL attribute for auto-cleanup this.table.addGlobalSecondaryIndex({ indexName: \u0026#39;TTL-Index\u0026#39;, partitionKey: { name: \u0026#39;ttl\u0026#39;, type: dynamodb.AttributeType.NUMBER } }); } }   Monitoring \u0026amp; Logging#\rCloudWatch Dashboard#\r// cdk/lib/monitoring-stack.ts import * as cdk from \u0026#39;aws-cdk-lib\u0026#39;; import * as cloudwatch from \u0026#39;aws-cdk-lib/aws-cloudwatch\u0026#39;; import * as lambda from \u0026#39;aws-cdk-lib/aws-lambda\u0026#39;; import * as apigateway from \u0026#39;aws-cdk-lib/aws-apigateway\u0026#39;; import * as sns from \u0026#39;aws-cdk-lib/aws-sns\u0026#39;; import { Construct } from \u0026#39;constructs\u0026#39;; interface MonitoringStackProps { environment: string; api: apigateway.RestApi; lambdaFunctions: { [key: string]: lambda.Function }; } export class MonitoringStack extends Construct { constructor(scope: Construct, id: string, props: MonitoringStackProps) { super(scope, id); // SNS Topic for alerts const alertTopic = new sns.Topic(this, \u0026#39;AlertTopic\u0026#39;, { topicName: `smart-cooking-${props.environment}-alerts` }); // CloudWatch Dashboard const dashboard = new cloudwatch.Dashboard(this, \u0026#39;Dashboard\u0026#39;, { dashboardName: `smart-cooking-${props.environment}-dashboard` }); // API Gateway Metrics dashboard.addWidgets( new cloudwatch.GraphWidget({ title: \u0026#39;API Gateway Requests\u0026#39;, left: [ new cloudwatch.Metric({ namespace: \u0026#39;AWS/ApiGateway\u0026#39;, metricName: \u0026#39;Count\u0026#39;, dimensionsMap: { ApiName: props.api.restApiName }, statistic: \u0026#39;Sum\u0026#39; }) ] }), new cloudwatch.GraphWidget({ title: \u0026#39;API Gateway Latency\u0026#39;, left: [ new cloudwatch.Metric({ namespace: \u0026#39;AWS/ApiGateway\u0026#39;, metricName: \u0026#39;Latency\u0026#39;, dimensionsMap: { ApiName: props.api.restApiName }, statistic: \u0026#39;Average\u0026#39; }) ] }) ); // Lambda Metrics Object.entries(props.lambdaFunctions).forEach(([name, func]) =\u0026gt; { dashboard.addWidgets( new cloudwatch.GraphWidget({ title: `${name} Function Metrics`, left: [ func.metricInvocations(), func.metricErrors(), func.metricDuration() ] }) ); // Alarms const errorAlarm = new cloudwatch.Alarm(this, `${name}ErrorAlarm`, { alarmName: `smart-cooking-${props.environment}-${name}-errors`, metric: func.metricErrors({ period: cdk.Duration.minutes(5) }), threshold: 10, evaluationPeriods: 2 }); errorAlarm.addAlarmAction( new cdk.aws_cloudwatch_actions.SnsAction(alertTopic) ); const durationAlarm = new cloudwatch.Alarm(this, `${name}DurationAlarm`, { alarmName: `smart-cooking-${props.environment}-${name}-duration`, metric: func.metricDuration({ period: cdk.Duration.minutes(5), statistic: \u0026#39;Average\u0026#39; }), threshold: name === \u0026#39;aiSuggestion\u0026#39; ? 30000 : 5000, // 30s for AI, 5s for others evaluationPeriods: 3 }); durationAlarm.addAlarmAction( new cdk.aws_cloudwatch_actions.SnsAction(alertTopic) ); }); // Cost Alarm const costAlarm = new cloudwatch.Alarm(this, \u0026#39;CostAlarm\u0026#39;, { alarmName: `smart-cooking-${props.environment}-cost`, metric: new cloudwatch.Metric({ namespace: \u0026#39;AWS/Billing\u0026#39;, metricName: \u0026#39;EstimatedCharges\u0026#39;, dimensionsMap: { Currency: \u0026#39;USD\u0026#39; }, statistic: \u0026#39;Maximum\u0026#39;, period: cdk.Duration.hours(6) }), threshold: props.environment === \u0026#39;prod\u0026#39; ? 200 : 50, evaluationPeriods: 1 }); costAlarm.addAlarmAction( new cdk.aws_cloudwatch_actions.SnsAction(alertTopic) ); } }Log Aggregation#\r// Lambda function logging setup const logger = { info: (message: string, meta: any = {}) =\u0026gt; { console.log(JSON.stringify({ timestamp: new Date().toISOString(), level: \u0026#39;INFO\u0026#39;, message, requestId: context.awsRequestId, functionName: context.functionName, ...meta })); }, error: (message: string, error: Error, meta: any = {}) =\u0026gt; { console.error(JSON.stringify({ timestamp: new Date().toISOString(), level: \u0026#39;ERROR\u0026#39;, message, error: { name: error.name, message: error.message, stack: error.stack }, requestId: context.awsRequestId, functionName: context.functionName, ...meta })); } };   Security \u0026amp; Compliance#\rSecurity Scanning#\r# .github/workflows/security.yml name: Security Scan on: push: branches: [main, develop] schedule: - cron: \u0026#39;0 2 * * 1\u0026#39; # Weekly on Monday jobs: security-scan: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Run npm audit run: npm audit --audit-level high - name: Run Snyk security scan uses: snyk/actions/node@master env: SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} with: args: --severity-threshold=high - name: Run OWASP ZAP scan uses: zaproxy/action-full-scan@v0.4.0 with: target: \u0026#39;https://api-dev.smartcooking.app\u0026#39;Environment Variables Management#\r// Environment-specific configurations const config = { dev: { apiUrl: \u0026#39;https://api-dev.smartcooking.app\u0026#39;, cognitoUserPoolId: \u0026#39;us-east-1_dev123\u0026#39;, bedrockModel: \u0026#39;anthropic.claude-3-haiku-20240307-v1:0\u0026#39;, logLevel: \u0026#39;DEBUG\u0026#39; }, prod: { apiUrl: \u0026#39;https://api.smartcooking.app\u0026#39;, cognitoUserPoolId: \u0026#39;us-east-1_prod456\u0026#39;, bedrockModel: \u0026#39;anthropic.claude-3-haiku-20240307-v1:0\u0026#39;, logLevel: \u0026#39;INFO\u0026#39; } }; export const getConfig = () =\u0026gt; { const env = process.env.ENVIRONMENT || \u0026#39;dev\u0026#39;; return config[env as keyof typeof config]; };   Performance Optimization#\rLambda Optimization#\r// Shared connection pool for DynamoDB let ddbClient: DynamoDBDocumentClient; export const getDynamoDBClient = () =\u0026gt; { if (!ddbClient) { const client = new DynamoDBClient({ region: process.env.AWS_REGION || \u0026#39;us-east-1\u0026#39; }); ddbClient = DynamoDBDocumentClient.from(client); } return ddbClient; }; // Warm-up function export const warmUp = async () =\u0026gt; { if (process.env.AWS_LAMBDA_FUNCTION_NAME) { // Pre-initialize connections getDynamoDBClient(); // Pre-load master ingredients cache await loadMasterIngredientsCache(); } };Caching Strategy#\r// In-memory cache for master ingredients let masterIngredientsCache: Map\u0026lt;string, any\u0026gt; | null = null; export const getMasterIngredient = async (normalizedName: string) =\u0026gt; { if (!masterIngredientsCache) { await loadMasterIngredientsCache(); } return masterIngredientsCache?.get(normalizedName); }; const loadMasterIngredientsCache = async () =\u0026gt; { const result = await ddb.query({ TableName: process.env.DYNAMODB_TABLE, IndexName: \u0026#39;GSI1\u0026#39;, KeyConditionExpression: \u0026#39;GSI1PK = :pk\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: \u0026#39;INGREDIENT#ACTIVE\u0026#39; } }); masterIngredientsCache = new Map(); result.Items?.forEach(item =\u0026gt; { masterIngredientsCache?.set(item.normalized_name, item); }); };Related Documents#\r10 - Architecture 20 - Backend 21 - Frontend 32 - Monitoring "},{"id":16,"href":"/docs/dlc/23-tasks/","title":"23 - Implementation Tasks","section":"Docs","content":"Implementation Tasks - Smart Cooking App#\r   Task Overview#\rSprint Planning (2-week sprints)#\rTotal Duration: 12 weeks (6 sprints) Sprint Length: 2 weeks Team Size: 1 developer (solo) Velocity: 20-25 story points per sprint Sprint Breakdown: Sprint 1-2: Foundation \u0026amp; Core Backend (Week 1-4) Sprint 3-4: AI Engine \u0026amp; Frontend Core (Week 5-8) Sprint 5-6: Social Features \u0026amp; Polish (Week 9-12)   Sprint 1: Foundation Setup (Week 1-2)#\rBackend Infrastructure (8 points)#\rTASK-001: AWS CDK Setup#\rStory Points: 3 Priority: P0 (Blocker) Description: Setup CDK project structure and base stacks Acceptance Criteria: ✅ CDK project initialized with TypeScript ✅ Environment-specific configurations (dev/prod) ✅ Base stack structure created ✅ GitHub Actions workflow for deployment Files to Create: cdk/ ├── lib/main-stack.ts ├── lib/database-stack.ts ├── lib/auth-stack.ts ├── bin/app.ts └── package.json TASK-002: DynamoDB Single-Table Design#\rStory Points: 5 Priority: P0 (Blocker) Description: Create DynamoDB table with GSI indexes Acceptance Criteria: ✅ Single table smart-cooking-data created ✅ 3 GSI indexes configured (GSI1, GSI2, GSI3) ✅ TTL attribute for auto-cleanup ✅ Point-in-time recovery enabled (prod) Access Patterns Covered: User profile, preferences, privacy Ingredients (user + master) Recipes with categories Cooking history and ratings Social features (friends, posts) Authentication Setup (5 points)#\rTASK-003: Cognito User Pool#\rStory Points: 3 Priority: P0 (Blocker) Description: Setup Cognito authentication Acceptance Criteria: ✅ User Pool with email verification ✅ Password policy configured ✅ Custom attributes (role, username) ✅ Post-confirmation Lambda trigger Custom Attributes: custom:role (user/admin) custom:username (unique identifier) TASK-004: Auth Lambda Handler#\rStory Points: 2 Priority: P0 (Blocker) Description: Post-authentication Lambda function Acceptance Criteria: ✅ Creates user profile in DynamoDB ✅ Sets default privacy settings ✅ Handles first-time vs returning users Function: auth-handler Basic API Setup (7 points)#\rTASK-005: API Gateway Setup#\rStory Points: 2 Priority: P0 (Blocker) Description: Create REST API with Cognito authorizer Acceptance Criteria: ✅ REST API Gateway created ✅ Cognito authorizer configured ✅ CORS enabled ✅ Request validation enabled TASK-006: User Profile Lambda#\rStory Points: 3 Priority: P0 (Blocker) Description: User profile CRUD operations Acceptance Criteria: ✅ GET /user/profile ✅ PUT /user/profile ✅ PUT /user/preferences ✅ Privacy filtering applied Function: user-profile TASK-007: Master Ingredients Setup#\rStory Points: 2 Priority: P0 (Blocker) Description: Seed master ingredients database Acceptance Criteria: ✅ 500+ Vietnamese ingredients loaded ✅ Normalized names for fuzzy search ✅ Categories assigned (meat, vegetable, spice, etc.) ✅ Aliases for common variations Sprint 1 Total: 20 points\n   Sprint 2: AI Engine Core (Week 3-4)#\rAI Suggestion Engine (10 points)#\rTASK-008: Bedrock Integration#\rStory Points: 4 Priority: P0 (Core Feature) Description: Amazon Bedrock Claude 3 Haiku integration Acceptance Criteria: ✅ Bedrock client configured ✅ Claude 3 Haiku model integration ✅ Prompt engineering for Vietnamese recipes ✅ JSON response parsing ✅ Error handling and fallbacks Function: ai-suggestion (1024MB, 60s timeout) TASK-009: Ingredient Validation System#\rStory Points: 3 Priority: P0 (Core Feature) Description: Validate ingredients with fuzzy search Acceptance Criteria: ✅ POST /ingredients/validate endpoint ✅ Exact match with master ingredients ✅ Fuzzy search for similar ingredients ✅ Auto-correction suggestions ✅ Invalid ingredient logging Function: ingredient-validator TASK-010: Flexible DB/AI Mix Logic#\rStory Points: 3 Priority: P0 (Core Feature) Description: Smart mixing of database and AI recipes Acceptance Criteria: ✅ Query approved recipes by categories ✅ Calculate AI gap (requested - db_found) ✅ Generate diverse cooking methods ✅ Combine results with source tracking Algorithm: 1. Query DB for approved recipes (diverse categories) 2. Calculate gap = requested_count - db_count 3. Generate AI recipes for gap (if \u0026gt; 0) 4. Return combined results with stats Cooking History System (6 points)#\rTASK-011: Cooking History Lambda#\rStory Points: 3 Priority: P0 (Core Feature) Description: Track personal cooking sessions Acceptance Criteria: ✅ POST /cooking/start ✅ PUT /cooking/{id}/complete ✅ GET /user/cooking-history ✅ DELETE /cooking/{id} ✅ Favorite marking functionality Function: cooking-history TASK-012: Rating \u0026amp; Auto-Approval System#\rStory Points: 3 Priority: P0 (Core Feature) Description: Recipe rating with auto-approval Acceptance Criteria: ✅ POST /recipes/{id}/rate endpoint ✅ Calculate average rating ✅ Auto-approve if rating \u0026gt;= 4.0 stars ✅ Link ratings to cooking history ✅ Notification on approval Function: rating-handler Auto-Approval Logic: if (averageRating \u0026gt;= 4.0) { recipe.is_approved = true; recipe.is_public = true; recipe.approval_type = \u0026#39;auto_rating\u0026#39;; // Notify user: \u0026#34;Recipe added to database!\u0026#34; } API Endpoints (4 points)#\rTASK-013: Core API Endpoints#\rStory Points: 4 Priority: P0 (Core Feature) Description: Implement core API endpoints Endpoints: ✅ POST /ai/suggest (main feature) ✅ GET /ai/suggestions (history) ✅ POST /ingredients/validate ✅ GET /user/ingredients ✅ POST /user/ingredients ✅ DELETE /user/ingredients/{id} Sprint 2 Total: 20 points\n   Sprint 3: Frontend Foundation (Week 5-6)#\rNode.js Setup (6 points)#\rTASK-014: Node.js Project Setup#\rStory Points: 3 Priority: P0 (Blocker) Description: Initialize Node.js + Express.js project Acceptance Criteria: ✅ Node.js 20 project with Express.js ✅ EJS template engine setup ✅ Tailwind CSS configuration ✅ ESLint + Prettier setup Structure: src/ ├── routes/ ├── views/ ├── middleware/ └── services/ TASK-015: Authentication Routes#\rStory Points: 3 Priority: P0 (Blocker) Description: Auth routes and middleware Acceptance Criteria: ✅ Login/Register routes ✅ Form validation middleware ✅ Authentication middleware ✅ Session management ✅ Auth service integration Files: src/routes/auth.js src/views/auth/login.ejs src/views/auth/register.ejs src/middleware/auth.js Core UI Components (8 points)#\rTASK-016: Ingredient Management Pages#\rStory Points: 4 Priority: P0 (Core Feature) Description: Ingredient input and validation pages Acceptance Criteria: ✅ Ingredient input forms ✅ Ingredient list with delete ✅ Auto-correction suggestions UI ✅ Invalid ingredient warnings ✅ Client-side validation Files: src/views/dashboard/ingredients.ejs src/public/js/ingredients.js src/routes/dashboard.js TASK-017: Recipe Suggestion Pages#\rStory Points: 4 Priority: P0 (Core Feature) Description: AI suggestion display and interaction Acceptance Criteria: ✅ Recipe suggestion page ✅ Recipe count selector (1-5) ✅ Loading states for AI generation ✅ Source indicators (DB vs AI) ✅ \u0026ldquo;Start Cooking\u0026rdquo; functionality Files: src/views/recipes/suggestions.ejs src/public/js/recipes.js src/routes/recipes.js Client-Side Logic (6 points)#\rTASK-018: Frontend JavaScript#\rStory Points: 3 Priority: P0 (Core Feature) Description: Client-side functionality Acceptance Criteria: ✅ Auth handling (login, logout) ✅ Ingredient management ✅ Recipe interactions ✅ Form validations Files: src/public/js/auth.js src/public/js/ingredients.js src/public/js/recipes.js TASK-019: API Client Setup#\rStory Points: 3 Priority: P0 (Core Feature) Description: Server-side API client Acceptance Criteria: ✅ AWS SDK integration ✅ HTTP client for Lambda calls ✅ Error handling ✅ Authentication helpers Files: src/services/apiClient.js src/services/authService.js Sprint 3 Total: 20 points\n   Sprint 4: Cooking Features (Week 7-8)#\rCooking Session Management (8 points)#\rTASK-020: Cooking History Pages#\rStory Points: 4 Priority: P0 (Core Feature) Description: Personal cooking history interface Acceptance Criteria: ✅ Cooking history page ✅ Cooking status indicators ✅ Favorite toggle functionality ✅ Filter by favorites ✅ Personal notes display Files: src/views/cooking/history.ejs src/public/js/cooking.js TASK-021: Rating System Pages#\rStory Points: 4 Priority: P0 (Core Feature) Description: Recipe rating interface Acceptance Criteria: ✅ Rating forms ✅ Star rating input ✅ Comment text area ✅ Auto-approval notifications ✅ Success/failure feedback Files: src/views/recipes/rate.ejs src/public/js/rating.js Recipe Management (7 points)#\rTASK-022: Recipe CRUD Lambda#\rStory Points: 4 Priority: P1 (Important) Description: Recipe management backend Acceptance Criteria: ✅ GET /recipes/{id} ✅ GET /recipes/search ✅ Recipe detail with ingredients ✅ Privacy filtering applied Function: recipe-crud TASK-023: Recipe Detail Pages#\rStory Points: 3 Priority: P1 (Important) Description: Recipe detail page Acceptance Criteria: ✅ Recipe detail page ✅ Ingredients list ✅ Step-by-step instructions ✅ Rating display ✅ \u0026ldquo;Start Cooking\u0026rdquo; button Files: src/views/recipes/detail.ejs src/routes/recipes.js Dashboard Integration (5 points)#\rTASK-024: User Dashboard#\rStory Points: 3 Priority: P1 (Important) Description: Main user dashboard Acceptance Criteria: ✅ Recent cooking history ✅ Quick ingredient input ✅ Favorite recipes ✅ AI suggestion shortcut Files: src/views/dashboard/index.ejs src/routes/dashboard.js TASK-025: Settings Pages#\rStory Points: 2 Priority: P1 (Important) Description: User settings interface Acceptance Criteria: ✅ Profile settings page ✅ Privacy settings page ✅ Form validation ✅ Success notifications Files: src/views/settings/profile.ejs src/views/settings/privacy.ejs src/routes/settings.js Sprint 4 Total: 20 points\n   Sprint 5: Social Features (Week 9-10)#\rPrivacy \u0026amp; Friends System (10 points)#\rTASK-026: Privacy Settings Backend#\rStory Points: 3 Priority: P1 (Social Core) Description: Privacy control system Acceptance Criteria: ✅ GET/PUT /user/privacy endpoints ✅ Privacy filtering middleware ✅ Friend-based access control ✅ Data visibility rules Function: Enhanced user-profile TASK-027: Friends System Backend#\rStory Points: 4 Priority: P1 (Social Core) Description: Friend requests and management Acceptance Criteria: ✅ POST /friends/request ✅ PUT /friends/{id}/accept ✅ PUT /friends/{id}/reject ✅ DELETE /friends/{id} ✅ GET /friends (with status filter) Function: social-friends TASK-028: Friends UI Components#\rStory Points: 3 Priority: P1 (Social Core) Description: Friend management interface Acceptance Criteria: ✅ FriendCard component ✅ Friend request notifications ✅ Accept/reject buttons ✅ Friends list page Components: FriendCard.tsx FriendRequestCard.tsx Posts \u0026amp; Comments (10 points)#\rTASK-029: Posts System Backend#\rStory Points: 5 Priority: P1 (Social Core) Description: Social posts and comments Acceptance Criteria: ✅ POST /posts (create post) ✅ GET /posts/feed (personalized feed) ✅ POST /posts/{id}/comments ✅ GET /posts/{id}/comments ✅ Privacy-aware filtering Function: posts-handler TASK-030: Social Feed UI#\rStory Points: 5 Priority: P1 (Social Core) Description: Social feed interface Acceptance Criteria: ✅ PostCard component ✅ CommentList component ✅ Create post form ✅ Image upload support ✅ Like/reaction buttons Components: PostCard.tsx CommentList.tsx CreatePostForm.tsx Sprint 5 Total: 20 points\n   Sprint 6: Polish \u0026amp; Launch (Week 11-12)#\rNotifications System (8 points)#\rTASK-031: Notifications Backend#\rStory Points: 4 Priority: P1 (Polish) Description: Real-time notifications Acceptance Criteria: ✅ GET /notifications ✅ PUT /notifications/{id}/read ✅ PUT /notifications/read-all ✅ DynamoDB Streams triggers Function: notifications TASK-032: Notifications UI#\rStory Points: 4 Priority: P1 (Polish) Description: Notification interface Acceptance Criteria: ✅ Notification dropdown ✅ Unread count badge ✅ Mark as read functionality ✅ Notification types (friend, comment, approval) Components: NotificationDropdown.tsx NotificationItem.tsx Admin Features (6 points)#\rTASK-033: Admin Operations Backend#\rStory Points: 3 Priority: P2 (Nice to Have) Description: Admin management functions Acceptance Criteria: ✅ GET /admin/users ✅ PUT /admin/users/{id}/ban ✅ GET /admin/statistics ✅ GET /admin/invalid-reports Function: admin-ops TASK-034: Admin Dashboard UI#\rStory Points: 3 Priority: P2 (Nice to Have) Description: Admin interface Acceptance Criteria: ✅ User management table ✅ System statistics ✅ Invalid ingredient reports ✅ Cost monitoring dashboard Pages: app/admin/dashboard/page.tsx Deployment \u0026amp; Testing (6 points)#\rTASK-035: AWS Amplify Setup#\rStory Points: 2 Priority: P0 (Launch Blocker) Description: Frontend deployment Acceptance Criteria: ✅ Amplify app configured ✅ Custom domain setup ✅ Environment variables ✅ CI/CD pipeline working TASK-036: End-to-End Testing#\rStory Points: 4 Priority: P0 (Launch Blocker) Description: Complete user journey testing Acceptance Criteria: ✅ User registration → verification ✅ Profile setup → preferences ✅ Ingredient input → validation ✅ AI suggestions → cooking → rating ✅ Auto-approval workflow ✅ Social features (friends, posts) Test Scenarios: New user onboarding AI suggestion with invalid ingredients Recipe auto-approval (\u0026gt;= 4 stars) Social interaction flow Privacy settings enforcement Sprint 6 Total: 20 points\n   Task Summary#\rBy Priority#\rP0 (Must Have): 85 points (71%) P1 (Should Have): 30 points (25%) P2 (Nice to Have): 6 points (4%) By Category#\rBackend/API: 60 points (50%) Frontend/UI: 45 points (37.5%) Infrastructure: 15 points (12.5%) Risk Mitigation#\rHigh Risk Tasks: TASK-008 (Bedrock), TASK-010 (AI Mix), TASK-012 (Auto-approval) Dependencies: Database → Auth → API → Frontend Buffer Time: 20% built into estimates Success Metrics#\r✅ All P0 tasks completed ✅ Core user journey working end-to-end ✅ Auto-approval system functional ✅ Cost under $160/month ✅ API response time \u0026lt; 500ms Related Documents#\r00 - Overview 01 - Requirements 20 - Backend 21 - Frontend 22 - DevOps "},{"id":17,"href":"/docs/dlc/30-cost-analysis/","title":"30 - Cost Analysis","section":"Docs","content":"Cost Analysis - Smart Cooking App#\r   Monthly Cost Breakdown (1,000 users)#\rService Cost Estimate Notes AWS Amplify $15 Next.js hosting + CI/CD CloudFront $8 CDN, 1TB data transfer API Gateway $10 ~180K requests/month Lambda Functions $25 11 functions total Amazon Bedrock $12-30 Flexible DB/AI mix ⭐ DynamoDB $45 On-demand with enhanced features S3 $10 100GB storage Cognito FREE \u0026lt; 50,000 MAU CloudWatch $12 Logging \u0026amp; monitoring WAF $6 Security protection Secrets Manager $2 API keys Total Monthly Cost#\rScenario Cost/Month Notes Best Case (80% DB) $135 High DB coverage ✅ Average Case (60% DB) $150 Recommended ✅ Worst Case (0% DB) $180 Cold start phase    Cost Scaling Analysis#\rMVP Phase (1,000 users)#\rMonthly Cost: $135-180 Cost per User: $0.135-0.180 Break-even: 50 premium users ($250 revenue) Growth Phase (10,000 users)#\rMonthly Cost: $380-500 Cost per User: $0.038-0.050 Break-even: 100 premium users ($500 revenue) Scale Phase (100,000 users)#\rMonthly Cost: $2,000-2,800 Cost per User: $0.020-0.028 Break-even: 600 premium users ($3,000 revenue)    Cost Optimization Strategies#\r1. AI Cost Optimization (40% of total cost)#\rFlexible DB/AI Mix Strategy ⭐#\rMonth 1: 0% DB, 100% AI → $30/month AI cost Month 3: 30% DB, 70% AI → $21/month AI cost (30% savings) Month 6: 60% DB, 40% AI → $12/month AI cost (60% savings) Month 12: 80% DB, 20% AI → $6/month AI cost (80% savings)Implementation#\rUse Claude 3 Haiku (70% cheaper than Sonnet) Cache popular AI responses Auto-approve recipes with 4+ stars Build database organically from user ratings Savings: $24/month by Month 12\n2. Database Optimization (30% of total cost)#\rDynamoDB Strategies#\rOn-demand pricing (pay per use) TTL for old AI suggestions (90 days) Efficient GSI design Batch operations for writes Current Cost: $45/month Optimized Cost: $35/month Savings: $10/month\n3. CDN \u0026amp; Hosting (15% of total cost)#\rCloudFront Optimization#\rAggressive caching for static assets Image compression (WebP format) Gzip compression for API responses Current Cost: $23/month Optimized Cost: $18/month Savings: $5/month\n4. Lambda Optimization (12% of total cost)#\rPerformance Tuning#\rRight-size memory allocation Connection pooling for DynamoDB Minimize cold starts Efficient code packaging Current Cost: $25/month Optimized Cost: $20/month Savings: $5/month\n   Revenue Model Analysis#\rFreemium Model#\rFree Tier: - 1 AI suggestion per request - Basic cooking history - Limited social features - Cost: $0.15/user/month Premium Tier ($4.99/month): - 5 AI suggestions per request - Unlimited cooking history - Full social features - Advanced analytics - Cost: $0.15/user/month - Profit: $4.84/user/monthBreak-even Analysis#\rMonth 1-3 (1,000 users)#\r5% conversion rate: 50 premium users Revenue: $250/month Cost: $150/month Profit: $100/month ✅ Month 6 (5,000 users)#\r5% conversion rate: 250 premium users Revenue: $1,250/month Cost: $300/month Profit: $950/month ✅ Month 12 (10,000 users)#\r5% conversion rate: 500 premium users Revenue: $2,500/month Cost: $400/month Profit: $2,100/month ✅    Cost Monitoring \u0026amp; Alerts#\rBudget Alarms#\rDevelopment: Warning: $140/month Critical: $170/month Hard Stop: $200/month Production: Warning: $180/month Critical: $450/month Hard Stop: $500/monthCost Tracking Metrics#\rCost per user (target: \u0026lt;$0.20 MVP, \u0026lt;$0.03 scale) AI cost percentage (target: decrease from 50% to 20%) DB coverage ratio (target: 0% → 80%) Revenue per user (target: \u0026gt;$0.25/month)    ROI Projections#\rYear 1 Financial Summary#\rQuarter Users Monthly Cost Monthly Revenue Profit Q1 1,000 $150 $250 $100 Q2 3,000 $200 $750 $550 Q3 6,000 $280 $1,500 $1,220 Q4 10,000 $400 $2,500 $2,100 Total Year 1 Profit: $23,280\nInvestment Recovery#\rInitial Investment: $15,000 (development + 3 months operation) Payback Period: Month 8 ROI Year 1: 155% ROI Year 2: 400%+    Risk Mitigation#\rCost Overrun Risks#\rAI Usage Spike: Implement rate limiting Database Growth: TTL policies and archiving Traffic Surge: Auto-scaling with limits Feature Creep: Strict MVP scope Mitigation Strategies#\rReal-time cost monitoring Automated scaling limits Feature flags for cost control Emergency shutdown procedures    Scaling Economics#\rUnit Economics at Scale#\r100,000 users (Year 2): - Infrastructure: $2,500/month - Support: $1,000/month - Marketing: $3,000/month - Total OpEx: $6,500/month Revenue (10% conversion): - Premium users: 10,000 - Monthly revenue: $50,000 - Monthly profit: $43,500 - Annual profit: $522,000Competitive Advantage#\r70% lower AI costs through flexible mix Serverless scalability from 1K to 100K users Community-driven content reduces manual curation Auto-approval system eliminates moderation costs Related Documents#\r00 - Overview 31 - Scaling 32 - Monitoring "},{"id":18,"href":"/docs/dlc/31-scaling/","title":"31 - Scaling Strategy","section":"Docs","content":"Scaling Strategy - Smart Cooking App#\r   Scaling Overview#\rGrowth Trajectory#\rPhase 1 (MVP): 1,000 users (Month 1-3) Phase 2 (Growth): 10,000 users (Month 4-12) Phase 3 (Scale): 100,000 users (Year 2) Phase 4 (Enterprise): 1M+ users (Year 3+)Scaling Principles#\rServerless First: Auto-scaling without infrastructure management Cost-Aware Growth: Maintain unit economics at scale Performance Consistency: Sub-500ms API response times Data Efficiency: Optimize for read-heavy workloads    Capacity Planning#\rCurrent Capacity (MVP - 1,000 users)#\rAPI Gateway#\rCurrent: 1,000 requests/day Limit: 10,000 requests/second (default) Headroom: 99.9%+ available Lambda Functions#\rCurrent: 100 invocations/day Limit: 1,000 concurrent executions (default) Headroom: 99%+ available DynamoDB#\rCurrent: 1,000 read/write units per day Mode: On-demand (auto-scaling) Limit: 40,000 RCU/WCU per table (soft limit) Bedrock AI#\rCurrent: 100 requests/day Limit: 200 requests/minute (default) Daily Capacity: 288,000 requests/day Scaling Bottlenecks \u0026amp; Solutions#\r1. AI Generation Bottleneck#\rProblem: Bedrock rate limits at high scale\nCurrent: 200 requests/minute = 288K/day At 100K users: 1M AI requests/day neededSolutions:\nFlexible Mix Strategy: Reduce AI dependency from 100% → 20% Request Increase: AWS support for higher limits Caching Layer: Redis for popular recipe combinations Batch Processing: Generate multiple recipes per request 2. DynamoDB Hot Partitions#\rProblem: User-based partitioning can create hot spots\nSolutions:\nComposite Keys: Distribute load across partitions GSI Design: Spread queries across multiple indexes Write Sharding: Use random suffixes for high-write items Read Replicas: Global Tables for read scaling 3. Lambda Cold Starts#\rProblem: Increased latency during traffic spikes\nSolutions:\nProvisioned Concurrency: For critical functions Connection Pooling: Reuse database connections Smaller Packages: Reduce deployment size Warm-up Schedules: Keep functions warm during peak hours    Auto-Scaling Configuration#\rLambda Scaling#\rAI Suggestion Function: Reserved Concurrency: 100 (prevent runaway costs) Provisioned Concurrency: 10 (reduce cold starts) Memory: 1024MB → 1536MB (if needed) Timeout: 60s (unchanged) Other Functions: Reserved Concurrency: 50 each Memory: 256MB → 512MB (if needed) Timeout: 10s → 30s (if needed)DynamoDB Scaling#\rCurrent: On-Demand Mode Scale Trigger: Consistent high usage (\u0026gt;80% utilization) Migration Path: On-Demand → Provisioned with Auto-Scaling Provisioned Mode Settings: Base Capacity: 100 RCU/WCU Max Capacity: 4,000 RCU/WCU Target Utilization: 70% Scale Up: +100% when \u0026gt;70% for 2 minutes Scale Down: -50% when \u0026lt;50% for 15 minutesAPI Gateway Scaling#\rCurrent Limits: Rate: 10,000 requests/second Burst: 5,000 requests Scale Requirements: 10K users: 100 requests/second average 100K users: 1,000 requests/second average No action needed - well within limits   Performance Optimization#\rDatabase Query Optimization#\rCurrent Performance#\rSingle Item Queries: \u0026lt;50ms (p95) GSI Queries: \u0026lt;100ms (p95) Complex Filters: \u0026lt;200ms (p95)Scaling Optimizations#\rCaching Strategy: - Master Ingredients: In-memory cache (Lambda) - User Profiles: 5-minute TTL - Popular Recipes: 1-hour TTL - AI Responses: 24-hour TTL Query Patterns: - Batch Operations: Reduce API calls by 70% - Projection Expressions: Return only needed fields - Parallel Queries: Use Promise.all for independent queries - Connection Pooling: Reuse DynamoDB connectionsAI Response Optimization#\rCurrent AI Flow#\r1. User Request → 2. Validate → 3. Query DB → 4. Generate AI → 5. Return Average Time: 3-5 secondsOptimized AI Flow#\r1. User Request → 2. Validate (cached) → 3. Query DB (parallel) → 4. Generate AI (if needed) → 5. Return (cached) Target Time: 1-2 secondsCaching Strategy#\rRecipe Cache: Key: hash(ingredients + preferences) TTL: 24 hours Hit Rate Target: 40% (Month 6), 70% (Month 12) Ingredient Validation Cache: Key: normalized_ingredient_name TTL: 7 days (ingredients don\u0026#39;t change often) Hit Rate Target: 90%+🌍 Geographic Scaling#\rCurrent Architecture#\rPrimary Region: us-east-1 (N. Virginia) CDN: CloudFront (global) Latency: 200-300ms (Vietnam to us-east-1) Multi-Region Strategy (Year 2)#\rPhase 1: Read Replicas#\rPrimary: us-east-1 (read/write) Replica: ap-southeast-1 (Singapore) - read only Benefits: - Reduced latency for Asian users (300ms → 50ms) - Disaster recovery capability - Load distributionPhase 2: Active-Active (Year 3)#\rRegions: - us-east-1: Americas - eu-west-1: Europe - ap-southeast-1: Asia-Pacific DynamoDB Global Tables: - Automatic multi-region replication - Eventually consistent reads - Conflict resolution: Last writer wins   Data Scaling Strategy#\rCurrent Data Volume (1,000 users)#\rUsers: 1MB Recipes: 50MB Cooking History: 20MB AI Suggestions: 25MB Social Data: 30MB Total: ~125MBProjected Growth#\r10,000 users (Month 12): Total Data: ~1.2GB Monthly Growth: ~100MB 100,000 users (Year 2): Total Data: ~12GB Monthly Growth: ~1GB 1,000,000 users (Year 3): Total Data: ~120GB Monthly Growth: ~10GBData Lifecycle Management#\rTTL Policies#\rAI Suggestions: Retention: 90 days Cleanup: Automatic (DynamoDB TTL) Cooking History: Retention: 2 years Archive: S3 after 1 year Notifications: Retention: 30 days Cleanup: Automatic Activity Logs: Retention: 7 days (CloudWatch) Long-term: S3 (if needed for analytics)Storage Optimization#\rDynamoDB: Compression: JSON field compression (30% savings) Archiving: Move old data to S3 (90% cost reduction) S3: Lifecycle Policies: - Standard: 0-30 days - IA: 30-90 days - Glacier: 90+ days Images: Format: WebP (30% smaller than JPEG) Compression: Aggressive for thumbnails CDN: CloudFront caching   Infrastructure Scaling#\rServerless Scaling Advantages#\rAutomatic Benefits: ✅ Zero server management ✅ Pay-per-use pricing ✅ Built-in high availability ✅ Automatic security updates ✅ Global edge distribution (CloudFront) Manual Optimizations Needed: ⚠️ Lambda memory/timeout tuning ⚠️ DynamoDB capacity planning ⚠️ API Gateway rate limiting ⚠️ Cost monitoring and alertsMonitoring \u0026amp; Alerting at Scale#\rKey Metrics to Track#\rPerformance: - API response time (p95 \u0026lt; 500ms) - Lambda duration (p95 \u0026lt; 5s for non-AI) - DynamoDB latency (p95 \u0026lt; 100ms) - Error rate (\u0026lt; 1%) Business: - Daily/Monthly Active Users - AI suggestion usage rate - Recipe approval rate (target: 40%+) - Cost per user (target: decreasing) Technical: - Lambda cold start rate (\u0026lt; 5%) - DynamoDB throttling (0 events) - AI API success rate (\u0026gt; 99%) - Cache hit rates (ingredient: 90%, recipe: 70%)Scaling Alerts#\rTraffic Alerts: - API requests \u0026gt; 1000/minute (scale up) - Lambda errors \u0026gt; 10/minute (investigate) - DynamoDB throttling \u0026gt; 0 (scale up) Cost Alerts: - Daily cost \u0026gt; $20 (MVP), $100 (Scale) - AI cost \u0026gt; 50% of total (optimize mix) - Unusual spending patterns Performance Alerts: - API latency \u0026gt; 1s (p95) - Lambda timeout rate \u0026gt; 1% - Database query time \u0026gt; 200ms (p95)   Scaling Milestones#\rMonth 3 (1,000 users)#\r✅ Basic auto-scaling working ✅ Cost under $160/month ✅ API response time \u0026lt; 500ms ✅ 30% DB coverage achieved Month 6 (5,000 users)#\r✅ Provisioned concurrency for AI function ✅ Recipe caching implemented ✅ Cost per user \u0026lt; $0.10 ✅ 60% DB coverage achieved Month 12 (10,000 users)#\r✅ Multi-AZ deployment ✅ Advanced monitoring dashboard ✅ Cost per user \u0026lt; $0.05 ✅ 80% DB coverage achieved Year 2 (100,000 users)#\r✅ Multi-region read replicas ✅ Advanced caching layer ✅ Cost per user \u0026lt; $0.03 ✅ 90% DB coverage achieved    Migration Strategies#\rDynamoDB On-Demand → Provisioned#\rTrigger: Consistent high usage (\u0026gt;$200/month DDB cost) Process: 1. Analyze usage patterns (1 week) 2. Calculate optimal provisioned capacity 3. Enable auto-scaling 4. Migrate during low-traffic window 5. Monitor for 48 hours Expected Savings: 20-40%Single Region → Multi-Region#\rTrigger: \u0026gt;50% international users Process: 1. Setup DynamoDB Global Tables 2. Deploy Lambda functions to new region 3. Configure Route 53 geo-routing 4. Test failover scenarios 5. Gradual traffic migration Expected Improvement: 70% latency reduction for international usersRelated Documents#\r30 - Cost Analysis 32 - Monitoring 10 - Architecture "},{"id":19,"href":"/docs/dlc/32-monitoring/","title":"32 - Monitoring \u0026 Observability","section":"Docs","content":"Monitoring \u0026amp; Observability - Smart Cooking App#\r   Monitoring Strategy#\rObservability Pillars#\rMetrics: Quantitative measurements (CloudWatch) Logs: Event records (CloudWatch Logs) Traces: Request flow tracking (X-Ray) Alerts: Proactive notifications (SNS) Monitoring Objectives#\rPerformance: API response time \u0026lt; 500ms (p95) Reliability: 99.5% uptime target Cost Control: Budget alerts and optimization User Experience: Error rate \u0026lt; 1% 🔍 CloudWatch Metrics#\rApplication Metrics#\rAPI Gateway Metrics#\rKey Metrics: - Count: Total requests per minute - Latency: Response time (Average, p95, p99) - 4XXError: Client errors (authentication, validation) - 5XXError: Server errors (Lambda failures, timeouts) - IntegrationLatency: Backend processing time Alarms: - API Latency \u0026gt; 1000ms (p95) for 5 minutes - Error Rate \u0026gt; 5% for 3 minutes - Request Count \u0026gt; 1000/minute (scale alert)Lambda Function Metrics#\rPer Function Tracking: - Invocations: Function call count - Duration: Execution time - Errors: Function failures - Throttles: Concurrency limit hits - ColdStarts: New container initializations Critical Functions: ai-suggestion: - Duration \u0026lt; 30s (p95) - Error rate \u0026lt; 2% - Cold start rate \u0026lt; 10% cooking-history: - Duration \u0026lt; 5s (p95) - Error rate \u0026lt; 1% rating-handler: - Duration \u0026lt; 3s (p95) - Error rate \u0026lt; 0.5%DynamoDB Metrics#\rTable Metrics: - ConsumedReadCapacityUnits - ConsumedWriteCapacityUnits - ThrottledRequests (should be 0) - SuccessfulRequestLatency - SystemErrors GSI Metrics: - GSI1/GSI2/GSI3 capacity consumption - Query performance per index - Hot partition detection Alarms: - Throttled requests \u0026gt; 0 - Read/Write capacity \u0026gt; 80% - Query latency \u0026gt; 100ms (p95)Business Metrics#\rUser Engagement#\rCustom Metrics: - Daily Active Users (DAU) - AI Suggestions per User per Day - Recipe Completion Rate - Rating Submission Rate - Social Interaction Rate Tracking Method: - Lambda functions emit custom metrics - CloudWatch custom namespace: SmartCooking/Business - Dimensions: Environment, UserTier, FeatureAI Performance#\rAI-Specific Metrics: - AI Generation Success Rate - DB vs AI Mix Ratio - Recipe Auto-Approval Rate - Invalid Ingredient Report Rate - Average AI Response Time Implementation: ```javascript // Custom metric emission in Lambda const cloudwatch = new CloudWatchClient({}); await cloudwatch.send(new PutMetricDataCommand({ Namespace: \u0026#39;SmartCooking/AI\u0026#39;, MetricData: [{ MetricName: \u0026#39;RecipeGenerationTime\u0026#39;, Value: duration, Unit: \u0026#39;Milliseconds\u0026#39;, Dimensions: [{ Name: \u0026#39;Environment\u0026#39;, Value: process.env.ENVIRONMENT }] }] }));   Logging Strategy#\rLog Structure#\r{ \u0026#34;timestamp\u0026#34;: \u0026#34;2025-01-20T10:30:00.000Z\u0026#34;, \u0026#34;level\u0026#34;: \u0026#34;INFO|WARN|ERROR\u0026#34;, \u0026#34;requestId\u0026#34;: \u0026#34;uuid-123\u0026#34;, \u0026#34;userId\u0026#34;: \u0026#34;user-456\u0026#34;, \u0026#34;functionName\u0026#34;: \u0026#34;ai-suggestion\u0026#34;, \u0026#34;event\u0026#34;: \u0026#34;recipe_generated\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;AI recipe generated successfully\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;ingredients\u0026#34;: [\u0026#34;chicken\u0026#34;, \u0026#34;tomato\u0026#34;], \u0026#34;recipeCount\u0026#34;: 3, \u0026#34;dbRecipes\u0026#34;: 2, \u0026#34;aiRecipes\u0026#34;: 1, \u0026#34;duration\u0026#34;: 2500 }, \u0026#34;error\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;ValidationError\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Invalid ingredient\u0026#34;, \u0026#34;stack\u0026#34;: \u0026#34;...\u0026#34; } }Log Groups Configuration#\rCloudWatch Log Groups: /aws/lambda/smart-cooking-prod-ai-suggestion: Retention: 7 days Subscription: Error alerts to SNS /aws/lambda/smart-cooking-prod-cooking-history: Retention: 7 days /aws/lambda/smart-cooking-prod-rating-handler: Retention: 7 days /aws/apigateway/smart-cooking-api: Retention: 3 days Format: CLF (Common Log Format) /aws/waf/smart-cooking: Retention: 30 days Content: Blocked requests, rate limits Log Filtering: - ERROR level: Immediate SNS alert - WARN level: Daily digest - Invalid ingredients: Weekly admin reportStructured Logging Implementation#\r// shared/logger.js class Logger { constructor(functionName, requestId) { this.functionName = functionName; this.requestId = requestId; } info(message, metadata = {}) { this.log(\u0026#39;INFO\u0026#39;, message, metadata); } warn(message, metadata = {}) { this.log(\u0026#39;WARN\u0026#39;, message, metadata); } error(message, error, metadata = {}) { this.log(\u0026#39;ERROR\u0026#39;, message, { ...metadata, error: { name: error.name, message: error.message, stack: error.stack } }); } log(level, message, metadata) { const logEntry = { timestamp: new Date().toISOString(), level, requestId: this.requestId, functionName: this.functionName, message, ...metadata }; console.log(JSON.stringify(logEntry)); } } // Usage in Lambda exports.handler = async (event, context) =\u0026gt; { const logger = new Logger(context.functionName, context.awsRequestId); logger.info(\u0026#39;Processing AI suggestion request\u0026#39;, { userId: event.requestContext.authorizer.claims.sub, ingredients: JSON.parse(event.body).ingredients }); };🔍 Distributed Tracing (X-Ray)#\rTracing Configuration#\rServices Traced: - API Gateway: 100% sampling - Lambda (AI Suggestion): 100% sampling - Lambda (Others): 10% sampling - DynamoDB: Auto-instrumented - Bedrock: Auto-instrumented Trace Segments: 1. API Gateway → Lambda 2. Lambda → DynamoDB Query 3. Lambda → Bedrock API 4. Lambda → DynamoDB Write 5. Lambda → Response Annotations: - user_id: For user-specific analysis - recipe_count: Request size - db_recipes_found: DB hit rate - ai_recipes_generated: AI usage - total_duration: End-to-end timingX-Ray Implementation#\r// Enable X-Ray tracing in Lambda const AWSXRay = require(\u0026#39;aws-xray-sdk-core\u0026#39;); const AWS = AWSXRay.captureAWS(require(\u0026#39;aws-sdk\u0026#39;)); exports.handler = async (event, context) =\u0026gt; { // Create subsegment for AI generation const segment = AWSXRay.getSegment(); const subsegment = segment.addNewSubsegment(\u0026#39;ai-generation\u0026#39;); try { subsegment.addAnnotation(\u0026#39;user_id\u0026#39;, userId); subsegment.addAnnotation(\u0026#39;recipe_count\u0026#39;, recipeCount); const aiRecipes = await generateAIRecipes(ingredients); subsegment.addMetadata(\u0026#39;ai_response\u0026#39;, { recipes_generated: aiRecipes.length, total_tokens: aiRecipes.reduce((sum, r) =\u0026gt; sum + r.tokens, 0) }); subsegment.close(); return aiRecipes; } catch (error) { subsegment.addError(error); subsegment.close(); throw error; } };   Alerting System#\rAlert Categories#\rCritical Alerts (Immediate Response)#\rSystem Down: - API Gateway 5XX \u0026gt; 50% for 2 minutes - Lambda function errors \u0026gt; 90% for 1 minute - DynamoDB throttling \u0026gt; 10 events in 5 minutes Performance Degradation: - API latency \u0026gt; 2s (p95) for 5 minutes - Lambda timeout rate \u0026gt; 10% for 3 minutes - AI generation failure rate \u0026gt; 20% for 5 minutes Security Issues: - WAF blocked requests \u0026gt; 1000 in 5 minutes - Unusual authentication failures \u0026gt; 100 in 1 minute - Cost spike \u0026gt; 200% of daily averageWarning Alerts (Monitor \u0026amp; Plan)#\rCapacity Concerns: - DynamoDB capacity \u0026gt; 70% for 10 minutes - Lambda concurrent executions \u0026gt; 80% for 5 minutes - Daily cost \u0026gt; budget threshold Quality Issues: - Recipe approval rate \u0026lt; 30% for 1 hour - Invalid ingredient reports \u0026gt; 50 per hour - User error rate \u0026gt; 5% for 10 minutesSNS Alert Configuration#\rTopics: smart-cooking-prod-critical: Subscribers: - Email: admin@smartcooking.app - SMS: +84xxx (for critical only) smart-cooking-prod-warnings: Subscribers: - Email: team@smartcooking.app - Slack: #alerts channel Alert Format: Subject: \u0026#34;[CRITICAL] Smart Cooking - API Gateway High Error Rate\u0026#34; Body: | Alert: API Gateway 5XX Error Rate Environment: Production Current Value: 15.2% Threshold: 5% Duration: 3 minutes Dashboard: https://console.aws.amazon.com/cloudwatch/... Runbook: https://wiki.smartcooking.app/runbooks/api-errors   Dashboards#\rExecutive Dashboard#\rHigh-Level Metrics (Daily/Weekly): - Total Users (Active) - Revenue (Premium subscriptions) - System Uptime % - Cost per User - Customer Satisfaction (App Store ratings) Widgets: - User Growth Chart (30 days) - Revenue Trend (90 days) - Cost Breakdown Pie Chart - System Health StatusOperations Dashboard#\rReal-Time Metrics: - API Request Rate (requests/minute) - Error Rate % (last 1 hour) - Average Response Time (p95) - Active Lambda Invocations - DynamoDB Throttling Events Performance Widgets: - API Gateway Latency (5-minute intervals) - Lambda Duration by Function - DynamoDB Query Performance - AI Generation Success Rate - Cost Trend (daily)AI Performance Dashboard#\rAI-Specific Metrics: - DB vs AI Mix Ratio (daily trend) - Recipe Auto-Approval Rate - AI Generation Time Distribution - Invalid Ingredient Reports - Bedrock API Success Rate Business Impact: - Cost Savings from DB Mix - User Satisfaction with AI Recipes - Recipe Database Growth RateDashboard Implementation#\r// CDK Dashboard Configuration const dashboard = new cloudwatch.Dashboard(this, \u0026#39;SmartCookingDashboard\u0026#39;, { dashboardName: \u0026#39;smart-cooking-production\u0026#39; }); // API Gateway metrics dashboard.addWidgets( new cloudwatch.GraphWidget({ title: \u0026#39;API Gateway Requests\u0026#39;, left: [apiGateway.metricCount()], right: [apiGateway.metricLatency()] }), new cloudwatch.GraphWidget({ title: \u0026#39;Lambda Performance\u0026#39;, left: [ aiSuggestionFunction.metricDuration(), cookingHistoryFunction.metricDuration() ], right: [ aiSuggestionFunction.metricErrors(), cookingHistoryFunction.metricErrors() ] }) ); // Custom business metrics dashboard.addWidgets( new cloudwatch.GraphWidget({ title: \u0026#39;AI Performance\u0026#39;, left: [ new cloudwatch.Metric({ namespace: \u0026#39;SmartCooking/AI\u0026#39;, metricName: \u0026#39;RecipeGenerationTime\u0026#39;, statistic: \u0026#39;Average\u0026#39; }) ] }) );   Monitoring Tools \u0026amp; Integration#\rThird-Party Integrations#\rSlack Integration: - Critical alerts to #alerts channel - Daily summary to #operations channel - Cost reports to #finance channel PagerDuty (Future): - Escalation for critical alerts - On-call rotation management - Incident response coordination Datadog (Alternative): - Advanced APM capabilities - Custom dashboards - Machine learning anomaly detectionMonitoring Automation#\rAuto-Remediation: - Lambda timeout → Increase memory allocation - DynamoDB throttling → Enable auto-scaling - High error rate → Circuit breaker activation - Cost spike → Rate limiting activation Health Checks: - Synthetic transactions every 5 minutes - End-to-end user journey testing - Database connectivity checks - AI service availability monitoring   Performance Baselines#\rCurrent Baselines (MVP)#\rAPI Performance: - Average Response Time: 200ms - P95 Response Time: 500ms - P99 Response Time: 1000ms - Error Rate: \u0026lt;0.5% Lambda Performance: - AI Suggestion: 3-5s average - Other Functions: \u0026lt;1s average - Cold Start Rate: \u0026lt;5% - Memory Utilization: \u0026lt;70% Database Performance: - Query Latency: \u0026lt;50ms (p95) - Write Latency: \u0026lt;25ms (p95) - Throttling Events: 0 - Hot Partitions: 0Target Improvements (Scale)#\r6-Month Targets: - API P95 Latency: \u0026lt;300ms - AI Generation: \u0026lt;2s average - Error Rate: \u0026lt;0.1% - Uptime: \u0026gt;99.9% 12-Month Targets: - API P95 Latency: \u0026lt;200ms - AI Generation: \u0026lt;1s average - Cost per User: \u0026lt;$0.05 - DB Coverage: \u0026gt;80%Related Documents#\r30 - Cost Analysis 31 - Scaling 10 - Architecture 22 - DevOps "},{"id":20,"href":"/docs/dlc/40-auth/","title":"40 - Authentication \u0026 Authorization","section":"Docs","content":"Authentication \u0026amp; Authorization - Smart Cooking App#\rAuthentication Overview#\rAuthentication Strategy#\rPrimary: Amazon Cognito User Pool Token Type: JWT (JSON Web Tokens) Session Management: Access + Refresh tokens MFA: Optional (future enhancement) User Journey#\rRegistration → Email Verification → Profile Setup → Dashboard Access👤 Cognito User Pool Configuration#\rUser Pool Settings#\rPool Name: smart-cooking-users Sign-in Options: - Email (primary) - Username (secondary) Password Policy: Minimum Length: 8 characters Require: - Lowercase letters: Yes - Uppercase letters: Yes - Numbers: Yes - Special characters: Optional Temporary Password Expiry: 24 hours Account Recovery: - Email verification code - No SMS (cost optimization) Email Verification: Required: Yes Code Expiry: 24 hours From Email: noreply@smartcooking.appCustom Attributes#\rStandard Attributes: - email (required, mutable) - name (required, mutable) - birthdate (optional, mutable) - gender (optional, mutable) Custom Attributes: - custom:role (user|admin, immutable) - custom:username (unique identifier, mutable) - custom:country (Vietnam, US, etc., mutable) - custom:onboarding_completed (boolean, mutable)App Client Configuration#\rApp Client Name: smart-cooking-web-client Auth Flows: - ALLOW_USER_PASSWORD_AUTH - ALLOW_REFRESH_TOKEN_AUTH - ALLOW_USER_SRP_AUTH Token Validity: Access Token: 1 hour ID Token: 1 hour Refresh Token: 30 days Read/Write Attributes: Read: email, name, birthdate, gender, custom:username, custom:country Write: name, birthdate, gender, custom:username, custom:country OAuth 2.0 Settings: Callback URLs: - https://smartcooking.app/auth/callback - http://localhost:3000/auth/callback (dev) Sign-out URLs: - https://smartcooking.app/ - http://localhost:3000/ (dev)Authentication Flow#\rRegistration Flow#\rsequenceDiagram participant User participant WebApp participant Cognito participant Lambda participant DynamoDB User-\u0026gt;\u0026gt;WebApp: Fill registration form WebApp-\u0026gt;\u0026gt;Cognito: SignUp(email, password, attributes) Cognito--\u0026gt;\u0026gt;WebApp: User created (unconfirmed) Cognito-\u0026gt;\u0026gt;User: Send verification email User-\u0026gt;\u0026gt;User: Check email \u0026amp; click link User-\u0026gt;\u0026gt;WebApp: Enter verification code WebApp-\u0026gt;\u0026gt;Cognito: ConfirmSignUp(code) Cognito--\u0026gt;\u0026gt;WebApp: User confirmed Cognito-\u0026gt;\u0026gt;Lambda: Post-Confirmation Trigger Lambda-\u0026gt;\u0026gt;DynamoDB: Create user profile Lambda-\u0026gt;\u0026gt;DynamoDB: Set default privacy settings Lambda--\u0026gt;\u0026gt;Cognito: Success WebApp-\u0026gt;\u0026gt;User: Registration completeLogin Flow#\rsequenceDiagram participant User participant WebApp participant Cognito User-\u0026gt;\u0026gt;WebApp: Enter email/password WebApp-\u0026gt;\u0026gt;Cognito: InitiateAuth(email, password) Cognito--\u0026gt;\u0026gt;WebApp: JWT tokens (Access, ID, Refresh) WebApp-\u0026gt;\u0026gt;WebApp: Store tokens securely WebApp-\u0026gt;\u0026gt;User: Redirect to dashboardToken Refresh Flow#\rsequenceDiagram participant WebApp participant Cognito WebApp-\u0026gt;\u0026gt;WebApp: Access token expired WebApp-\u0026gt;\u0026gt;Cognito: RefreshToken(refresh_token) Cognito--\u0026gt;\u0026gt;WebApp: New access \u0026amp; ID tokens WebApp-\u0026gt;\u0026gt;WebApp: Update stored tokensJWT Token Structure#\rAccess Token Claims#\r{ \u0026#34;sub\u0026#34;: \u0026#34;uuid-123-456-789\u0026#34;, \u0026#34;cognito:username\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;email_verified\u0026#34;: true, \u0026#34;iss\u0026#34;: \u0026#34;https://cognito-idp.us-east-1.amazonaws.com/us-east-1_ABC123\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;abc123def456\u0026#34;, \u0026#34;token_use\u0026#34;: \u0026#34;access\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;aws.cognito.signin.user.admin\u0026#34;, \u0026#34;auth_time\u0026#34;: 1706097600, \u0026#34;exp\u0026#34;: 1706101200, \u0026#34;iat\u0026#34;: 1706097600 }ID Token Claims#\r{ \u0026#34;sub\u0026#34;: \u0026#34;uuid-123-456-789\u0026#34;, \u0026#34;cognito:username\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1990-01-15\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34;, \u0026#34;custom:role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;custom:username\u0026#34;: \u0026#34;johndoe\u0026#34;, \u0026#34;custom:country\u0026#34;: \u0026#34;Vietnam\u0026#34;, \u0026#34;custom:onboarding_completed\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;iss\u0026#34;: \u0026#34;https://cognito-idp.us-east-1.amazonaws.com/us-east-1_ABC123\u0026#34;, \u0026#34;aud\u0026#34;: \u0026#34;abc123def456\u0026#34;, \u0026#34;token_use\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;auth_time\u0026#34;: 1706097600, \u0026#34;exp\u0026#34;: 1706101200, \u0026#34;iat\u0026#34;: 1706097600 }Post-Confirmation Lambda#\rLambda Function: auth-handler#\rexports.handler = async (event, context) =\u0026gt; { console.log(\u0026#39;Post-confirmation trigger:\u0026#39;, JSON.stringify(event, null, 2)); const { userAttributes, userName } = event.request; const userId = userAttributes.sub; try { // Create user profile in DynamoDB await createUserProfile(userId, userAttributes); // Set default privacy settings await createDefaultPrivacySettings(userId); // Log successful user creation console.log(`User profile created successfully for: ${userId}`); return event; } catch (error) { console.error(\u0026#39;Error in post-confirmation:\u0026#39;, error); throw error; } }; async function createUserProfile(userId, attributes) { const userProfile = { PK: `USER#${userId}`, SK: \u0026#39;PROFILE\u0026#39;, entity_type: \u0026#39;USER_PROFILE\u0026#39;, user_id: userId, email: attributes.email, username: attributes[\u0026#39;custom:username\u0026#39;] || attributes.email, full_name: attributes.name || \u0026#39;\u0026#39;, date_of_birth: attributes.birthdate || null, gender: attributes.gender || null, country: attributes[\u0026#39;custom:country\u0026#39;] || null, role: attributes[\u0026#39;custom:role\u0026#39;] || \u0026#39;user\u0026#39;, is_active: true, created_at: new Date().toISOString(), updated_at: new Date().toISOString(), // GSI1 for role-based queries GSI1PK: `ROLE#${attributes[\u0026#39;custom:role\u0026#39;] || \u0026#39;user\u0026#39;}`, GSI1SK: `USER#${new Date().toISOString()}` }; await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: userProfile }); // Create default preferences const userPreferences = { PK: `USER#${userId}`, SK: \u0026#39;PREFERENCES\u0026#39;, entity_type: \u0026#39;USER_PREFERENCES\u0026#39;, dietary_restrictions: [], allergies: [], favorite_cuisines: [], preferred_cooking_methods: [], preferred_recipe_count: 1, spice_level: \u0026#39;medium\u0026#39;, created_at: new Date().toISOString(), updated_at: new Date().toISOString() }; await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: userPreferences }); } async function createDefaultPrivacySettings(userId) { const privacySettings = { PK: `USER#${userId}`, SK: \u0026#39;PRIVACY\u0026#39;, entity_type: \u0026#39;PRIVACY_SETTINGS\u0026#39;, profile_visibility: \u0026#39;public\u0026#39;, email_visibility: \u0026#39;private\u0026#39;, date_of_birth_visibility: \u0026#39;friends\u0026#39;, gender_visibility: \u0026#39;public\u0026#39;, country_visibility: \u0026#39;public\u0026#39;, recipes_visibility: \u0026#39;public\u0026#39;, ingredients_visibility: \u0026#39;friends\u0026#39;, preferences_visibility: \u0026#39;friends\u0026#39;, created_at: new Date().toISOString(), updated_at: new Date().toISOString() }; await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: privacySettings }); }Authorization Implementation#\rAPI Gateway Authorizer#\rAuthorizer Type: COGNITO_USER_POOLS User Pool: smart-cooking-users Token Source: Authorization header (Bearer token) Token Validation: - Signature verification - Expiration check - Issuer validation Authorization Caching: 300 seconds (5 minutes) Identity Source: method.request.header.AuthorizationLambda Authorization Context#\r// Extract user context from Cognito authorizer exports.handler = async (event, context) =\u0026gt; { const claims = event.requestContext.authorizer.claims; const userContext = { userId: claims.sub, username: claims[\u0026#39;cognito:username\u0026#39;], email: claims.email, role: claims[\u0026#39;custom:role\u0026#39;] || \u0026#39;user\u0026#39;, country: claims[\u0026#39;custom:country\u0026#39;], isActive: true // Additional check can be added }; // Role-based authorization if (event.resource.includes(\u0026#39;/admin/\u0026#39;) \u0026amp;\u0026amp; userContext.role !== \u0026#39;admin\u0026#39;) { return { statusCode: 403, body: JSON.stringify({ error: \u0026#39;forbidden\u0026#39;, message: \u0026#39;Admin access required\u0026#39; }) }; } // Resource ownership check const resourceUserId = event.pathParameters?.userId; if (resourceUserId \u0026amp;\u0026amp; resourceUserId !== userContext.userId \u0026amp;\u0026amp; userContext.role !== \u0026#39;admin\u0026#39;) { return { statusCode: 403, body: JSON.stringify({ error: \u0026#39;forbidden\u0026#39;, message: \u0026#39;You can only access your own resources\u0026#39; }) }; } // Continue with business logic return await processRequest(event, userContext); };Role-Based Access Control (RBAC)#\rconst PERMISSIONS = { user: [ \u0026#39;read:own_profile\u0026#39;, \u0026#39;write:own_profile\u0026#39;, \u0026#39;read:own_ingredients\u0026#39;, \u0026#39;write:own_ingredients\u0026#39;, \u0026#39;read:public_recipes\u0026#39;, \u0026#39;write:own_recipes\u0026#39;, \u0026#39;read:ai_suggestions\u0026#39;, \u0026#39;write:ai_suggestions\u0026#39;, \u0026#39;read:own_cooking_history\u0026#39;, \u0026#39;write:own_cooking_history\u0026#39;, \u0026#39;write:recipe_ratings\u0026#39;, \u0026#39;read:friends\u0026#39;, \u0026#39;write:friends\u0026#39;, \u0026#39;read:own_posts\u0026#39;, \u0026#39;write:own_posts\u0026#39;, \u0026#39;write:comments\u0026#39;, \u0026#39;write:reactions\u0026#39; ], admin: [ \u0026#39;*\u0026#39;, // All permissions \u0026#39;read:all_users\u0026#39;, \u0026#39;write:user_status\u0026#39;, \u0026#39;read:all_recipes\u0026#39;, \u0026#39;write:recipe_approval\u0026#39;, \u0026#39;read:statistics\u0026#39;, \u0026#39;read:invalid_reports\u0026#39; ] }; function hasPermission(role, permission) { const rolePermissions = PERMISSIONS[role] || []; return rolePermissions.includes(\u0026#39;*\u0026#39;) || rolePermissions.includes(permission); } function checkPermission(userRole, requiredPermission) { if (!hasPermission(userRole, requiredPermission)) { throw new Error(`Permission denied: ${requiredPermission} required`); } }Frontend Authentication#\rAuth Service (Client-Side)#\r// src/public/js/auth.js class AuthService { constructor() { this.user = null; this.isAuthenticated = false; this.checkAuthState(); } async checkAuthState() { const token = this.getStoredToken(); if (token \u0026amp;\u0026amp; !this.isTokenExpired(token)) { this.user = this.parseTokenClaims(token); this.isAuthenticated = true; } else { this.clearAuth(); } } async login(email, password) { try { const response = await fetch(\u0026#39;/auth/login\u0026#39;, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify({ email, password }) }); if (!response.ok) { const error = await response.json(); throw new Error(error.message || \u0026#39;Login failed\u0026#39;); } const data = await response.json(); this.setAuth(data.access_token, data.user); return data; } catch (error) { throw error; } } async register(userData) { try { const response = await fetch(\u0026#39;/auth/register\u0026#39;, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify(userData) }); if (!response.ok) { const error = await response.json(); throw new Error(error.message || \u0026#39;Registration failed\u0026#39;); } return await response.json(); } catch (error) { throw error; } } async logout() { try { await fetch(\u0026#39;/auth/logout\u0026#39;, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Authorization\u0026#39;: `Bearer ${this.getStoredToken()}` } }); } catch (error) { console.error(\u0026#39;Logout error:\u0026#39;, error); } finally { this.clearAuth(); window.location.href = \u0026#39;/\u0026#39;; } } setAuth(token, user) { localStorage.setItem(\u0026#39;access_token\u0026#39;, token); this.user = user; this.isAuthenticated = true; } clearAuth() { localStorage.removeItem(\u0026#39;access_token\u0026#39;); this.user = null; this.isAuthenticated = false; } getStoredToken() { return localStorage.getItem(\u0026#39;access_token\u0026#39;); } isTokenExpired(token) { try { const payload = JSON.parse(atob(token.split(\u0026#39;.\u0026#39;)[1])); return payload.exp * 1000 \u0026lt; Date.now(); } catch (error) { return true; } } parseTokenClaims(token) { try { const payload = JSON.parse(atob(token.split(\u0026#39;.\u0026#39;)[1])); return { userId: payload.sub, email: payload.email, username: payload[\u0026#39;cognito:username\u0026#39;], role: payload[\u0026#39;custom:role\u0026#39;] || \u0026#39;user\u0026#39; }; } catch (error) { return null; } } getAuthHeaders() { const token = this.getStoredToken(); return token ? { \u0026#39;Authorization\u0026#39;: `Bearer ${token}` } : {}; } } // Global auth service instance const authService = new AuthService();Auth Middleware (Server-Side)#\r// src/middleware/auth.js const authService = require(\u0026#39;../services/authService\u0026#39;); const requireAuth = (req, res, next) =\u0026gt; { const token = req.headers.authorization?.replace(\u0026#39;Bearer \u0026#39;, \u0026#39;\u0026#39;) || req.cookies.accessToken; if (!token) { return res.redirect(\u0026#39;/auth/login\u0026#39;); } try { const user = authService.extractUserFromToken(token); req.user = user; res.locals.user = user; next(); } catch (error) { res.clearCookie(\u0026#39;accessToken\u0026#39;); return res.redirect(\u0026#39;/auth/login\u0026#39;); } }; const requireAdmin = (req, res, next) =\u0026gt; { requireAuth(req, res, () =\u0026gt; { if (req.user.role !== \u0026#39;admin\u0026#39;) { return res.status(403).render(\u0026#39;error\u0026#39;, { title: \u0026#39;Access Denied\u0026#39;, message: \u0026#39;Admin privileges required\u0026#39; }); } next(); }); }; const optionalAuth = (req, res, next) =\u0026gt; { const token = req.headers.authorization?.replace(\u0026#39;Bearer \u0026#39;, \u0026#39;\u0026#39;) || req.cookies.accessToken; if (token) { try { const user = authService.extractUserFromToken(token); req.user = user; res.locals.user = user; } catch (error) { res.clearCookie(\u0026#39;accessToken\u0026#39;); } } next(); }; module.exports = { requireAuth, requireAdmin, optionalAuth };API Client with Auth#\r// src/services/apiClient.js class ApiClient { constructor(baseURL) { this.baseURL = baseURL || process.env.API_URL; } async request(endpoint, options = {}) { const url = `${this.baseURL}${endpoint}`; const token = localStorage.getItem(\u0026#39;access_token\u0026#39;); const config = { headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, ...options.headers }, ...options }; if (token) { config.headers.Authorization = `Bearer ${token}`; } try { const response = await fetch(url, config); if (response.status === 401) { // Token expired, redirect to login localStorage.removeItem(\u0026#39;access_token\u0026#39;); window.location.href = \u0026#39;/auth/login\u0026#39;; return; } if (!response.ok) { const error = await response.json(); throw new Error(error.message || \u0026#39;Request failed\u0026#39;); } return await response.json(); } catch (error) { throw error; } } async get(endpoint, options = {}) { return this.request(endpoint, { method: \u0026#39;GET\u0026#39;, ...options }); } async post(endpoint, data, options = {}) { return this.request(endpoint, { method: \u0026#39;POST\u0026#39;, body: JSON.stringify(data), ...options }); } async put(endpoint, data, options = {}) { return this.request(endpoint, { method: \u0026#39;PUT\u0026#39;, body: JSON.stringify(data), ...options }); } async delete(endpoint, options = {}) { return this.request(endpoint, { method: \u0026#39;DELETE\u0026#39;, ...options }); } } const apiClient = new ApiClient(); module.exports = apiClient;Security Best Practices#\rToken Storage#\r// Secure token storage (avoid localStorage for sensitive data) class SecureTokenStorage { private static readonly ACCESS_TOKEN_KEY = \u0026#39;access_token\u0026#39;; private static readonly REFRESH_TOKEN_KEY = \u0026#39;refresh_token\u0026#39;; static setTokens(accessToken: string, refreshToken: string) { // Use httpOnly cookies in production if (typeof window !== \u0026#39;undefined\u0026#39;) { // For demo purposes - use secure cookies in production document.cookie = `${this.ACCESS_TOKEN_KEY}=${accessToken}; Secure; SameSite=Strict; Max-Age=3600`; document.cookie = `${this.REFRESH_TOKEN_KEY}=${refreshToken}; Secure; SameSite=Strict; Max-Age=2592000`; } } static clearTokens() { if (typeof window !== \u0026#39;undefined\u0026#39;) { document.cookie = `${this.ACCESS_TOKEN_KEY}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`; document.cookie = `${this.REFRESH_TOKEN_KEY}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`; } } }Input Validation#\r// Validation schemas for auth endpoints const registrationSchema = { email: { type: \u0026#39;string\u0026#39;, format: \u0026#39;email\u0026#39;, required: true }, password: { type: \u0026#39;string\u0026#39;, minLength: 8, pattern: \u0026#39;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)\u0026#39;, required: true }, fullName: { type: \u0026#39;string\u0026#39;, minLength: 2, maxLength: 100, required: true }, username: { type: \u0026#39;string\u0026#39;, minLength: 3, maxLength: 30, pattern: \u0026#39;^[a-zA-Z0-9_]+$\u0026#39;, required: true } };Related Documents#\r13 - Security 41 - Privacy 21 - Frontend 20 - Backend "},{"id":21,"href":"/docs/dlc/41-privacy/","title":"41 - Privacy \u0026 Data Protection","section":"Docs","content":"Privacy \u0026amp; Data Protection - Smart Cooking App#\rPrivacy Overview#\rPrivacy Principles#\rData Minimization: Collect only necessary data User Control: Users control their data visibility Transparency: Clear data usage policies Security: Protect data with encryption Compliance: GDPR-ready implementation Privacy Levels#\rPublic: Visible to everyone Friends: Visible to accepted friends only Private: Visible to user only Privacy Settings System#\rPrivacy Configuration#\rDefault Privacy Settings: profile_visibility: public email_visibility: private date_of_birth_visibility: friends gender_visibility: public country_visibility: public recipes_visibility: public ingredients_visibility: friends preferences_visibility: friends cooking_history_visibility: private posts_visibility: publicPrivacy Settings Schema#\r// DynamoDB Privacy Settings Item { PK: \u0026#34;USER#\u0026lt;user_id\u0026gt;\u0026#34;, SK: \u0026#34;PRIVACY\u0026#34;, entity_type: \u0026#34;PRIVACY_SETTINGS\u0026#34;, // Profile visibility profile_visibility: \u0026#34;public|friends|private\u0026#34;, email_visibility: \u0026#34;private\u0026#34;, // Always private date_of_birth_visibility: \u0026#34;friends\u0026#34;, gender_visibility: \u0026#34;public\u0026#34;, country_visibility: \u0026#34;public\u0026#34;, // Content visibility recipes_visibility: \u0026#34;public\u0026#34;, ingredients_visibility: \u0026#34;friends\u0026#34;, preferences_visibility: \u0026#34;friends\u0026#34;, cooking_history_visibility: \u0026#34;private\u0026#34;, posts_visibility: \u0026#34;public\u0026#34;, // Advanced settings allow_friend_requests: true, show_online_status: false, allow_recipe_sharing: true, created_at: \u0026#34;2025-01-20T10:00:00Z\u0026#34;, updated_at: \u0026#34;2025-01-20T10:00:00Z\u0026#34; }Privacy Filtering Implementation#\rBackend Privacy Filter#\r// shared/privacy-filter.js class PrivacyFilter { constructor(ddb) { this.ddb = ddb; } async filterUserData(targetUserId, requestingUserId, userData) { // Self-access - return all data if (targetUserId === requestingUserId) { return userData; } // Get privacy settings const privacySettings = await this.getPrivacySettings(targetUserId); // Check friendship status const friendshipStatus = await this.getFriendshipStatus(targetUserId, requestingUserId); // Apply privacy filters return this.applyPrivacyRules(userData, privacySettings, friendshipStatus); } async getPrivacySettings(userId) { const result = await this.ddb.get({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `USER#${userId}`, SK: \u0026#39;PRIVACY\u0026#39; } }); return result.Item || this.getDefaultPrivacySettings(); } async getFriendshipStatus(userId1, userId2) { const result = await this.ddb.get({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `USER#${userId1}`, SK: `FRIEND#${userId2}` } }); return result.Item?.status || \u0026#39;none\u0026#39;; } applyPrivacyRules(userData, privacySettings, friendshipStatus) { const filteredData = { ...userData }; // Helper function to check visibility const canView = (visibility) =\u0026gt; { switch (visibility) { case \u0026#39;public\u0026#39;: return true; case \u0026#39;friends\u0026#39;: return friendshipStatus === \u0026#39;accepted\u0026#39;; case \u0026#39;private\u0026#39;: return false; default: return false; } }; // Filter profile fields if (!canView(privacySettings.email_visibility)) { delete filteredData.email; } if (!canView(privacySettings.date_of_birth_visibility)) { delete filteredData.date_of_birth; } if (!canView(privacySettings.gender_visibility)) { delete filteredData.gender; } if (!canView(privacySettings.country_visibility)) { delete filteredData.country; } // Filter preferences if (!canView(privacySettings.preferences_visibility)) { delete filteredData.preferences; } // Filter ingredients if (!canView(privacySettings.ingredients_visibility)) { delete filteredData.ingredients; } return filteredData; } getDefaultPrivacySettings() { return { profile_visibility: \u0026#39;public\u0026#39;, email_visibility: \u0026#39;private\u0026#39;, date_of_birth_visibility: \u0026#39;friends\u0026#39;, gender_visibility: \u0026#39;public\u0026#39;, country_visibility: \u0026#39;public\u0026#39;, recipes_visibility: \u0026#39;public\u0026#39;, ingredients_visibility: \u0026#39;friends\u0026#39;, preferences_visibility: \u0026#39;friends\u0026#39;, cooking_history_visibility: \u0026#39;private\u0026#39;, posts_visibility: \u0026#39;public\u0026#39; }; } } module.exports = PrivacyFilter;Privacy-Aware API Endpoints#\r// user-profile Lambda with privacy filtering exports.handler = async (event, context) =\u0026gt; { const { httpMethod, pathParameters } = event; const requestingUserId = event.requestContext.authorizer.claims.sub; const targetUserId = pathParameters?.userId || requestingUserId; const privacyFilter = new PrivacyFilter(ddb); switch (httpMethod) { case \u0026#39;GET\u0026#39;: return await getUserProfile(targetUserId, requestingUserId, privacyFilter); case \u0026#39;PUT\u0026#39;: return await updateUserProfile(event, requestingUserId); default: return errorResponse(405, \u0026#39;method_not_allowed\u0026#39;); } }; async function getUserProfile(targetUserId, requestingUserId, privacyFilter) { try { // Get user profile const profileResult = await ddb.get({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `USER#${targetUserId}`, SK: \u0026#39;PROFILE\u0026#39; } }); if (!profileResult.Item) { return errorResponse(404, \u0026#39;user_not_found\u0026#39;); } // Get user preferences const preferencesResult = await ddb.get({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `USER#${targetUserId}`, SK: \u0026#39;PREFERENCES\u0026#39; } }); // Get user ingredients const ingredientsResult = await ddb.query({ TableName: process.env.DYNAMODB_TABLE, KeyConditionExpression: \u0026#39;PK = :pk AND begins_with(SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `USER#${targetUserId}`, \u0026#39;:sk\u0026#39;: \u0026#39;INGREDIENT#\u0026#39; } }); const userData = { ...profileResult.Item, preferences: preferencesResult.Item, ingredients: ingredientsResult.Items || [] }; // Apply privacy filtering const filteredData = await privacyFilter.filterUserData( targetUserId, requestingUserId, userData ); return successResponse(filteredData); } catch (error) { console.error(\u0026#39;Get user profile error:\u0026#39;, error); return errorResponse(500, \u0026#39;internal_error\u0026#39;); } }Privacy Settings Management#\rUpdate Privacy Settings API#\r// PUT /user/privacy endpoint async function updatePrivacySettings(event, userId) { const updates = JSON.parse(event.body); // Validate privacy settings const validSettings = [ \u0026#39;profile_visibility\u0026#39;, \u0026#39;date_of_birth_visibility\u0026#39;, \u0026#39;gender_visibility\u0026#39;, \u0026#39;country_visibility\u0026#39;, \u0026#39;recipes_visibility\u0026#39;, \u0026#39;ingredients_visibility\u0026#39;, \u0026#39;preferences_visibility\u0026#39;, \u0026#39;cooking_history_visibility\u0026#39;, \u0026#39;posts_visibility\u0026#39;, \u0026#39;allow_friend_requests\u0026#39;, \u0026#39;show_online_status\u0026#39;, \u0026#39;allow_recipe_sharing\u0026#39; ]; const validVisibility = [\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;]; // Filter and validate updates const filteredUpdates = {}; for (const [key, value] of Object.entries(updates)) { if (validSettings.includes(key)) { if (key.endsWith(\u0026#39;_visibility\u0026#39;) \u0026amp;\u0026amp; !validVisibility.includes(value)) { return errorResponse(400, \u0026#39;invalid_visibility\u0026#39;, `Invalid visibility: ${value}`); } if (typeof value === \u0026#39;boolean\u0026#39; || validVisibility.includes(value)) { filteredUpdates[key] = value; } } } // Email is always private (cannot be changed) if (filteredUpdates.email_visibility) { delete filteredUpdates.email_visibility; } try { // Build update expression const updateExpressions = []; const expressionAttributeValues = {}; for (const [key, value] of Object.entries(filteredUpdates)) { updateExpressions.push(`${key} = :${key}`); expressionAttributeValues[`:${key}`] = value; } expressionAttributeValues[\u0026#39;:updated_at\u0026#39;] = new Date().toISOString(); updateExpressions.push(\u0026#39;updated_at = :updated_at\u0026#39;); await ddb.update({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `USER#${userId}`, SK: \u0026#39;PRIVACY\u0026#39; }, UpdateExpression: `SET ${updateExpressions.join(\u0026#39;, \u0026#39;)}`, ExpressionAttributeValues: expressionAttributeValues }); return successResponse({ message: \u0026#39;Privacy settings updated successfully\u0026#39;, updated_fields: Object.keys(filteredUpdates) }); } catch (error) { console.error(\u0026#39;Update privacy settings error:\u0026#39;, error); return errorResponse(500, \u0026#39;update_failed\u0026#39;); } }Frontend Privacy Controls#\rPrivacy Settings Page#\r// src/public/js/privacy.js class PrivacySettings { constructor() { this.settings = null; this.isLoading = true; this.isSaving = false; this.init(); } async init() { await this.loadPrivacySettings(); this.renderSettings(); this.bindEvents(); } async loadPrivacySettings() { try { const response = await apiClient.get(\u0026#39;/user/privacy\u0026#39;); this.settings = response; this.isLoading = false; } catch (error) { this.showError(\u0026#39;Failed to load privacy settings\u0026#39;); this.isLoading = false; } } renderSettings() { const container = document.getElementById(\u0026#39;privacy-settings\u0026#39;); if (this.isLoading) { container.innerHTML = \u0026#39;\u0026lt;div class=\u0026#34;loading\u0026#34;\u0026gt;Loading privacy settings...\u0026lt;/div\u0026gt;\u0026#39;; return; } if (!this.settings) { container.innerHTML = \u0026#39;\u0026lt;div class=\u0026#34;error\u0026#34;\u0026gt;Failed to load privacy settings\u0026lt;/div\u0026gt;\u0026#39;; return; } const visibilityOptions = [ { value: \u0026#39;public\u0026#39;, label: \u0026#39;Public - Everyone can see\u0026#39; }, { value: \u0026#39;friends\u0026#39;, label: \u0026#39;Friends - Only friends can see\u0026#39; }, { value: \u0026#39;private\u0026#39;, label: \u0026#39;Private - Only you can see\u0026#39; } ]; container.innerHTML = ` \u0026lt;div class=\u0026#34;privacy-form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Profile Privacy\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;form-grid\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Date of Birth\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;date_of_birth_visibility\u0026#34; value=\u0026#34;${this.settings.date_of_birth_visibility}\u0026#34;\u0026gt; ${visibilityOptions.map(opt =\u0026gt; `\u0026lt;option value=\u0026#34;${opt.value}\u0026#34; ${this.settings.date_of_birth_visibility === opt.value ? \u0026#39;selected\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; ${opt.label} \u0026lt;/option\u0026gt;` ).join(\u0026#39;\u0026#39;)} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Gender\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;gender_visibility\u0026#34; value=\u0026#34;${this.settings.gender_visibility}\u0026#34;\u0026gt; ${visibilityOptions.map(opt =\u0026gt; `\u0026lt;option value=\u0026#34;${opt.value}\u0026#34; ${this.settings.gender_visibility === opt.value ? \u0026#39;selected\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; ${opt.label} \u0026lt;/option\u0026gt;` ).join(\u0026#39;\u0026#39;)} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Country\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;country_visibility\u0026#34; value=\u0026#34;${this.settings.country_visibility}\u0026#34;\u0026gt; ${visibilityOptions.map(opt =\u0026gt; `\u0026lt;option value=\u0026#34;${opt.value}\u0026#34; ${this.settings.country_visibility === opt.value ? \u0026#39;selected\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; ${opt.label} \u0026lt;/option\u0026gt;` ).join(\u0026#39;\u0026#39;)} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Content Privacy\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;form-grid\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Recipes\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;recipes_visibility\u0026#34; value=\u0026#34;${this.settings.recipes_visibility}\u0026#34;\u0026gt; ${visibilityOptions.map(opt =\u0026gt; `\u0026lt;option value=\u0026#34;${opt.value}\u0026#34; ${this.settings.recipes_visibility === opt.value ? \u0026#39;selected\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; ${opt.label} \u0026lt;/option\u0026gt;` ).join(\u0026#39;\u0026#39;)} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Ingredients\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;ingredients_visibility\u0026#34; value=\u0026#34;${this.settings.ingredients_visibility}\u0026#34;\u0026gt; ${visibilityOptions.map(opt =\u0026gt; `\u0026lt;option value=\u0026#34;${opt.value}\u0026#34; ${this.settings.ingredients_visibility === opt.value ? \u0026#39;selected\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; ${opt.label} \u0026lt;/option\u0026gt;` ).join(\u0026#39;\u0026#39;)} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Food Preferences\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;preferences_visibility\u0026#34; value=\u0026#34;${this.settings.preferences_visibility}\u0026#34;\u0026gt; ${visibilityOptions.map(opt =\u0026gt; `\u0026lt;option value=\u0026#34;${opt.value}\u0026#34; ${this.settings.preferences_visibility === opt.value ? \u0026#39;selected\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; ${opt.label} \u0026lt;/option\u0026gt;` ).join(\u0026#39;\u0026#39;)} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Posts\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;posts_visibility\u0026#34; value=\u0026#34;${this.settings.posts_visibility}\u0026#34;\u0026gt; ${visibilityOptions.map(opt =\u0026gt; `\u0026lt;option value=\u0026#34;${opt.value}\u0026#34; ${this.settings.posts_visibility === opt.value ? \u0026#39;selected\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; ${opt.label} \u0026lt;/option\u0026gt;` ).join(\u0026#39;\u0026#39;)} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Social Settings\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;checkbox-label\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;allow_friend_requests\u0026#34; ${this.settings.allow_friend_requests ? \u0026#39;checked\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; Allow Friend Requests \u0026lt;small\u0026gt;Let others send you friend requests\u0026lt;/small\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;checkbox-label\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;show_online_status\u0026#34; ${this.settings.show_online_status ? \u0026#39;checked\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; Show Online Status \u0026lt;small\u0026gt;Let friends see when you\u0026#39;re online\u0026lt;/small\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;checkbox-label\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;allow_recipe_sharing\u0026#34; ${this.settings.allow_recipe_sharing ? \u0026#39;checked\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; Allow Recipe Sharing \u0026lt;small\u0026gt;Let others share your recipes\u0026lt;/small\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-actions\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;save-privacy-settings\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; ${this.isSaving ? \u0026#39;disabled\u0026#39; : \u0026#39;\u0026#39;}\u0026gt; ${this.isSaving ? \u0026#39;Saving...\u0026#39; : \u0026#39;Save Privacy Settings\u0026#39;} \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; `; } bindEvents() { const saveButton = document.getElementById(\u0026#39;save-privacy-settings\u0026#39;); if (saveButton) { saveButton.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; this.saveSettings()); } // Bind change events for all form elements const formElements = document.querySelectorAll(\u0026#39;#privacy-settings select, #privacy-settings input\u0026#39;); formElements.forEach(element =\u0026gt; { element.addEventListener(\u0026#39;change\u0026#39;, (e) =\u0026gt; this.updateSetting(e.target.id, e.target.value || e.target.checked)); }); } updateSetting(key, value) { if (this.settings) { this.settings[key] = value; } } async saveSettings() { if (!this.settings || this.isSaving) return; this.isSaving = true; this.updateSaveButton(); try { await apiClient.put(\u0026#39;/user/privacy\u0026#39;, this.settings); this.showSuccess(\u0026#39;Privacy settings updated successfully\u0026#39;); } catch (error) { this.showError(\u0026#39;Failed to update privacy settings\u0026#39;); } finally { this.isSaving = false; this.updateSaveButton(); } } updateSaveButton() { const saveButton = document.getElementById(\u0026#39;save-privacy-settings\u0026#39;); if (saveButton) { saveButton.disabled = this.isSaving; saveButton.textContent = this.isSaving ? \u0026#39;Saving...\u0026#39; : \u0026#39;Save Privacy Settings\u0026#39;; } } showSuccess(message) { this.showNotification(message, \u0026#39;success\u0026#39;); } showError(message) { this.showNotification(message, \u0026#39;error\u0026#39;); } showNotification(message, type) { const notification = document.createElement(\u0026#39;div\u0026#39;); notification.className = `notification ${type}`; notification.textContent = message; document.body.appendChild(notification); setTimeout(() =\u0026gt; { notification.remove(); }, 3000); } } // Initialize privacy settings when page loads document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, () =\u0026gt; { new PrivacySettings(); });AI Data Usage Policy#\rAI Privacy Policy#\r## AI Agent Data Usage Policy ### Data Used for AI Personalization The Smart Cooking AI uses the following information to provide personalized recipe suggestions: **Personal Information Used:** - Age range (derived from birth year) - for nutritional recommendations - Gender - for portion size recommendations - Country - for regional cuisine preferences - Food preferences (cooking methods, favorite cuisines) - Allergies - **CRITICAL** for food safety (absolutely avoided) **Data NOT Used:** - Full name or email address - Exact location or address - Payment information - Browsing history outside the app - Personal messages or comments ### Purpose \u0026amp; Usage - **Primary Purpose**: Personalize recipe suggestions only - **No Advertising**: We do not use your data for advertising - **No Third-Party Sharing**: Your data is never sold or shared - **No Profiling**: We don\u0026#39;t create profiles beyond cooking preferences ### User Control - You can update your preferences anytime - You can delete your data anytime - AI suggestions are optional - you can use the app without them - You control what information is shared through privacy settings ### Data Retention - AI suggestion history: 90 days (automatic cleanup) - Personal preferences: Until you delete your account - Anonymized usage patterns: May be kept for service improvement ### Your Rights - Right to access your data - Right to correct your data - Right to delete your data - Right to data portability - Right to object to processingGDPR Compliance#\rData Subject Rights Implementation#\r// GDPR compliance endpoints exports.handler = async (event, context) =\u0026gt; { const { httpMethod, resource } = event; const userId = event.requestContext.authorizer.claims.sub; switch (resource) { case \u0026#39;/user/data-export\u0026#39;: return await exportUserData(userId); case \u0026#39;/user/data-delete\u0026#39;: return await deleteUserData(userId); case \u0026#39;/user/data-portability\u0026#39;: return await getPortableData(userId); default: return errorResponse(404, \u0026#39;not_found\u0026#39;); } }; // Right to Access - Export all user data async function exportUserData(userId) { try { const userData = { profile: await getUserProfile(userId), preferences: await getUserPreferences(userId), ingredients: await getUserIngredients(userId), cookingHistory: await getCookingHistory(userId), aiSuggestions: await getAISuggestions(userId), posts: await getUserPosts(userId), friends: await getUserFriends(userId), privacySettings: await getPrivacySettings(userId) }; return successResponse({ message: \u0026#39;Data export completed\u0026#39;, data: userData, exportDate: new Date().toISOString(), format: \u0026#39;JSON\u0026#39; }); } catch (error) { return errorResponse(500, \u0026#39;export_failed\u0026#39;); } } // Right to Erasure - Delete all user data async function deleteUserData(userId) { try { // Delete from DynamoDB await deleteAllUserItems(userId); // Delete from S3 (user images) await deleteUserImages(userId); // Disable Cognito user await disableCognitoUser(userId); return successResponse({ message: \u0026#39;All user data has been deleted\u0026#39;, deletedAt: new Date().toISOString() }); } catch (error) { return errorResponse(500, \u0026#39;deletion_failed\u0026#39;); } }Related Documents#\r40 - Auth 13 - Security 42 - Compliance 11 - Database "},{"id":22,"href":"/docs/dlc/42-compliance/","title":"42 - Compliance \u0026 Governance","section":"Docs","content":"Compliance \u0026amp; Governance - Smart Cooking App#\rCompliance Overview#\rCompliance Standards#\rGDPR: EU General Data Protection Regulation CCPA: California Consumer Privacy Act (future) SOC 2 Type II: Security controls (future) ISO 27001: Information security (future) Governance Framework#\rData Governance: Clear data handling policies Security Governance: Regular security assessments Privacy Governance: User privacy protection Operational Governance: Incident response procedures GDPR Compliance Implementation#\rLegal Basis for Processing#\rData Processing Legal Basis: User Registration: Contract (Art. 6(1)(b)) AI Personalization: Legitimate Interest (Art. 6(1)(f)) Marketing Communications: Consent (Art. 6(1)(a)) Legal Compliance: Legal Obligation (Art. 6(1)(c)) Security Monitoring: Legitimate Interest (Art. 6(1)(f))Data Subject Rights Implementation#\rRight to Access (Art. 15)#\r// GET /user/data-export async function exportUserData(userId) { const exportData = { personalData: { profile: await getUserProfile(userId), preferences: await getUserPreferences(userId), privacySettings: await getPrivacySettings(userId) }, activityData: { cookingHistory: await getCookingHistory(userId), aiSuggestions: await getAISuggestions(userId), recipes: await getUserRecipes(userId), posts: await getUserPosts(userId) }, socialData: { friends: await getUserFriends(userId), comments: await getUserComments(userId), reactions: await getUserReactions(userId) }, metadata: { exportDate: new Date().toISOString(), dataRetentionPeriod: \u0026#34;Until account deletion\u0026#34;, legalBasis: \u0026#34;Contract and Legitimate Interest\u0026#34;, dataController: \u0026#34;Smart Cooking App\u0026#34;, contactEmail: \u0026#34;privacy@smartcooking.app\u0026#34; } }; return { statusCode: 200, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Content-Disposition\u0026#39;: \u0026#39;attachment; filename=\u0026#34;user-data-export.json\u0026#34;\u0026#39; }, body: JSON.stringify(exportData, null, 2) }; }Right to Rectification (Art. 16)#\r// PUT /user/profile - Allow users to correct their data async function updateUserProfile(event, userId) { const updates = JSON.parse(event.body); // Validate and sanitize updates const allowedFields = [ \u0026#39;full_name\u0026#39;, \u0026#39;date_of_birth\u0026#39;, \u0026#39;gender\u0026#39;, \u0026#39;country\u0026#39;, \u0026#39;dietary_restrictions\u0026#39;, \u0026#39;allergies\u0026#39;, \u0026#39;favorite_cuisines\u0026#39; ]; const validatedUpdates = {}; for (const [key, value] of Object.entries(updates)) { if (allowedFields.includes(key)) { validatedUpdates[key] = sanitizeInput(value); } } // Log data rectification for audit await logDataRectification(userId, validatedUpdates); // Update the data await updateUserData(userId, validatedUpdates); return successResponse({ message: \u0026#39;Profile updated successfully\u0026#39;, updatedFields: Object.keys(validatedUpdates), updatedAt: new Date().toISOString() }); }Right to Erasure (Art. 17)#\r// DELETE /user/account - Complete data deletion async function deleteUserAccount(userId) { try { // 1. Anonymize user-generated content (recipes, comments) await anonymizeUserContent(userId); // 2. Delete personal data from DynamoDB await deletePersonalData(userId); // 3. Delete files from S3 await deleteUserFiles(userId); // 4. Disable Cognito user await disableCognitoUser(userId); // 5. Log deletion for compliance await logDataDeletion(userId); return successResponse({ message: \u0026#39;Account and all personal data have been deleted\u0026#39;, deletedAt: new Date().toISOString(), retainedData: \u0026#39;Anonymized recipes and comments (no personal identifiers)\u0026#39; }); } catch (error) { console.error(\u0026#39;Account deletion error:\u0026#39;, error); return errorResponse(500, \u0026#39;deletion_failed\u0026#39;); } } async function anonymizeUserContent(userId) { // Keep recipes but remove personal identifiers await ddb.update({ TableName: process.env.DYNAMODB_TABLE, Key: { PK: `RECIPE#${recipeId}`, SK: \u0026#39;METADATA\u0026#39; }, UpdateExpression: \u0026#39;SET created_by = :anon, user_id = :anon\u0026#39;, ExpressionAttributeValues: { \u0026#39;:anon\u0026#39;: \u0026#39;anonymous-user\u0026#39; } }); // Similar for comments, posts, etc. }Right to Data Portability (Art. 20)#\r// GET /user/data-portability async function getPortableData(userId) { const portableData = { format: \u0026#34;JSON\u0026#34;, version: \u0026#34;1.0\u0026#34;, exportDate: new Date().toISOString(), user: { profile: await getUserProfile(userId), preferences: await getUserPreferences(userId), ingredients: await getUserIngredients(userId) }, recipes: await getUserRecipes(userId), cookingHistory: await getCookingHistory(userId), // Exclude system-generated data like AI suggestions // Include only user-created content }; return { statusCode: 200, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Content-Disposition\u0026#39;: \u0026#39;attachment; filename=\u0026#34;portable-data.json\u0026#34;\u0026#39; }, body: JSON.stringify(portableData, null, 2) }; }Right to Object (Art. 21)#\r// PUT /user/data-processing-objection async function handleDataProcessingObjection(userId, objectionType) { switch (objectionType) { case \u0026#39;ai_personalization\u0026#39;: // Disable AI personalization await updateUserPreferences(userId, { ai_personalization_enabled: false }); break; case \u0026#39;marketing\u0026#39;: // Disable marketing communications await updateUserPreferences(userId, { marketing_emails_enabled: false }); break; case \u0026#39;analytics\u0026#39;: // Disable analytics tracking await updateUserPreferences(userId, { analytics_tracking_enabled: false }); break; } await logDataProcessingObjection(userId, objectionType); return successResponse({ message: `Data processing objection recorded for: ${objectionType}`, effectiveDate: new Date().toISOString() }); }Data Protection Impact Assessment (DPIA)#\rDPIA Summary#\rProcessing Activity: AI Recipe Suggestion System Risk Level: Medium DPIA Required: Yes (automated decision-making with profiling) Data Categories: - Personal identifiers (email, username) - Demographic data (age, gender, country) - Behavioral data (cooking preferences, ingredient usage) - Health data (allergies, dietary restrictions) Risks Identified: 1. AI bias in recipe suggestions 2. Inference of health conditions from dietary data 3. Potential data breaches 4. Unauthorized access to personal preferences Mitigation Measures: 1. Regular AI model bias testing 2. Encryption of sensitive data 3. Access controls and audit logging 4. User consent and transparencyPrivacy by Design Implementation#\r// Privacy-preserving AI suggestions class PrivacyAwareAI { async generateSuggestions(userId, ingredients) { // 1. Data minimization - only use necessary data const userContext = await this.getMinimalUserContext(userId); // 2. Purpose limitation - only for recipe suggestions const suggestions = await this.generateRecipes(ingredients, userContext); // 3. Storage limitation - TTL for AI suggestions await this.saveSuggestionsWithTTL(userId, suggestions, 90); // 90 days // 4. Transparency - log what data was used await this.logAIDataUsage(userId, userContext); return suggestions; } async getMinimalUserContext(userId) { // Only get data necessary for AI personalization const profile = await getUserProfile(userId); const preferences = await getUserPreferences(userId); return { age_range: this.getAgeRange(profile.date_of_birth), // Not exact age gender: profile.gender, country: profile.country, allergies: preferences.allergies, // Critical for safety cooking_methods: preferences.preferred_cooking_methods, cuisines: preferences.favorite_cuisines }; } getAgeRange(birthDate) { if (!birthDate) return null; const age = new Date().getFullYear() - new Date(birthDate).getFullYear(); return `${Math.floor(age / 10) * 10}-${Math.floor(age / 10) * 10 + 9}`; } }Consent Management#\rConsent Categories#\rConsent Types: essential: description: \u0026#34;Essential for app functionality\u0026#34; required: true legal_basis: \u0026#34;Contract\u0026#34; ai_personalization: description: \u0026#34;AI recipe personalization\u0026#34; required: false legal_basis: \u0026#34;Consent\u0026#34; analytics: description: \u0026#34;Usage analytics and improvements\u0026#34; required: false legal_basis: \u0026#34;Legitimate Interest\u0026#34; marketing: description: \u0026#34;Marketing communications\u0026#34; required: false legal_basis: \u0026#34;Consent\u0026#34;Consent Management Implementation#\r// Consent management system class ConsentManager { async recordConsent(userId, consentData) { const consentRecord = { PK: `USER#${userId}`, SK: `CONSENT#${new Date().toISOString()}`, entity_type: \u0026#39;CONSENT_RECORD\u0026#39;, user_id: userId, consents: consentData, ip_address: this.hashIP(consentData.ip_address), user_agent: consentData.user_agent, timestamp: new Date().toISOString(), version: \u0026#39;1.0\u0026#39; // Consent form version }; await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: consentRecord }); // Update current consent status await this.updateCurrentConsent(userId, consentData); } async updateCurrentConsent(userId, consentData) { await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: { PK: `USER#${userId}`, SK: \u0026#39;CONSENT_CURRENT\u0026#39;, entity_type: \u0026#39;CURRENT_CONSENT\u0026#39;, essential: true, // Always true ai_personalization: consentData.ai_personalization || false, analytics: consentData.analytics || false, marketing: consentData.marketing || false, updated_at: new Date().toISOString() } }); } async withdrawConsent(userId, consentType) { // Record consent withdrawal await this.recordConsent(userId, { [consentType]: false, action: \u0026#39;withdraw\u0026#39;, timestamp: new Date().toISOString() }); // Take action based on consent type switch (consentType) { case \u0026#39;ai_personalization\u0026#39;: await this.disableAIPersonalization(userId); break; case \u0026#39;marketing\u0026#39;: await this.unsubscribeMarketing(userId); break; case \u0026#39;analytics\u0026#39;: await this.disableAnalytics(userId); break; } } hashIP(ipAddress) { // Hash IP for privacy while maintaining audit trail return crypto.createHash(\u0026#39;sha256\u0026#39;).update(ipAddress).digest(\u0026#39;hex\u0026#39;); } }🔍 Audit \u0026amp; Compliance Monitoring#\rAudit Logging#\r// Comprehensive audit logging class AuditLogger { async logDataAccess(userId, dataType, accessor, purpose) { const auditLog = { PK: `AUDIT#${new Date().toISOString().split(\u0026#39;T\u0026#39;)[0]}`, SK: `ACCESS#${new Date().toISOString()}#${generateUUID()}`, entity_type: \u0026#39;AUDIT_LOG\u0026#39;, event_type: \u0026#39;data_access\u0026#39;, user_id: userId, data_type: dataType, accessed_by: accessor, purpose: purpose, timestamp: new Date().toISOString(), ip_address: this.hashIP(this.getClientIP()), user_agent: this.getUserAgent() }; await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: auditLog }); } async logDataModification(userId, dataType, changes, reason) { const auditLog = { PK: `AUDIT#${new Date().toISOString().split(\u0026#39;T\u0026#39;)[0]}`, SK: `MODIFY#${new Date().toISOString()}#${generateUUID()}`, entity_type: \u0026#39;AUDIT_LOG\u0026#39;, event_type: \u0026#39;data_modification\u0026#39;, user_id: userId, data_type: dataType, changes: changes, reason: reason, timestamp: new Date().toISOString() }; await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: auditLog }); } async logDataDeletion(userId, dataType, reason) { const auditLog = { PK: `AUDIT#${new Date().toISOString().split(\u0026#39;T\u0026#39;)[0]}`, SK: `DELETE#${new Date().toISOString()}#${generateUUID()}`, entity_type: \u0026#39;AUDIT_LOG\u0026#39;, event_type: \u0026#39;data_deletion\u0026#39;, user_id: userId, data_type: dataType, reason: reason, timestamp: new Date().toISOString() }; await ddb.put({ TableName: process.env.DYNAMODB_TABLE, Item: auditLog }); } }Compliance Monitoring Dashboard#\r// Compliance metrics for admin dashboard async function getComplianceMetrics() { const metrics = { gdpr_requests: { data_exports: await countGDPRRequests(\u0026#39;data_export\u0026#39;), data_deletions: await countGDPRRequests(\u0026#39;data_deletion\u0026#39;), data_rectifications: await countGDPRRequests(\u0026#39;data_rectification\u0026#39;), processing_objections: await countGDPRRequests(\u0026#39;processing_objection\u0026#39;) }, consent_metrics: { ai_personalization_rate: await getConsentRate(\u0026#39;ai_personalization\u0026#39;), marketing_consent_rate: await getConsentRate(\u0026#39;marketing\u0026#39;), analytics_consent_rate: await getConsentRate(\u0026#39;analytics\u0026#39;) }, data_retention: { ai_suggestions_cleanup: await getCleanupStats(\u0026#39;ai_suggestions\u0026#39;), old_logs_cleanup: await getCleanupStats(\u0026#39;audit_logs\u0026#39;), inactive_users: await getInactiveUserCount() }, security_incidents: { failed_logins: await getFailedLoginCount(), suspicious_activities: await getSuspiciousActivityCount(), data_breaches: 0 // Manual tracking } }; return metrics; }Data Retention Policies#\rRetention Schedule#\rData Retention Policies: User Profiles: Retention: Until account deletion Legal Basis: Contract AI Suggestions: Retention: 90 days Cleanup: Automatic (DynamoDB TTL) Legal Basis: Legitimate Interest Cooking History: Retention: 2 years Archive: S3 after 1 year Legal Basis: Contract Audit Logs: Retention: 7 years Legal Basis: Legal Obligation Marketing Data: Retention: Until consent withdrawn Legal Basis: Consent Analytics Data: Retention: 26 months (anonymized) Legal Basis: Legitimate InterestAutomated Data Cleanup#\r// Scheduled Lambda for data cleanup exports.dataCleanupHandler = async (event, context) =\u0026gt; { const cleanupTasks = [ cleanupExpiredAISuggestions(), cleanupOldAuditLogs(), cleanupInactiveUsers(), cleanupExpiredSessions() ]; const results = await Promise.allSettled(cleanupTasks); const summary = { ai_suggestions_cleaned: results[0].value || 0, audit_logs_archived: results[1].value || 0, inactive_users_notified: results[2].value || 0, sessions_expired: results[3].value || 0, cleanup_date: new Date().toISOString() }; // Log cleanup summary console.log(\u0026#39;Data cleanup completed:\u0026#39;, JSON.stringify(summary)); return summary; }; async function cleanupExpiredAISuggestions() { // DynamoDB TTL handles this automatically // This function just reports the count const expiredCount = await countExpiredItems(\u0026#39;ai_suggestions\u0026#39;); return expiredCount; }Related Documents#\r41 - Privacy 40 - Auth 13 - Security 32 - Monitoring "},{"id":23,"href":"/docs/dlc/99-glossary/","title":"99 - Glossary","section":"Docs","content":"Glossary - Smart Cooking App#\rTechnical Terms#\rA#\rAPI Gateway\nAWS service that creates, publishes, maintains, monitors, and secures REST APIs Acts as front door for backend services Auto-Approval\nAutomated system that approves AI-generated recipes when average rating ≥ 4.0 stars Reduces manual moderation workload AWS Amplify\nFull-stack development platform for building web and mobile applications Used for frontend hosting and CI/CD AWS Bedrock\nFully managed service for building AI applications with foundation models Used for Claude 3 Haiku AI recipe generation B#\rBedrock Model\nFoundation model available through AWS Bedrock Claude 3 Haiku: Cost-effective model for recipe generation C#\rCDK (Cloud Development Kit)\nInfrastructure as Code framework for defining AWS resources Uses TypeScript for type safety CloudFront\nAWS Content Delivery Network (CDN) service Caches static assets globally for faster access CloudWatch\nAWS monitoring and observability service Collects metrics, logs, and events Cognito\nAWS identity and access management service Handles user authentication and authorization Cold Start\nInitial delay when Lambda function executes after being idle Mitigated with provisioned concurrency D#\rDynamoDB\nAWS NoSQL database service Uses single-table design for optimal performance DB Coverage\nPercentage of recipe requests served from database vs AI generation Target: 0% → 80% over time for cost optimization E#\rEJS (Embedded JavaScript)\nTemplate engine for generating HTML with JavaScript Used for server-side rendering Express.js\nWeb application framework for Node.js Handles routing and middleware F#\rFlexible Mix Strategy\nAlgorithm that combines database recipes with AI-generated recipes Optimizes cost by reducing AI API calls Fuzzy Search\nApproximate string matching for ingredient validation Handles typos and variations in ingredient names G#\rGSI (Global Secondary Index)\nAlternative query patterns for DynamoDB tables Enables efficient data access patterns I#\rIAM (Identity and Access Management)\nAWS service for managing access to resources Implements least privilege principle Invalid Ingredient Handling\nSystem for managing unrecognized ingredients Provides suggestions and logs for admin review J#\rJWT (JSON Web Token)\nSecure token format for authentication Contains user claims and expiration L#\rLambda Function\nAWS serverless compute service Executes code without managing servers Least Privilege\nSecurity principle of granting minimum necessary permissions Applied to all IAM roles and policies M#\rMaster Ingredients\nCurated database of valid cooking ingredients Used for validation and fuzzy matching MVP (Minimum Viable Product)\nInitial version with core features only Target: 1,000 users in 3 months N#\rNode.js\nJavaScript runtime for server-side development Used for frontend web application P#\rPITR (Point-in-Time Recovery)\nDynamoDB backup feature for data protection Enables restoration to any point within retention period Privacy Filtering\nSystem that respects user privacy settings Controls data visibility based on relationship status R#\rRate Limiting\nControls request frequency to prevent abuse Implemented at WAF and application levels Recipe Auto-Creation\nProcess where highly-rated AI recipes become permanent Triggered when average rating ≥ 4.0 stars S#\rSingle-Table Design\nDynamoDB pattern using one table for all entities Optimizes performance and cost Serverless\nArchitecture pattern without server management Auto-scales and charges only for usage T#\rTTL (Time To Live)\nAutomatic data expiration in DynamoDB Used for cleaning up temporary data U#\rUser Pool\nCognito directory for user management Handles registration, authentication, and user attributes V#\rValidation\nProcess of checking ingredient names against master list Includes fuzzy matching and auto-correction W#\rWAF (Web Application Firewall)\nAWS security service protecting against web exploits Blocks malicious requests and implements rate limiting X#\rX-Ray\nAWS distributed tracing service Tracks requests across multiple services    Business Terms#\rA#\rApproval Rate\nPercentage of AI recipes that achieve ≥4.0 star rating Target: 40%+ for sustainable growth C#\rCost per User\nMonthly operational cost divided by active users Target: \u0026lt;$0.20 (MVP), \u0026lt;$0.03 (Scale) D#\rDAU (Daily Active Users)\nNumber of unique users active each day Key engagement metric M#\rMAU (Monthly Active Users)\nNumber of unique users active each month Primary growth metric R#\rRecipe Database Coverage\nPercentage of suggestions served from approved recipes vs AI Growth target: 0% → 80% over 12 months Retention Rate\nPercentage of users who return after initial visit Target: 60% (30-day retention) U#\rUser Journey\nComplete flow from registration to recipe rating Critical path for product success Security Terms#\rE#\rEncryption at Rest\nData protection when stored in databases/files All data encrypted using AWS KMS Encryption in Transit\nData protection during transmission HTTPS/TLS enforced everywhere G#\rGDPR (General Data Protection Regulation)\nEU privacy regulation for data protection Implemented through privacy controls and data rights M#\rMFA (Multi-Factor Authentication)\nAdditional security layer beyond password Optional feature for enhanced security O#\rOWASP Top 10\nList of most critical web application security risks Used as security checklist Performance Terms#\rL#\rLatency\nTime delay between request and response Target: \u0026lt;500ms for API endpoints P#\rP95 Latency\n95th percentile response time Key performance indicator T#\rThroughput\nNumber of requests processed per unit time Measured in requests per second U#\rUptime\nPercentage of time system is operational Target: 99.5% monthly uptime Related Documents#\r00 - Overview 99 - References "},{"id":24,"href":"/docs/dlc/99-references/","title":"99 - References","section":"Docs","content":"References - Smart Cooking App#\rAWS Documentation#\rCore Services#\rAWS Lambda Developer Guide Amazon DynamoDB Developer Guide Amazon API Gateway Developer Guide Amazon Cognito Developer Guide Amazon Bedrock User Guide Infrastructure \u0026amp; Deployment#\rAWS CDK Developer Guide AWS Amplify Hosting User Guide Amazon CloudFront Developer Guide Amazon S3 User Guide Monitoring \u0026amp; Security#\rAmazon CloudWatch User Guide AWS X-Ray Developer Guide AWS WAF Developer Guide AWS IAM User Guide Architecture Patterns#\rAWS Well-Architected Framework#\rWell-Architected Framework Serverless Application Lens Security Pillar Cost Optimization Pillar Serverless Patterns#\rServerless Land Patterns AWS Serverless Application Repository Serverless Architecture Patterns DynamoDB Design Patterns#\rDynamoDB Single Table Design NoSQL Workbench for DynamoDB DynamoDB Best Practices AI \u0026amp; Machine Learning#\rAmazon Bedrock#\rBedrock Model IDs Claude 3 Model Documentation Bedrock Pricing AI Best Practices#\rResponsible AI Practices AI/ML Security Best Practices Development Technologies#\rNode.js \u0026amp; Express.js#\rNode.js Official Documentation Express.js Guide EJS Template Engine Frontend Development#\rMDN Web Docs Tailwind CSS Documentation JavaScript ES6+ Features Testing#\rJest Testing Framework Playwright E2E Testing Artillery Load Testing Security \u0026amp; Compliance#\rSecurity Standards#\rOWASP Top 10 OWASP API Security Top 10 AWS Security Best Practices Privacy \u0026amp; Compliance#\rGDPR Official Text AWS GDPR Center Data Privacy Best Practices Authentication \u0026amp; Authorization#\rJWT.io - JWT token debugger and documentation OAuth 2.0 RFC OpenID Connect Monitoring \u0026amp; Operations#\rObservability#\rThe Three Pillars of Observability AWS Observability Best Practices Performance#\rWeb Performance Metrics Core Web Vitals API Performance Best Practices Cost Optimization#\rAWS Cost Management#\rAWS Cost Management AWS Pricing Calculator Cost Optimization Best Practices Serverless Cost Optimization#\rLambda Cost Optimization DynamoDB Cost Optimization    Tools \u0026amp; Utilities#\rDevelopment Tools#\rAWS CLI AWS CDK Toolkit Postman API Testing Monitoring Tools#\rAWS CloudWatch Insights AWS X-Ray Console Security Tools#\rAWS Config AWS Security Hub Snyk Vulnerability Scanner Books \u0026amp; Publications#\rArchitecture \u0026amp; Design#\r\u0026ldquo;Building Microservices\u0026rdquo; by Sam Newman \u0026ldquo;Designing Data-Intensive Applications\u0026rdquo; by Martin Kleppmann \u0026ldquo;Clean Architecture\u0026rdquo; by Robert C. Martin AWS \u0026amp; Cloud#\r\u0026ldquo;AWS Certified Solutions Architect Study Guide\u0026rdquo; by Ben Piper \u0026ldquo;Serverless Architectures on AWS\u0026rdquo; by Peter Sbarski \u0026ldquo;AWS Security Best Practices\u0026rdquo; (AWS Whitepaper) AI \u0026amp; Machine Learning#\r\u0026ldquo;Hands-On Machine Learning\u0026rdquo; by Aurélien Géron \u0026ldquo;AI for People in a Hurry\u0026rdquo; by Neil Reddy \u0026ldquo;Responsible AI\u0026rdquo; (Various AWS Whitepapers) Training \u0026amp; Certification#\rAWS Training#\rAWS Skill Builder AWS Certified Solutions Architect AWS Certified Developer Serverless Training#\rServerless Framework Documentation AWS Lambda Powertools Community Resources#\rAWS Community#\rAWS Community Builders AWS re:Invent Sessions AWS Architecture Center Developer Communities#\rStack Overflow - AWS Reddit - r/aws AWS Subreddit Blogs \u0026amp; Articles#\rAWS Architecture Blog AWS Compute Blog AWS Database Blog Industry Standards#\rAPI Design#\rREST API Design Best Practices OpenAPI Specification JSON:API Specification Database Design#\rDatabase Design Principles NoSQL Database Design Security Standards#\rISO 27001 SOC 2 Type II NIST Cybersecurity Framework Project-Specific Resources#\rVietnamese Cuisine#\rVietnamese Ingredients Database Traditional Vietnamese Recipes Cooking \u0026amp; Nutrition#\rUSDA Food Database Nutrition API Resources Localization#\ri18n Best Practices Unicode Standards Documentation Standards#\rTechnical Writing#\rGoogle Developer Documentation Style Guide Microsoft Writing Style Guide Markdown Guide API Documentation#\rSwagger/OpenAPI Postman Documentation Version Control#\rGit Best Practices#\rGit Documentation GitHub Flow Conventional Commits Support \u0026amp; Contact#\rAWS Support#\rAWS Support Center AWS Forums AWS Premium Support Emergency Contacts#\rAWS Technical Support: Available through AWS Console Security Issues: AWS Security Last Updated: January 2025\nDocument Version: 1.0\nMaintained By: Smart Cooking Development Team\n"}]