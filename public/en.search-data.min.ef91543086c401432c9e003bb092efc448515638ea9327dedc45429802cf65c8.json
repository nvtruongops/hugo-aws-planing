[{"id":0,"href":"/docs/summary/aws-services-diagram/","title":"AWS Services Architecture Diagram","section":"Summary","content":"Sơ Đồ Kiến Trúc Dịch Vụ AWS#\rKiến Trúc Hệ Thống#\rgraph TB\rsubgraph \u0026#34;Tầng Client\u0026#34;\rWebApp[Web App\u0026lt;br/\u0026gt;Next.js]\rMobileApp[Mobile App\u0026lt;br/\u0026gt;React Native - Tương lai]\rend\rsubgraph \u0026#34;CDN \u0026amp; Hosting\u0026#34;\rCloudFront[Amazon CloudFront\u0026lt;br/\u0026gt;CDN]\rAmplify[AWS Amplify\u0026lt;br/\u0026gt;Hosting \u0026amp; CI/CD]\rend\rsubgraph \u0026#34;Tầng API Gateway\u0026#34;\rAPIGateway[Amazon API Gateway\u0026lt;br/\u0026gt;REST API]\rWSGateway[API Gateway\u0026lt;br/\u0026gt;WebSocket - Tương lai]\rend\rsubgraph \u0026#34;Xác Thực\u0026#34;\rCognitoUser[Amazon Cognito\u0026lt;br/\u0026gt;User Pool]\rCognitoIdentity[Cognito Identity Pool]\rend\rsubgraph \u0026#34;Tầng Compute\u0026#34;\rLambdaAuth[Lambda: Auth Handler\u0026lt;br/\u0026gt;Node.js 20]\rLambdaRecipe[Lambda: Recipe CRUD\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAI[Lambda: AI Suggestion\u0026lt;br/\u0026gt;Node.js 20]\rLambdaProfile[Lambda: User Profile\u0026lt;br/\u0026gt;Node.js 20]\rLambdaSocial[Lambda: Social/Friends\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAdmin[Lambda: Admin Operations\u0026lt;br/\u0026gt;Node.js 20]\rend\rsubgraph \u0026#34;Dịch Vụ AI\u0026#34;\rBedrock[Amazon Bedrock\u0026lt;br/\u0026gt;Claude 3.5 Sonnet/Haiku]\rend\rsubgraph \u0026#34;Tầng Database\u0026#34;\rDynamoDB[Amazon DynamoDB\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Bảng: Users\u0026lt;br/\u0026gt;Bảng: UserData\u0026lt;br/\u0026gt;Bảng: Recipes\u0026lt;br/\u0026gt;Bảng: AI_Suggestions\u0026lt;br/\u0026gt;Bảng: Privacy\u0026lt;br/\u0026gt;Bảng: Friendships]\rend\rsubgraph \u0026#34;Lưu Trữ\u0026#34;\rS3[Amazon S3\u0026lt;br/\u0026gt;User Uploads \u0026amp; Assets]\rend\rsubgraph \u0026#34;Giám Sát \u0026amp; Logging\u0026#34;\rCloudWatch[Amazon CloudWatch\u0026lt;br/\u0026gt;Logs \u0026amp; Metrics]\rXRay[AWS X-Ray\u0026lt;br/\u0026gt;Tracing]\rend\rsubgraph \u0026#34;Bảo Mật\u0026#34;\rWAF[AWS WAF\u0026lt;br/\u0026gt;Web Application Firewall]\rSecrets[AWS Secrets Manager\u0026lt;br/\u0026gt;API Keys]\rend\rWebApp --\u0026gt; CloudFront\rCloudFront --\u0026gt; Amplify\rWebApp --\u0026gt; APIGateway\rAPIGateway --\u0026gt; CognitoUser\rCognitoUser --\u0026gt; LambdaAuth\rCognitoIdentity --\u0026gt; S3\rAPIGateway --\u0026gt; LambdaRecipe\rAPIGateway --\u0026gt; LambdaAI\rAPIGateway --\u0026gt; LambdaProfile\rAPIGateway --\u0026gt; LambdaSocial\rAPIGateway --\u0026gt; LambdaAdmin\rLambdaAI --\u0026gt; Bedrock\rLambdaRecipe --\u0026gt; DynamoDB\rLambdaAI --\u0026gt; DynamoDB\rLambdaProfile --\u0026gt; DynamoDB\rLambdaSocial --\u0026gt; DynamoDB\rLambdaAdmin --\u0026gt; DynamoDB\rLambdaRecipe --\u0026gt; S3\rLambdaAuth --\u0026gt; CloudWatch\rLambdaRecipe --\u0026gt; CloudWatch\rLambdaAI --\u0026gt; CloudWatch\rAPIGateway --\u0026gt; WAFPhân Tích Chi Tiết Các Dịch Vụ#\r1. Frontend \u0026amp; CDN#\rAWS Amplify:\nHost ứng dụng Next.js Pipeline CI/CD (tự động deploy từ GitHub) Custom domain \u0026amp; SSL certificates Chi phí: ~$15/tháng Amazon CloudFront:\nCDN toàn cầu cho phân phối nội dung nhanh chóng Cache các static assets Chi phí: ~$5-10/tháng (1TB data transfer) 2. Xác Thực \u0026amp; Phân Quyền#\rAmazon Cognito User Pool:\nĐăng ký \u0026amp; đăng nhập người dùng Xác minh email Khôi phục mật khẩu Hỗ trợ MFA (tương lai) Chi phí: MIỄN PHÍ (\u0026lt; 50,000 ) Cognito Identity Pool:\nThông tin xác thực AWS tạm thời để truy cập S3 Quyền IAM chi tiết 3. Tầng API#\rAmazon API Gateway (REST):\nRESTful API endpoints Validation request Quản lý API key Throttling \u0026amp; rate limiting Cấu hình CORS Chi phí: ~$3.50 trên triệu requests API Endpoints#\rPOST /auth/register\rPOST /auth/login\rGET /user/profile\rPUT /user/profile\rPOST /user/ingredients\rGET /user/ingredients\rDELETE /user/ingredients/{id}\rPUT /user/privacy\rGET /user/privacy\rPOST /friends/request\rGET /friends\rPUT /friends/{id}/accept\rPUT /friends/{id}/reject\rDELETE /friends/{id}\rPOST /recipes\rGET /recipes/{id}\rPUT /recipes/{id}\rDELETE /recipes/{id}\rGET /recipes/search\rPOST /ai/suggest\rGET /ai/suggestions\rPOST /ai/feedback4. Lambda Functions#\rLambda 1: Auth Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: Cognito Post-Authentication Mục đích: Tạo profile người dùng khi đăng nhập lần đầu Lambda 2: Recipe CRUD#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway Mục đích: Tạo, đọc, cập nhật, xóa recipes Upload ảnh recipe lên S3 Query DynamoDB Lambda 3: AI Suggestion Engine ⭐#\rRuntime: Node.js 20 Memory: 1024MB Timeout: 60s Triggers: API Gateway Mục đích: Gọi Amazon Bedrock (Claude 3.5) Tạo gợi ý công thức Phân tích nguyên liệu người dùng Lưu gợi ý vào DynamoDB Chi phí: Lambda tốn kém nhất (~70% chi phí compute) Lambda 4: User Profile Manager#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý profile \u0026amp; preferences người dùng Cập nhật danh sách nguyên liệu Xử lý upload avatar Quản lý cài đặt riêng tư Lambda 5: Social/Friends Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý yêu cầu kết bạn Chấp nhận/từ chối yêu cầu kết bạn Liệt kê danh sách bạn bè Lọc dữ liệu theo privacy settings Lambda 6: Admin Operations#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway (Chỉ Admin) Mục đích: Quản lý người dùng (ban/unban) Kiểm duyệt nội dung Thống kê hệ thống Phê duyệt/từ chối recipes 5. Dịch Vụ AI/ML#\rAmazon Bedrock (Claude 3.5)#\rModel: Claude 3.5 Sonnet (hoặc Haiku để tiết kiệm chi phí) Use Case: AI agent gợi ý công thức Input: Profile người dùng + preferences + nguyên liệu Output: Gợi ý công thức với hướng dẫn Chi phí: Sonnet: $3 trên triệu input tokens, $15 trên triệu output tokens Haiku: $0.25 trên triệu input tokens, $1.25 trên triệu output tokens Ước tính: $25-50/tháng (1,000 users, 10 suggestions/user/tháng) Với Haiku: $3-7/tháng (tiết kiệm 70%) 6. Database#\rAmazon DynamoDB (NoSQL Database)#\rCác bảng:\nUsers (PK: user_id) - Tài khoản người dùng \u0026amp; roles UserData (PK: user_id, SK: data_type) - Preferences, nguyên liệu PrivacySettings (PK: user_id) - Cấu hình riêng tư Friendships (PK: user_id, SK: friend_id) - Kết nối mạng xã hội Recipes (PK: recipe_id, GSI: user_id) - Dữ liệu công thức AISuggestions (PK: user_id, SK: timestamp) - Lịch sử AI Tính năng:\nAuto-scaling (on-demand mode) Point-in-time recovery (PITR) DynamoDB Streams (cho cập nhật real-time) Global Secondary Indexes (GSI) cho truy vấn Mã hóa at rest Chi phí: $15-25/tháng (on-demand pricing) Tại sao chọn DynamoDB thay vì RDS?\n✅ Serverless (không cần quản lý server) ✅ Auto-scaling về zero cost khi idle ✅ Tích hợp tốt hơn với Lambda ✅ Độ trễ thấp hơn cho key-value access ✅ Tiết kiệm chi phí cho MVP ($15 vs $30+ cho RDS) 7. Lưu Trữ#\rAmazon S3#\rBuckets:\nrecipe-images-prod: Ảnh công thức user-avatars-prod: Ảnh đại diện static-assets-prod: Assets ứng dụng Tính năng:\nVersioning enabled Lifecycle policies (xóa sau 90 ngày cho temp files) S3 Transfer Acceleration Chi phí: ~$5/tháng (50GB storage) 8. Bảo Mật#\rAWS WAF#\rBảo vệ:\nSQL injection XSS attacks Rate limiting (1000 requests/5min mỗi IP) Geographic restrictions (tùy chọn) Chi phí: $5/tháng + $1 trên triệu requests AWS Secrets Manager#\rSecrets:\nDatabase credentials (nếu dùng RDS) Third-party API keys (nếu cần) Chi phí: $0.40 mỗi secret mỗi tháng 9. Giám Sát \u0026amp; Logging#\rAmazon CloudWatch#\rLogs: Tất cả logs của Lambda functions Metrics: Metrics của API Gateway, Lambda, DynamoDB Alarms: Lambda errors \u0026gt; 1% API Gateway 5xx errors DynamoDB throttling Chi phí: ~$5-10/tháng AWS X-Ray#\rTracing: Tracing request từ đầu đến cuối Performance: Xác định bottlenecks Chi phí: $5 trên triệu traces (100k đầu miễn phí) Sơ Đồ Luồng Dữ Liệu#\rsequenceDiagram\rparticipant User\rparticipant CloudFront\rparticipant Next.js\rparticipant APIGateway\rparticipant Cognito\rparticipant Lambda\rparticipant Bedrock\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;CloudFront: Truy cập website\rCloudFront-\u0026gt;\u0026gt;Next.js: Phục vụ nội dung tĩnh\rNext.js-\u0026gt;\u0026gt;User: Hiển thị UI\rUser-\u0026gt;\u0026gt;APIGateway: Yêu cầu đăng nhập\rAPIGateway-\u0026gt;\u0026gt;Cognito: Xác thực\rCognito-\u0026gt;\u0026gt;APIGateway: JWT Token\rAPIGateway-\u0026gt;\u0026gt;User: Trả về token\rUser-\u0026gt;\u0026gt;APIGateway: Yêu cầu gợi ý AI\rAPIGateway-\u0026gt;\u0026gt;Cognito: Xác minh token\rAPIGateway-\u0026gt;\u0026gt;Lambda: Gọi AI Lambda\rLambda-\u0026gt;\u0026gt;DynamoDB: Lấy profile người dùng\rLambda-\u0026gt;\u0026gt;DynamoDB: Lấy nguyên liệu người dùng\rLambda-\u0026gt;\u0026gt;Bedrock: Gọi Claude 3.5\rBedrock-\u0026gt;\u0026gt;Lambda: Gợi ý công thức\rLambda-\u0026gt;\u0026gt;DynamoDB: Lưu gợi ý\rLambda-\u0026gt;\u0026gt;APIGateway: Trả về kết quả\rAPIGateway-\u0026gt;\u0026gt;User: Hiển thị gợi ý"},{"id":1,"href":"/docs/summary/","title":"Summary","section":"Docs","content":"AWS Project Documentation#\rComplete documentation for Smart Cooking App project.\n"},{"id":2,"href":"/docs/summary/ai-agent-implementation/","title":"Kế Hoạch Triển Khai AI Agent","section":"Summary","content":"KẾ HOẠCH TRIỂN KHAI AI AGENT#\rHệ Thống Gợi Ý Công Thức Thông Minh\n   TỔNG QUAN#\rTính năng: AI Agent gợi ý món ăn thông minh dựa trên:\nThông tin cá nhân (giới tính, tuổi, quốc gia) Sở thích ẩm thực (món canh, món chiên, món hấp…) Nguyên liệu nhập đơn giản (chỉ tên, không quản lý số lượng/hạn dùng) Phạm vi:\n✅ User chỉ nhập danh sách nguyên liệu có sẵn ✅ AI tạo công thức phù hợp với user profile Thời gian: 2 tuần (Tuần 3-4 trong deployment plan)\n   LUỒNG NGƯỜI DÙNG#\r┌─────────────────────────────────────────────────────────┐\r│ ĐẦU VÀO NGƯỜI DÙNG │\r├─────────────────────────────────────────────────────────┤\r│ Người dùng A: │\r│ • Nam, 1990 (34 tuổi), Vietnam │\r│ • Thích ăn: canh, món hấp │\r│ • Nguyên liệu: Cá rô, bông súng, gừng, hành │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ XỬ LÝ AI AGENT │\r├─────────────────────────────────────────────────────────┤\r│ 1. Lấy thông tin từ user_preferences │\r│ 2. Lấy nguyên liệu từ user_ingredients │\r│ 3. Xây dựng prompt tùy chỉnh: │\r│ \u0026#34;Tạo món ăn với: │\r│ - Nguyên liệu: Cá rô, bông súng │\r│ - Cho: nam, trung niên │\r│ - Món: Việt Nam │\r│ - Loại: có thể có canh hoặc món hấp\u0026#34; │\r│ 4. Gọi Bedrock Claude API │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ PHẢN HỒI AI \u0026amp; KẾT QUẢ CUỐI CÙNG │\r├─────────────────────────────────────────────────────────┤\r│ Gợi ý: \u0026#34;Canh cá rô nấu bông súng\u0026#34; │\r│ • Phù hợp: nam trung niên, món Việt, có canh │\r│ • Nguyên liệu match: 4/4 │\r│ • Độ khó: Dễ │\r│ • Thời gian: 30 phút │\r│ │\r│    Công thức chi tiết (từ AI) │\r│ 🥘 Thông tin dinh dưỡng │\r│ ⭐ Lưu vào favorites │\r└─────────────────────────────────────────────────────────┘   TRIỂN KHAI KỸ THUẬT#\rBackend: Node.js 20 Lambda Functions#\rLambda Gợi Ý AI:\n// Sử dụng AWS SDK v3 cho Bedrock const { BedrockRuntimeClient, InvokeModelCommand } = require(\u0026#39;@aws-sdk/client-bedrock-runtime\u0026#39;); // Model: Claude 3 Haiku (tiết kiệm chi phí) // Đầu vào: Sở thích người dùng + nguyên liệu // Đầu ra: JSON gợi ý công thức Dịch Vụ Chính:\nAmazon Bedrock: Claude 3 Haiku model DynamoDB: Lưu trữ dữ liệu người dùng \u0026amp; gợi ý AI Lambda: Serverless compute (Node.js 20) API Gateway: REST API endpoints Cơ Sở Dữ Liệu: Amazon DynamoDB#\rCác Bảng Sử Dụng:\nUsers (PK: user_id) - Hồ sơ \u0026amp; vai trò UserData (PK: user_id, SK: PREFERENCES | INGREDIENTS) - Cài đặt người dùng PrivacySettings (PK: user_id) - Cấu hình quyền riêng tư Friendships (PK: user_id, SK: friend_id) - Kết nối xã hội AISuggestions (PK: user_id, SK: timestamp) - Lịch sử AI Triển Khai Quyền Riêng Tư:\n// Bộ lọc quyền riêng tư áp dụng trước khi trả về dữ liệu người dùng if (privacy.ingredients_visibility === \u0026#39;friends\u0026#39; \u0026amp;\u0026amp; !isFriend) { delete userProfile.ingredients; }API Endpoints#\rLuồng Gợi Ý AI:\nPOST /ai/suggest\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;request\u0026#34;: \u0026#34;Something light for dinner\u0026#34;,\r\u0026#34;dietary_preferences\u0026#34;: [\u0026#34;no pork\u0026#34;]\r}\rResponse:\r{\r\u0026#34;suggestion_id\u0026#34;: \u0026#34;uuid\u0026#34;,\r\u0026#34;recipe\u0026#34;: {\r\u0026#34;name\u0026#34;: \u0026#34;Canh cá rô nấu bông súng\u0026#34;,\r\u0026#34;ingredients\u0026#34;: [...],\r\u0026#34;instructions\u0026#34;: [...],\r\u0026#34;nutrition\u0026#34;: {...}\r}\r}Endpoints Quyền Riêng Tư \u0026amp; Xã Hội:\nPUT /user/privacy - Cập nhật cài đặt quyền riêng tư\rGET /user/profile/{userId} - Lấy hồ sơ (đã lọc quyền riêng tư)\rPOST /friends/request - Gửi yêu cầu kết bạn\rGET /friends - Danh sách bạn bèEndpoints Quản Trị:\nGET /admin/users - Danh sách tất cả người dùng (chỉ admin)\rPUT /admin/users/{id}/ban - Cấm người dùng (chỉ admin)\rGET /admin/statistics - Thống kê hệ thống (chỉ admin)   QUYỀN RIÊNG TƯ \u0026amp; BẢO MẬT#\rCác Mức Quyền Riêng Tư#\rPublic: Mọi người có thể xem Friends: Chỉ bạn bè đã chấp nhận có thể xem Private: Chỉ người dùng có thể xem Thuộc Tính Được Kiểm Soát Quyền Riêng Tư#\rEmail (mặc định: private) Ngày sinh (mặc định: friends) Giới tính (mặc định: public) Quốc gia (mặc định: public) Công thức (mặc định: public) Nguyên liệu (mặc định: friends) Sở thích (mặc định: friends) Kiểm Soát Truy Cập Theo Vai Trò#\rUser: Truy cập thông thường Admin: Truy cập đầy đủ + công cụ quản trị Thời Gian \u0026amp; Mốc Quan Trọng#\rXem Hướng Dẫn Triển Khai Khách Hàng để biết thời gian chi tiết.\n"},{"id":3,"href":"/docs/summary/database-diagram/","title":"Database Schema Diagram","section":"Summary","content":"Sơ Đồ Cấu Trúc Cơ Sở Dữ Liệu#\rERD (Sơ Đồ Quan Hệ Thực Thể)#\r// Bảng Người Dùng\rTable users {\ruser_id varchar(36) [pk, note: \u0026#39;UUID từ Cognito\u0026#39;]\remail varchar(255) [unique, not null]\rusername varchar(50) [unique, not null]\rfull_name varchar(100)\rdate_of_birth date\rgender enum(\u0026#39;male\u0026#39;, \u0026#39;female\u0026#39;, \u0026#39;other\u0026#39;)\rcountry varchar(50)\ravatar_url varchar(500)\rrole enum(\u0026#39;user\u0026#39;, \u0026#39;admin\u0026#39;) [default: \u0026#39;user\u0026#39;]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rlast_login timestamp\rindexes {\remail\rusername\rrole\r}\r}\r// Tùy Chọn Người Dùng\rTable user_preferences {\rpreference_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rdietary_restrictions json [note: \u0026#39;chay, thuần chay, halal, kosher, v.v.\u0026#39;]\rallergies json [note: \u0026#39;Danh sách dị ứng\u0026#39;]\rfavorite_cuisines json [note: \u0026#39;Ý, Việt Nam, Nhật Bản, v.v.\u0026#39;]\rcooking_methods json [note: \u0026#39;hấp, chiên, nướng, súp, v.v.\u0026#39;]\rspice_level enum(\u0026#39;none\u0026#39;, \u0026#39;mild\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;hot\u0026#39;, \u0026#39;very_hot\u0026#39;)\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\r}\r// Cài Đặt Quyền Riêng Tư\rTable privacy_settings {\rsetting_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null, unique]\rprofile_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;, note: \u0026#39;Ai có thể xem hồ sơ\u0026#39;]\remail_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;private\u0026#39;]\rdate_of_birth_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rgender_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rcountry_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rrecipes_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\ringredients_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rpreferences_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\r}\r}\r// Quan Hệ Bạn Bè\rTable friendships {\rfriendship_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rfriend_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rstatus enum(\u0026#39;pending\u0026#39;, \u0026#39;accepted\u0026#39;, \u0026#39;blocked\u0026#39;) [default: \u0026#39;pending\u0026#39;]\rrequested_at timestamp [default: `now()`]\rresponded_at timestamp\rindexes {\r(user_id, friend_id) [unique]\ruser_id\rfriend_id\rstatus\r}\r}\r// Nguyên Liệu Người Dùng (Danh sách đơn giản - không theo dõi số lượng)\rTable user_ingredients {\ringredient_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ringredient_name varchar(100) [not null]\rcategory varchar(50) [note: \u0026#39;thịt, rau, gia vị, sữa, v.v.\u0026#39;]\radded_at timestamp [default: `now()`]\rindexes {\r(user_id, ingredient_name) [unique]\r}\r}\r// Công Thức (Do người dùng tạo \u0026amp; AI tạo)\rTable recipes {\rrecipe_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, note: \u0026#39;Người tạo - null nếu là công thức hệ thống\u0026#39;]\rtitle varchar(200) [not null]\rnormalized_title varchar(200) [note: \u0026#39;Chữ thường, không dấu để tìm kiếm\u0026#39;]\rdescription text\rcuisine_type varchar(50)\rcooking_method varchar(50)\rdifficulty enum(\u0026#39;easy\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;hard\u0026#39;)\rprep_time_minutes int\rcook_time_minutes int\rservings int\rcalories_per_serving int\rinstructions json [note: \u0026#39;Mảng các đối tượng bước\u0026#39;]\rnutrition json [note: \u0026#39;Protein, carbs, chất béo, v.v.\u0026#39;]\ris_public boolean [default: false]\ris_ai_generated boolean [default: false]\rai_cache_hit_count int [default: 0, note: \u0026#39;Số lần tái sử dụng từ cache\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\rnormalized_title\rcuisine_type\rcooking_method\r}\r}\r// Bộ Nhớ Cache Công Thức (Công thức AI tạo để tái sử dụng)\rTable recipe_cache {\rcache_id varchar(36) [pk]\rrecipe_name varchar(200) [not null]\rnormalized_name varchar(200) [unique, not null, note: \u0026#39;Khóa tìm kiếm\u0026#39;]\rrecipe_data json [note: \u0026#39;JSON công thức đầy đủ từ AI\u0026#39;]\ringredients_hash varchar(64) [note: \u0026#39;Hash của danh sách nguyên liệu\u0026#39;]\rcuisine_type varchar(50)\rhit_count int [default: 0, note: \u0026#39;Bộ đếm tái sử dụng\u0026#39;]\rlast_accessed timestamp\rcreated_at timestamp [default: `now()`]\rindexes {\rnormalized_name\ringredients_hash\rcuisine_type\r}\r}\r// Nguyên Liệu Công Thức\rTable recipe_ingredients {\rid varchar(36) [pk]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\ringredient_name varchar(100) [not null]\rquantity varchar(50) [note: \u0026#39;2 chén, 500g, v.v.\u0026#39;]\runit varchar(20)\ris_optional boolean [default: false]\rindexes {\rrecipe_id\r}\r}\r// Lịch Sử Gợi Ý AI\rTable ai_suggestions {\rsuggestion_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id]\rcache_id varchar(36) [ref: \u0026gt; recipe_cache.cache_id, note: \u0026#39;Nếu từ cache\u0026#39;]\rprompt_text text [note: \u0026#39;Đầu vào của người dùng cho AI\u0026#39;]\ringredients_used json [note: \u0026#39;Danh sách nguyên liệu từ user_ingredients\u0026#39;]\rai_response json [note: \u0026#39;Phản hồi AI đầy đủ\u0026#39;]\rwas_from_cache boolean [default: false, note: \u0026#39;True nếu tái sử dụng từ cache\u0026#39;]\rwas_accepted boolean [default: false]\rfeedback_rating int [note: \u0026#39;1-5 sao\u0026#39;]\rfeedback_comment text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\rcache_id\r}\r}\r// Yêu Thích\rTable favorites {\rfavorite_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rcreated_at timestamp [default: `now()`]\rindexes {\r(user_id, recipe_id) [unique]\ruser_id\r}\r}\r// Kế Hoạch Bữa Ăn\rTable meal_plans {\rplan_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rplan_name varchar(100)\rstart_date date [not null]\rend_date date [not null]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rstart_date\r}\r}\r// Mục Kế Hoạch Bữa Ăn\rTable meal_plan_items {\ritem_id varchar(36) [pk]\rplan_id varchar(36) [ref: \u0026gt; meal_plans.plan_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rmeal_date date [not null]\rmeal_type enum(\u0026#39;breakfast\u0026#39;, \u0026#39;lunch\u0026#39;, \u0026#39;dinner\u0026#39;, \u0026#39;snack\u0026#39;)\rnotes text\rindexes {\rplan_id\rmeal_date\r}\r}\r// Nhật Ký Hoạt Động Người Dùng\rTable activity_logs {\rlog_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ractivity_type enum(\u0026#39;login\u0026#39;, \u0026#39;recipe_view\u0026#39;, \u0026#39;recipe_create\u0026#39;, \u0026#39;ai_suggestion\u0026#39;, \u0026#39;ingredient_add\u0026#39;)\ractivity_data json\rip_address varchar(45)\ruser_agent text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\ractivity_type\r}\r}Công Nghệ Cơ Sở Dữ Liệu#\rCơ Sở Dữ Liệu Chính: Amazon DynamoDB (NoSQL)\nKhả năng mở rộng cao Độ trễ thấp Serverless (không cần quản lý hạ tầng) Hiệu quả chi phí cho khối lượng công việc đọc nhiều Phương Án Thay Thế: Amazon RDS PostgreSQL\nNếu cần các truy vấn quan hệ phức tạp Tốt hơn cho phân tích và báo cáo Mẫu Truy Cập Dữ Liệu#\rMẫu Truy Cập Chính#\rLấy Hồ Sơ Người Dùng: users.user_id → Dữ liệu người dùng + vai trò Lấy Tùy Chọn Người Dùng: user_preferences.user_id → Tùy chọn Lấy Nguyên Liệu Người Dùng: user_ingredients.user_id → Danh sách nguyên liệu Lấy Cài Đặt Quyền Riêng Tư: privacy_settings.user_id → Cấu hình riêng tư Kiểm Tra Quan Hệ Bạn Bè: friendships(user_id, friend_id) → Trạng thái bạn bè Lấy Danh Sách Bạn Bè: friendships.user_id → Tất cả bạn bè Lấy Chi Tiết Công Thức: recipes.recipe_id → Công thức + Nguyên liệu Lấy Công Thức Người Dùng: recipes.user_id → Công thức của người dùng (lọc theo quyền riêng tư) Lấy Gợi Ý AI: ai_suggestions.user_id + created_at → Gợi ý gần đây Lấy Yêu Thích: favorites.user_id → Công thức yêu thích Lấy Kế Hoạch Bữa Ăn: meal_plans.user_id + start_date → Kế hoạch bữa ăn đang hoạt động Mẫu Thứ Cấp#\rTìm kiếm công thức theo món ăn/phương pháp (với lọc quyền riêng tư) Lấy công thức công khai phổ biến Quản trị: Lấy tất cả người dùng với bộ lọc vai trò Quản trị: Lấy thống kê người dùng Truy vấn phân tích (nhật ký hoạt động) Thiết Kế Bảng DynamoDB (Mẫu Bảng Đơn)#\rBảng Chính: smart-cooking-data#\rNgười Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PROFILE Thuộc tính: email, username, full_name, role, is_active, v.v. GSI1PK: ROLE#\u0026lt;role\u0026gt; (cho truy vấn quản trị) Tùy Chọn Người Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PREFERENCES Thuộc tính: dietary_restrictions, allergies, favorite_cuisines, v.v. Cài Đặt Quyền Riêng Tư#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PRIVACY Thuộc tính: profile_visibility, email_visibility, v.v. Nguyên Liệu Người Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: INGREDIENT#\u0026lt;ingredient_name\u0026gt; Thuộc tính: category, added_at Quan Hệ Bạn Bè#\rPK: USER#\u0026lt;user_id\u0026gt; SK: FRIEND#\u0026lt;friend_id\u0026gt; Thuộc tính: status, requested_at, responded_at GSI1PK: USER#\u0026lt;friend_id\u0026gt; (để tra cứu ngược) GSI1SK: FRIEND#\u0026lt;user_id\u0026gt; Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: METADATA Thuộc tính: title, description, cuisine_type, difficulty, v.v. GSI1PK: USER#\u0026lt;user_id\u0026gt; (công thức của người dùng) GSI1SK: RECIPE#\u0026lt;created_at\u0026gt; Nguyên Liệu Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: INGREDIENT#\u0026lt;number\u0026gt; Thuộc tính: ingredient_name, quantity, unit Gợi Ý AI#\rPK: USER#\u0026lt;user_id\u0026gt; SK: SUGGESTION#\u0026lt;timestamp\u0026gt; Thuộc tính: recipe_id, prompt_text, ai_response, was_accepted Yêu Thích#\rPK: USER#\u0026lt;user_id\u0026gt; SK: FAVORITE#\u0026lt;recipe_id\u0026gt; Thuộc tính: created_at Chỉ Mục Thứ Cấp Toàn Cục (GSI)#\rGSI1: Truy vấn dựa trên người dùng\nPK: GSI1PK (ví dụ: ROLE#admin, USER#\u0026lt;user_id\u0026gt;) SK: GSI1SK (ví dụ: timestamp, RECIPE#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Lấy tất cả quản trị viên Lấy công thức của người dùng sắp xếp theo ngày Lấy quan hệ bạn bè (tra cứu ngược) GSI2: Tìm kiếm \u0026amp; khám phá công thức\nPK: GSI2PK (ví dụ: CUISINE#\u0026lt;type\u0026gt;, METHOD#\u0026lt;type\u0026gt;) SK: GSI2SK (ví dụ: RECIPE#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Tìm kiếm công thức theo món ăn Tìm kiếm công thức theo phương pháp nấu Lấy công thức phổ biến Ước Tính Dung Lượng Lưu Trữ \u0026amp; Chi Phí#\rGiả Định#\r1.000 người dùng hoạt động Trung bình 20 nguyên liệu mỗi người dùng Trung bình 5 công thức đã lưu mỗi người dùng Trung bình 10 gợi ý AI mỗi người dùng mỗi tháng Ước Tính Dung Lượng#\rNgười dùng: 1.000 × 1KB = 1MB Nguyên liệu người dùng: 1.000 × 20 × 0.5KB = 10MB Công thức: 5.000 × 5KB = 25MB Gợi ý AI: 10.000 × 2KB = 20MB Tổng cộng: ~60MB Chi Phí DynamoDB (Hàng Tháng)#\rLưu trữ: 60MB × $0.25/GB = ~$0.02 Khả năng đọc: ~$5-10 Khả năng ghi: ~$5-10 Tổng cộng: ~$10-20/tháng "},{"id":4,"href":"/docs/summary/cost-analysis/","title":"Phân Tích Chi Phí","section":"Summary","content":"PHÂN TÍCH CHI PHÍ DỰ ÁN#\r   Chi Phí Hàng Tháng (1,000 users)#\rDịch Vụ Chi Phí Ước Tính Ghi Chú AWS Amplify $15 Hosting Next.js + CI/CD Amazon CloudFront $8 CDN, 1TB data transfer Amazon API Gateway $5 ~100K requests/tháng AWS Lambda Functions $15 6 Lambda functions Amazon Bedrock (Sonnet) $40 Claude 3.5 Sonnet Amazon Bedrock (Haiku) $5 Claude 3 Haiku (tiết kiệm) Amazon DynamoDB $15 On-demand pricing Amazon S3 $5 50GB storage Amazon Cognito FREE \u0026lt; 50,000 Amazon CloudWatch $8 Logs \u0026amp; Metrics AWS WAF $6 Web Application Firewall AWS Secrets Manager $2 API keys storage Tổng Chi Phí#\rKịch Bản Chi Phí/Tháng Sử dụng Claude Sonnet ~$119 Sử dụng Claude Haiku ~$84    Khuyến nghị: Sử dụng Claude 3 Haiku để tiết kiệm 70% chi phí AI (~$35/tháng)\n   Phân Tích Chi Phí Theo Quy Mô#\rKịch Bản 1: MVP (1,000 users)#\rChi phí: $84-119/tháng Chi phí/user: $0.084-0.119/tháng Doanh thu cần: $300-400/tháng (ROI 3-4x) Kịch Bản 2: Tăng Trưởng (10,000 users)#\rChi phí: $200-300/tháng Chi phí/user: $0.020-0.030/tháng Doanh thu cần: $800-1,200/tháng Kịch Bản 3: Scale (100,000 users)#\rChi phí: $1,000-1,500/tháng Chi phí/user: $0.010-0.015/tháng Doanh thu cần: $4,000-6,000/tháng    Chiến Lược Tối Ưu Chi Phí#\r1. AI/ML Costs (40-50% tổng chi phí)#\r✅ Sử dụng Claude 3 Haiku thay vì Sonnet → Tiết kiệm $35/tháng (70%) ✅ Cache AI responses với recipe_cache table → Giảm 30-40% AI calls ✅ Prompt optimization → Giảm token usage 20% ✅ Rate limiting → Ngăn abuse Tiết kiệm ước tính: $40-50/tháng\n2. Database Costs (15-20% tổng chi phí)#\r✅ DynamoDB on-demand → Chỉ trả khi sử dụng ✅ TTL cho old AI suggestions → Giảm storage ✅ Batch operations → Giảm write units ✅ Compression cho JSON fields → Giảm storage 30% Tiết kiệm ước tính: $5-10/tháng\n3. CDN \u0026amp; Hosting (15-20% tổng chi phí)#\r✅ CloudFront caching → Giảm origin requests ✅ Image optimization → Giảm bandwidth ✅ Gzip compression → Giảm 60% transfer size ✅ Lazy loading → Giảm initial load Tiết kiệm ước tính: $5-8/tháng\n4. Lambda Costs (10-15% tổng chi phí)#\r✅ Reserved concurrency → Ngăn runaway costs ✅ Memory optimization → Giảm execution cost ✅ Connection pooling → Giảm cold starts ✅ Code minification → Giảm package size Tiết kiệm ước tính: $3-5/tháng\n5. Storage Costs (5-10% tổng chi phí)#\r✅ S3 Intelligent-Tiering → Auto-optimize ✅ Lifecycle policies → Xóa temp files sau 90 ngày ✅ Image compression → WebP format ✅ Thumbnail generation → Giảm storage Tiết kiệm ước tính: $2-3/tháng\n   Chi Phí Dự Kiến Theo Thời Gian#\rNăm 1#\rTháng Users Chi Phí Revenue Target 1-3 100 $60 $200 (Beta) 4-6 500 $75 $250 7-9 1,500 $100 $400 10-12 3,000 $150 $600 Năm 2#\rQuarter Users Chi Phí Revenue Target Q1 5,000 $180 $800 Q2 8,000 $220 $1,200 Q3 12,000 $280 $1,800 Q4 20,000 $400 $3,000    Break-Even Analysis#\rMô Hình Freemium#\rFree tier: Giới hạn 10 AI suggestions/tháng Premium tier: $4.99/tháng (unlimited) Conversion rate target: 5% Tháng 1-3 (1,000 users)#\rPremium users: 50 (5%) Revenue: $250/tháng Cost: $84/tháng Profit: $166/tháng ✅ Tháng 12 (10,000 users)#\rPremium users: 500 (5%) Revenue: $2,500/tháng Cost: $250/tháng Profit: $2,250/tháng ✅ Mô Hình Ads (Alternative)#\rAd revenue: $0.50-1.00/user/tháng 1,000 users = $500-1,000/tháng Cost: $84/tháng Profit: $416-916/tháng ✅    Chi Phí Bảo Mật \u0026amp; Compliance#\rItem Chi Phí/Tháng AWS WAF $6 AWS Secrets Manager $2 SSL/TLS Certificates FREE (ACM) DDoS Protection (Shield Standard) FREE Encryption at Rest FREE CloudWatch Alarms $1 Total $9    Chi Phí Tăng Trưởng Dự Kiến#\rMarketing \u0026amp; Growth (Ngoài AWS)#\rMarketing: $500-1,000/tháng (Facebook Ads, Google Ads) Support: $200-500/tháng (Zendesk/Intercom) Analytics: $50-100/tháng (Mixpanel/Amplitude) Payment Processing: 2.9% + $0.30/transaction (Stripe) Total Operating Costs (Tháng 12)#\rAWS Infrastructure: $150 Marketing: $800 Support: $300 Analytics: $75 Payment Processing: $75 (3% × $2,500) Total: $1,400/tháng    ROI Projection#\rYear 1#\rTotal Investment: $10,000 (dev) + $1,500 (AWS) = $11,500 Revenue Year 1: $18,000 (average $1,500/tháng) ROI: 56% ✅ Year 2#\rTotal Investment: $5,000 (maintenance) + $3,500 (AWS) Revenue Year 2: $60,000 (average $5,000/tháng) ROI: 600% ✅✅    Khuyến Nghị Cuối Cùng#\rGiai Đoạn MVP (0-3 tháng)#\r✅ Sử dụng Claude 3 Haiku (tiết kiệm $35/tháng) ✅ Implement recipe cache (giảm 30% AI calls) ✅ Enable CloudFront caching (giảm bandwidth) ✅ Set billing alarms tại $100, $150, $200 Chi phí target: $60-80/tháng\nGiai Đoạn Growth (4-12 tháng)#\r✅ Monitor \u0026amp; optimize dựa trên usage patterns ✅ Scale DynamoDB capacity dần dần ✅ Consider Reserved Instances khi stable ✅ Implement advanced caching strategies Chi phí target: $100-300/tháng\nGiai Đoạn Scale (Year 2+)#\r✅ Negotiate Enterprise Pricing với AWS ✅ Consider Savings Plans (20-40% discount) ✅ Optimize architecture dựa trên real data ✅ Automate cost monitoring \u0026amp; alerts Chi phí target: \u0026lt; $0.02/user/tháng\n"}]