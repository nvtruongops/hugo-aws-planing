[{"id":0,"href":"/docs/summary/aws-services-diagram/","title":"AWS Services Architecture Diagram","section":"Summary","content":"AWS Services Architecture Diagram#\rSystem Architecture#\rgraph TB\rsubgraph \u0026#34;Client Layer\u0026#34;\rWebApp[Web App\u0026lt;br/\u0026gt;Next.js]\rMobileApp[Mobile App\u0026lt;br/\u0026gt;React Native - Future]\rend\rsubgraph \u0026#34;CDN \u0026amp; Hosting\u0026#34;\rCloudFront[Amazon CloudFront\u0026lt;br/\u0026gt;CDN]\rAmplify[AWS Amplify\u0026lt;br/\u0026gt;Hosting \u0026amp; CI/CD]\rend\rsubgraph \u0026#34;API Gateway Layer\u0026#34;\rAPIGateway[Amazon API Gateway\u0026lt;br/\u0026gt;REST API]\rWSGateway[API Gateway\u0026lt;br/\u0026gt;WebSocket - Future]\rend\rsubgraph \u0026#34;Authentication\u0026#34;\rCognitoUser[Amazon Cognito\u0026lt;br/\u0026gt;User Pool]\rCognitoIdentity[Cognito Identity Pool]\rend\rsubgraph \u0026#34;Compute Layer\u0026#34;\rLambdaAuth[Lambda: Auth Handler\u0026lt;br/\u0026gt;Node.js 20]\rLambdaRecipe[Lambda: Recipe CRUD\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAI[Lambda: AI Suggestion\u0026lt;br/\u0026gt;Node.js 20]\rLambdaProfile[Lambda: User Profile\u0026lt;br/\u0026gt;Node.js 20]\rLambdaSocial[Lambda: Social/Friends\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAdmin[Lambda: Admin Operations\u0026lt;br/\u0026gt;Node.js 20]\rend\rsubgraph \u0026#34;AI Services\u0026#34;\rBedrock[Amazon Bedrock\u0026lt;br/\u0026gt;Claude 3.5 Sonnet/Haiku]\rend\rsubgraph \u0026#34;Database Layer\u0026#34;\rDynamoDB[Amazon DynamoDB\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Table: Users\u0026lt;br/\u0026gt;Table: UserData\u0026lt;br/\u0026gt;Table: Recipes\u0026lt;br/\u0026gt;Table: AI_Suggestions\u0026lt;br/\u0026gt;Table: Privacy\u0026lt;br/\u0026gt;Table: Friendships]\rend\rsubgraph \u0026#34;Storage\u0026#34;\rS3[Amazon S3\u0026lt;br/\u0026gt;User Uploads \u0026amp; Assets]\rend\rsubgraph \u0026#34;Monitoring \u0026amp; Logging\u0026#34;\rCloudWatch[Amazon CloudWatch\u0026lt;br/\u0026gt;Logs \u0026amp; Metrics]\rXRay[AWS X-Ray\u0026lt;br/\u0026gt;Tracing]\rend\rsubgraph \u0026#34;Security\u0026#34;\rWAF[AWS WAF\u0026lt;br/\u0026gt;Web Application Firewall]\rSecrets[AWS Secrets Manager\u0026lt;br/\u0026gt;API Keys]\rend\rWebApp --\u0026gt; CloudFront\rCloudFront --\u0026gt; Amplify\rWebApp --\u0026gt; APIGateway\rAPIGateway --\u0026gt; CognitoUser\rCognitoUser --\u0026gt; LambdaAuth\rCognitoIdentity --\u0026gt; S3\rAPIGateway --\u0026gt; LambdaRecipe\rAPIGateway --\u0026gt; LambdaAI\rAPIGateway --\u0026gt; LambdaProfile\rAPIGateway --\u0026gt; LambdaSocial\rAPIGateway --\u0026gt; LambdaAdmin\rLambdaAI --\u0026gt; Bedrock\rLambdaRecipe --\u0026gt; DynamoDB\rLambdaAI --\u0026gt; DynamoDB\rLambdaProfile --\u0026gt; DynamoDB\rLambdaSocial --\u0026gt; DynamoDB\rLambdaAdmin --\u0026gt; DynamoDB\rLambdaRecipe --\u0026gt; S3\rLambdaAuth --\u0026gt; CloudWatch\rLambdaRecipe --\u0026gt; CloudWatch\rLambdaAI --\u0026gt; CloudWatch\rAPIGateway --\u0026gt; WAFDetailed Service Breakdown#\r1. Frontend \u0026amp; CDN#\rAWS Amplify:\nHosts Next.js application CI/CD pipeline (auto-deploy from GitHub) Custom domain \u0026amp; SSL certificates Cost: ~$15/month Amazon CloudFront:\nGlobal CDN for fast content delivery Caches static assets Cost: ~$5-10/month (1TB data transfer) 2. Authentication \u0026amp; Authorization#\rAmazon Cognito User Pool:\nUser registration \u0026amp; login Email verification Password recovery MFA support (future) Cost: FREE (\u0026lt; 50,000 ) Cognito Identity Pool:\nTemporary AWS credentials for S3 access Fine-grained IAM permissions 3. API Layer#\rAmazon API Gateway (REST):\nRESTful API endpoints Request validation API key management Throttling \u0026amp; rate limiting CORS configuration Cost: ~$3.50 per million requests API Endpoints#\rPOST /auth/register\rPOST /auth/login\rGET /user/profile\rPUT /user/profile\rPOST /user/ingredients\rGET /user/ingredients\rDELETE /user/ingredients/{id}\rPUT /user/privacy\rGET /user/privacy\rPOST /friends/request\rGET /friends\rPUT /friends/{id}/accept\rPUT /friends/{id}/reject\rDELETE /friends/{id}\rPOST /recipes\rGET /recipes/{id}\rPUT /recipes/{id}\rDELETE /recipes/{id}\rGET /recipes/search\rPOST /ai/suggest\rGET /ai/suggestions\rPOST /ai/feedback4. Lambda Functions#\rLambda 1: Auth Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: Cognito Post-Authentication Purpose: Create user profile on first login Lambda 2: Recipe CRUD#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway Purpose: Create, read, update, delete recipes Upload recipe images to S3 Query DynamoDB Lambda 3: AI Suggestion Engine ⭐#\rRuntime: Node.js 20 Memory: 1024MB Timeout: 60s Triggers: API Gateway Purpose: Call Amazon Bedrock (Claude 3.5) Generate recipe suggestions Parse user ingredients Save suggestions to DynamoDB Cost: Most expensive lambda (~70% of compute costs) Lambda 4: User Profile Manager#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Purpose: Manage user profile \u0026amp; preferences Update ingredients list Handle avatar uploads Manage privacy settings Lambda 5: Social/Friends Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Purpose: Friend request management Accept/reject friend requests List friends Privacy-aware data filtering Lambda 6: Admin Operations#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway (Admin only) Purpose: User management (ban/unban) Content moderation System statistics Recipe approval/rejection 5. AI/ML Services#\rAmazon Bedrock (Claude 3.5)#\rModel: Claude 3.5 Sonnet (or Haiku for cost savings) Use Case: Recipe suggestion AI agent Input: User profile + preferences + ingredients Output: Recipe suggestions with instructions Cost: Sonnet: $3 per million input tokens, $15 per million output tokens Haiku: $0.25 per million input tokens, $1.25 per million output tokens Estimated: $25-50/month (1,000 users, 10 suggestions/user/month) With Haiku: $3-7/month (70% savings) 6. Database#\rAmazon DynamoDB (NoSQL Database)#\rTables:\nUsers (PK: user_id) - User accounts \u0026amp; roles UserData (PK: user_id, SK: data_type) - Preferences, ingredients PrivacySettings (PK: user_id) - Privacy configurations Friendships (PK: user_id, SK: friend_id) - Social connections Recipes (PK: recipe_id, GSI: user_id) - Recipe data AISuggestions (PK: user_id, SK: timestamp) - AI history Features:\nAuto-scaling (on-demand mode) Point-in-time recovery (PITR) DynamoDB Streams (for real-time updates) Global Secondary Indexes (GSI) for querying Encryption at rest Cost: $15-25/month (on-demand pricing) Why DynamoDB over RDS? ✅ Serverless (no server management) ✅ Auto-scaling to zero cost when idle ✅ Better integration with Lambda ✅ Lower latency for key-value access ✅ Cost-effective for MVP ($15 vs $30+ for RDS)\n7. Storage#\rAmazon S3#\rBuckets:\nrecipe-images-prod: Recipe photos user-avatars-prod: Profile pictures static-assets-prod: App assets Features:\nVersioning enabled Lifecycle policies (delete after 90 days for temp files) S3 Transfer Acceleration Cost: ~$5/month (50GB storage) 8. Security#\rAWS WAF#\rProtection:\nSQL injection XSS attacks Rate limiting (1000 requests/5min per IP) Geographic restrictions (optional) Cost: $5/month + $1 per million requests AWS Secrets Manager#\rSecrets:\nDatabase credentials (if RDS) Third-party API keys (if needed) Cost: $0.40 per secret per month 9. Monitoring \u0026amp; Logging#\rAmazon CloudWatch#\rLogs: All Lambda function logs Metrics: API Gateway, Lambda, DynamoDB metrics Alarms: Lambda errors \u0026gt; 1% API Gateway 5xx errors DynamoDB throttling Cost: ~$5-10/month AWS X-Ray#\rTracing: End-to-end request tracing Performance: Identify bottlenecks Cost: $5 per million traces (first 100k free) Data Flow Diagram#\rsequenceDiagram\rparticipant User\rparticipant CloudFront\rparticipant Next.js\rparticipant APIGateway\rparticipant Cognito\rparticipant Lambda\rparticipant Bedrock\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;CloudFront: Access website\rCloudFront-\u0026gt;\u0026gt;Next.js: Serve static content\rNext.js-\u0026gt;\u0026gt;User: Display UI\rUser-\u0026gt;\u0026gt;APIGateway: Login request\rAPIGateway-\u0026gt;\u0026gt;Cognito: Authenticate\rCognito-\u0026gt;\u0026gt;APIGateway: JWT Token\rAPIGateway-\u0026gt;\u0026gt;User: Return token\rUser-\u0026gt;\u0026gt;APIGateway: Request AI suggestion\rAPIGateway-\u0026gt;\u0026gt;Cognito: Verify token\rAPIGateway-\u0026gt;\u0026gt;Lambda: Invoke AI Lambda\rLambda-\u0026gt;\u0026gt;DynamoDB: Get user profile\rLambda-\u0026gt;\u0026gt;DynamoDB: Get user ingredients\rLambda-\u0026gt;\u0026gt;Bedrock: Call Claude 3.5\rBedrock-\u0026gt;\u0026gt;Lambda: Recipe suggestion\rLambda-\u0026gt;\u0026gt;DynamoDB: Save suggestion\rLambda-\u0026gt;\u0026gt;APIGateway: Return result\rAPIGateway-\u0026gt;\u0026gt;User: Display suggestionCost Breakdown (Monthly)#\rService Estimated Cost AWS Amplify $15 CloudFront $8 API Gateway $5 Lambda Functions $15 Amazon Bedrock (Sonnet) $40 Amazon Bedrock (Haiku) $5 DynamoDB $15 S3 Storage $5 Cognito FREE CloudWatch $8 WAF $6 Secrets Manager $2 Total (with Sonnet) ~$119 Total (with Haiku) ~$84 Cost Optimization Tips#\r✅ Use Claude 3 Haiku instead of Sonnet → Save $35/month ✅ Use DynamoDB on-demand → Pay only for usage ✅ Enable CloudFront caching → Reduce API calls ✅ Set Lambda reserved concurrency → Prevent runaway costs ✅ Use S3 Intelligent-Tiering → Auto-optimize storage costs\nSecurity Best Practices#\rAPI Gateway: Enable throttling (1000 req/sec burst) Lambda: Use least-privilege IAM roles Cognito: Enforce strong password policy DynamoDB: Enable encryption at rest S3: Enable versioning \u0026amp; MFA delete CloudWatch: Set up billing alarms WAF: Enable managed rule groups Scalability#\rMetric Current Target (1 year) Users 1,000 10,000 Requests/month 100K 1M Storage 100MB 2GB Cost $84-119 $200-300 "},{"id":1,"href":"/docs/summary/","title":"Summary","section":"Docs","content":"AWS Project Documentation#\rComplete documentation for Smart Cooking App project.\n"},{"id":2,"href":"/docs/summary/ai-agent-implementation/","title":"AI Agent Implementation Plan","section":"Summary","content":"AI AGENT IMPLEMENTATION PLAN#\rSmart Recipe Recommendation System\n📋 TỔNG QUAN#\rTính năng: AI Agent gợi ý món ăn thông minh dựa trên:\nThông tin cá nhân (giới tính, tuổi, quốc gia) Sở thích ẩm thực (món canh, món chiên, món hấp…) Nguyên liệu nhập đơn giản (chỉ tên, không quản lý số lượng/hạn dùng) Scope:\n✅ User chỉ nhập danh sách nguyên liệu có sẵn ✅ AI tạo công thức phù hợp với user profile ❌ KHÔNG quản lý tủ lạnh chi tiết (số lượng, hạn sử dụng) Timeline: 2 tuần (Tuần 3-4 trong deployment plan)\nChi phí bổ sung: $25-50/tháng (1,000 users)\nNote: Có thể giảm 70% bằng cách dùng Claude 3 Haiku thay vì Sonnet\n🎯 USER FLOW#\r┌─────────────────────────────────────────────────────────┐\r│ USER INPUT │\r├─────────────────────────────────────────────────────────┤\r│ Người dùng A: │\r│ • Nam, 1990 (34 tuổi), Vietnam │\r│ • Thích ăn: canh, món hấp │\r│ • Nguyên liệu: Cá rô, bông súng, gừng, hành │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ AI AGENT PROCESSING │\r├─────────────────────────────────────────────────────────┤\r│ 1. Lấy thông tin từ user_preferences │\r│ 2. Lấy nguyên liệu từ user_ingredients │\r│ 3. Build custom prompt: │\r│ \u0026#34;Tạo món ăn với: │\r│ - Nguyên liệu: Cá rô, bông súng │\r│ - Cho: nam, trung niên │\r│ - Món: Việt Nam │\r│ - Loại: có thể có canh hoặc món hấp\u0026#34; │\r│ 4. Gọi Bedrock Claude API │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ AI RESPONSE \u0026amp; FINAL RESULT │\r├─────────────────────────────────────────────────────────┤\r│ Gợi ý: \u0026#34;Canh cá rô nấu bông súng\u0026#34; │\r│ • Phù hợp: nam trung niên, món Việt, có canh │\r│ • Nguyên liệu match: 4/4 │\r│ • Độ khó: Dễ │\r│ • Thời gian: 30 phút │\r│ │\r│ 📝 Công thức chi tiết (từ AI) │\r│ 🥘 Nutrition info │\r│ ⭐ Lưu vào favorites │\r└─────────────────────────────────────────────────────────┘🏗️ TECHNICAL IMPLEMENTATION#\rBackend: Node.js 20 Lambda Functions#\rAI Suggestion Lambda:\n// Using AWS SDK v3 for Bedrock const { BedrockRuntimeClient, InvokeModelCommand } = require(\u0026#39;@aws-sdk/client-bedrock-runtime\u0026#39;); // Model: Claude 3 Haiku (cost-effective) // Input: User preferences + ingredients // Output: Recipe suggestion JSON Key Services:\nAmazon Bedrock: Claude 3 Haiku model DynamoDB: Store user data \u0026amp; AI suggestions Lambda: Serverless compute (Node.js 20) API Gateway: REST API endpoints Database: Amazon DynamoDB#\rTables Used:\nUsers (PK: user_id) - Profile \u0026amp; role UserData (PK: user_id, SK: PREFERENCES | INGREDIENTS) - User settings PrivacySettings (PK: user_id) - Privacy configuration Friendships (PK: user_id, SK: friend_id) - Social connections AISuggestions (PK: user_id, SK: timestamp) - AI history Privacy Implementation:\n// Privacy filter applies before returning user data if (privacy.ingredients_visibility === \u0026#39;friends\u0026#39; \u0026amp;\u0026amp; !isFriend) { delete userProfile.ingredients; }API Endpoints#\rAI Suggestion Flow:\nPOST /ai/suggest\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;request\u0026#34;: \u0026#34;Something light for dinner\u0026#34;,\r\u0026#34;dietary_preferences\u0026#34;: [\u0026#34;no pork\u0026#34;]\r}\rResponse:\r{\r\u0026#34;suggestion_id\u0026#34;: \u0026#34;uuid\u0026#34;,\r\u0026#34;recipe\u0026#34;: {\r\u0026#34;name\u0026#34;: \u0026#34;Canh cá rô nấu bông súng\u0026#34;,\r\u0026#34;ingredients\u0026#34;: [...],\r\u0026#34;instructions\u0026#34;: [...],\r\u0026#34;nutrition\u0026#34;: {...}\r}\r}Privacy \u0026amp; Social Endpoints:\nPUT /user/privacy - Update privacy settings\rGET /user/profile/{userId} - Get profile (privacy-filtered)\rPOST /friends/request - Send friend request\rGET /friends - List friendsAdmin Endpoints:\nGET /admin/users - List all users (admin only)\rPUT /admin/users/{id}/ban - Ban user (admin only)\rGET /admin/statistics - System stats (admin only)🔒 PRIVACY \u0026amp; SECURITY#\rPrivacy Levels#\rPublic: Everyone can see Friends: Only accepted friends can see Private: Only user can see Privacy-Controlled Attributes#\rEmail (default: private) Date of birth (default: friends) Gender (default: public) Country (default: public) Recipes (default: public) Ingredients (default: friends) Preferences (default: friends) Role-Based Access Control#\rUser: Normal access Admin: Full access + moderation tools 💰 COST OPTIMIZATION (Without YouTube API)#\rMonthly costs (1,000 users):\nAmazon Bedrock (Haiku): $5-7 Lambda Functions: $15 DynamoDB: $15-25 S3: $5 Other services: $30 Total: ~$70-82/month (down from $84-119)\nSavings from removing YouTube API:\nNo API quota costs No dedicated Lambda for video search Simpler architecture Timeline \u0026amp; Milestones#\rSee the Customer Deployment Guide for detailed timeline.\n"},{"id":3,"href":"/docs/summary/database-diagram/","title":"Database Schema Diagram","section":"Summary","content":"Database Schema Diagram#\rERD (Entity Relationship Diagram)#\r// Users Table\rTable users {\ruser_id varchar(36) [pk, note: \u0026#39;UUID from Cognito\u0026#39;]\remail varchar(255) [unique, not null]\rusername varchar(50) [unique, not null]\rfull_name varchar(100)\rdate_of_birth date\rgender enum(\u0026#39;male\u0026#39;, \u0026#39;female\u0026#39;, \u0026#39;other\u0026#39;)\rcountry varchar(50)\ravatar_url varchar(500)\rrole enum(\u0026#39;user\u0026#39;, \u0026#39;admin\u0026#39;) [default: \u0026#39;user\u0026#39;]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rlast_login timestamp\rindexes {\remail\rusername\rrole\r}\r}\r// User Preferences\rTable user_preferences {\rpreference_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rdietary_restrictions json [note: \u0026#39;vegetarian, vegan, halal, kosher, etc.\u0026#39;]\rallergies json [note: \u0026#39;List of allergies\u0026#39;]\rfavorite_cuisines json [note: \u0026#39;Italian, Vietnamese, Japanese, etc.\u0026#39;]\rcooking_methods json [note: \u0026#39;steamed, fried, grilled, soup, etc.\u0026#39;]\rspice_level enum(\u0026#39;none\u0026#39;, \u0026#39;mild\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;hot\u0026#39;, \u0026#39;very_hot\u0026#39;)\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\r}\r// Privacy Settings\rTable privacy_settings {\rsetting_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null, unique]\rprofile_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;, note: \u0026#39;Who can see profile\u0026#39;]\remail_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;private\u0026#39;]\rdate_of_birth_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rgender_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rcountry_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rrecipes_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\ringredients_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rpreferences_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\r}\r}\r// Friendships\rTable friendships {\rfriendship_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rfriend_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rstatus enum(\u0026#39;pending\u0026#39;, \u0026#39;accepted\u0026#39;, \u0026#39;blocked\u0026#39;) [default: \u0026#39;pending\u0026#39;]\rrequested_at timestamp [default: `now()`]\rresponded_at timestamp\rindexes {\r(user_id, friend_id) [unique]\ruser_id\rfriend_id\rstatus\r}\r}\r// User Ingredients (Simple list - no quantity tracking)\rTable user_ingredients {\ringredient_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ringredient_name varchar(100) [not null]\rcategory varchar(50) [note: \u0026#39;meat, vegetable, spice, dairy, etc.\u0026#39;]\radded_at timestamp [default: `now()`]\rindexes {\r(user_id, ingredient_name) [unique]\r}\r}\r// Recipes\rTable recipes {\rrecipe_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, note: \u0026#39;Creator - null if system recipe\u0026#39;]\rtitle varchar(200) [not null]\rdescription text\rcuisine_type varchar(50)\rcooking_method varchar(50)\rdifficulty enum(\u0026#39;easy\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;hard\u0026#39;)\rprep_time_minutes int\rcook_time_minutes int\rservings int\rcalories_per_serving int\rinstructions json [note: \u0026#39;Array of step objects\u0026#39;]\ris_public boolean [default: false]\ris_ai_generated boolean [default: false]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcuisine_type\rcooking_method\r}\r}\r// Recipe Ingredients\rTable recipe_ingredients {\rid varchar(36) [pk]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\ringredient_name varchar(100) [not null]\rquantity varchar(50) [note: \u0026#39;2 cups, 500g, etc.\u0026#39;]\runit varchar(20)\ris_optional boolean [default: false]\rindexes {\rrecipe_id\r}\r}\r// AI Suggestions History\rTable ai_suggestions {\rsuggestion_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id]\rprompt_text text [note: \u0026#39;User input to AI\u0026#39;]\ringredients_used json [note: \u0026#39;List of ingredients from user_ingredients\u0026#39;]\rai_response json [note: \u0026#39;Full AI response\u0026#39;]\rwas_accepted boolean [default: false]\rfeedback_rating int [note: \u0026#39;1-5 stars\u0026#39;]\rfeedback_comment text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\r}\r}\r// Favorites\rTable favorites {\rfavorite_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rcreated_at timestamp [default: `now()`]\rindexes {\r(user_id, recipe_id) [unique]\ruser_id\r}\r}\r// Meal Plans\rTable meal_plans {\rplan_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rplan_name varchar(100)\rstart_date date [not null]\rend_date date [not null]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rstart_date\r}\r}\r// Meal Plan Items\rTable meal_plan_items {\ritem_id varchar(36) [pk]\rplan_id varchar(36) [ref: \u0026gt; meal_plans.plan_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rmeal_date date [not null]\rmeal_type enum(\u0026#39;breakfast\u0026#39;, \u0026#39;lunch\u0026#39;, \u0026#39;dinner\u0026#39;, \u0026#39;snack\u0026#39;)\rnotes text\rindexes {\rplan_id\rmeal_date\r}\r}\r// User Activity Logs\rTable activity_logs {\rlog_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ractivity_type enum(\u0026#39;login\u0026#39;, \u0026#39;recipe_view\u0026#39;, \u0026#39;recipe_create\u0026#39;, \u0026#39;ai_suggestion\u0026#39;, \u0026#39;ingredient_add\u0026#39;)\ractivity_data json\rip_address varchar(45)\ruser_agent text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\ractivity_type\r}\r}Database Technology#\rPrimary Database: Amazon DynamoDB (NoSQL)\nHigh scalability Low latency Serverless (no infrastructure management) Cost-effective for read-heavy workloads Alternative: Amazon RDS PostgreSQL\nIf complex relational queries are needed Better for analytics and reporting Data Access Patterns#\rPrimary Access Patterns#\rGet User Profile: users.user_id → User data + role Get User Preferences: user_preferences.user_id → Preferences Get User Ingredients: user_ingredients.user_id → Ingredient list Get Privacy Settings: privacy_settings.user_id → Privacy config Check Friendship: friendships(user_id, friend_id) → Friendship status Get Friends List: friendships.user_id → All friends Get Recipe Details: recipes.recipe_id → Recipe + Ingredients Get User Recipes: recipes.user_id → User\u0026rsquo;s recipes (filtered by privacy) Get AI Suggestions: ai_suggestions.user_id + created_at → Recent suggestions Get Favorites: favorites.user_id → Favorite recipes Get Meal Plan: meal_plans.user_id + start_date → Active meal plans Secondary Patterns#\rSearch recipes by cuisine/method (with privacy filtering) Get popular public recipes Admin: Get all users with role filter Admin: Get user statistics Analytics queries (activity logs) DynamoDB Table Design (Single-Table Pattern)#\rMain Table: smart-cooking-data#\rUsers#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PROFILE Attributes: email, username, full_name, role, is_active, etc. GSI1PK: ROLE#\u0026lt;role\u0026gt; (for admin queries) User Preferences#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PREFERENCES Attributes: dietary_restrictions, allergies, favorite_cuisines, etc. Privacy Settings#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PRIVACY Attributes: profile_visibility, email_visibility, etc. User Ingredients#\rPK: USER#\u0026lt;user_id\u0026gt; SK: INGREDIENT#\u0026lt;ingredient_name\u0026gt; Attributes: category, added_at Friendships#\rPK: USER#\u0026lt;user_id\u0026gt; SK: FRIEND#\u0026lt;friend_id\u0026gt; Attributes: status, requested_at, responded_at GSI1PK: USER#\u0026lt;friend_id\u0026gt; (for reverse lookup) GSI1SK: FRIEND#\u0026lt;user_id\u0026gt; Recipes#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: METADATA Attributes: title, description, cuisine_type, difficulty, etc. GSI1PK: USER#\u0026lt;user_id\u0026gt; (user\u0026rsquo;s recipes) GSI1SK: RECIPE#\u0026lt;created_at\u0026gt; Recipe Ingredients#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: INGREDIENT#\u0026lt;number\u0026gt; Attributes: ingredient_name, quantity, unit AI Suggestions#\rPK: USER#\u0026lt;user_id\u0026gt; SK: SUGGESTION#\u0026lt;timestamp\u0026gt; Attributes: recipe_id, prompt_text, ai_response, was_accepted Favorites#\rPK: USER#\u0026lt;user_id\u0026gt; SK: FAVORITE#\u0026lt;recipe_id\u0026gt; Attributes: created_at Global Secondary Indexes (GSI)#\rGSI1: User-based queries\nPK: GSI1PK (e.g., ROLE#admin, USER#\u0026lt;user_id\u0026gt;) SK: GSI1SK (e.g., timestamp, RECIPE#\u0026lt;created_at\u0026gt;) Use cases: Get all admins Get user\u0026rsquo;s recipes sorted by date Get friend relationships (reverse lookup) GSI2: Recipe search \u0026amp; discovery\nPK: GSI2PK (e.g., CUISINE#\u0026lt;type\u0026gt;, METHOD#\u0026lt;type\u0026gt;) SK: GSI2SK (e.g., RECIPE#\u0026lt;created_at\u0026gt;) Use cases: Search recipes by cuisine Search recipes by cooking method Get popular recipes Estimated Storage \u0026amp; Costs#\rAssumptions#\r1,000 active users Average 20 ingredients per user Average 5 recipes saved per user Average 10 AI suggestions per user per month Storage Estimate#\rUsers: 1,000 × 1KB = 1MB User Ingredients: 1,000 × 20 × 0.5KB = 10MB Recipes: 5,000 × 5KB = 25MB AI Suggestions: 10,000 × 2KB = 20MB Total: ~60MB DynamoDB Costs (Monthly)#\rStorage: 60MB × $0.25/GB = ~$0.02 Read Capacity: ~$5-10 Write Capacity: ~$5-10 Total: ~$10-20/month "}]