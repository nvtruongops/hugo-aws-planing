[{"id":0,"href":"/docs/summary/aws-services-diagram/","title":"AWS Services Architecture Diagram","section":"Summary","content":"Sơ Đồ Kiến Trúc Dịch Vụ AWS#\rKiến Trúc Hệ Thống#\rgraph TB\rsubgraph \u0026#34;Tầng Client\u0026#34;\rWebApp[Web App\u0026lt;br/\u0026gt;Next.js]\rMobileApp[Mobile App\u0026lt;br/\u0026gt;React Native - Tương lai]\rend\rsubgraph \u0026#34;CDN \u0026amp; Hosting\u0026#34;\rCloudFront[Amazon CloudFront\u0026lt;br/\u0026gt;CDN]\rAmplify[AWS Amplify\u0026lt;br/\u0026gt;Hosting \u0026amp; CI/CD]\rend\rsubgraph \u0026#34;Tầng API Gateway\u0026#34;\rAPIGateway[Amazon API Gateway\u0026lt;br/\u0026gt;REST API]\rWSGateway[API Gateway\u0026lt;br/\u0026gt;WebSocket - Tương lai]\rend\rsubgraph \u0026#34;Xác Thực\u0026#34;\rCognitoUser[Amazon Cognito\u0026lt;br/\u0026gt;User Pool]\rCognitoIdentity[Cognito Identity Pool]\rend\rsubgraph \u0026#34;Tầng Compute\u0026#34;\rLambdaAuth[Lambda: Auth Handler\u0026lt;br/\u0026gt;Node.js 20]\rLambdaRecipe[Lambda: Recipe CRUD\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAI[Lambda: AI Suggestion\u0026lt;br/\u0026gt;Node.js 20]\rLambdaProfile[Lambda: User Profile\u0026lt;br/\u0026gt;Node.js 20]\rLambdaSocial[Lambda: Social/Friends\u0026lt;br/\u0026gt;Node.js 20]\rLambdaPost[Lambda: Posts \u0026amp; Comments\u0026lt;br/\u0026gt;Node.js 20]\rLambdaNotification[Lambda: Notifications\u0026lt;br/\u0026gt;Node.js 20]\rLambdaAdmin[Lambda: Admin Operations\u0026lt;br/\u0026gt;Node.js 20]\rLambdaCooking[Lambda: Cooking History\u0026lt;br/\u0026gt;Node.js 20]\rLambdaRating[Lambda: Rating \u0026amp; Approval\u0026lt;br/\u0026gt;Node.js 20]\rLambdaIngredient[Lambda: Ingredient Validation\u0026lt;br/\u0026gt;Node.js 20]\rend\rsubgraph \u0026#34;Dịch Vụ AI\u0026#34;\rBedrock[Amazon Bedrock\u0026lt;br/\u0026gt;Claude 3.5 Sonnet/Haiku]\rend\rsubgraph \u0026#34;Tầng Database\u0026#34;\rDynamoDB[Amazon DynamoDB\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;Bảng: Users\u0026lt;br/\u0026gt;Bảng: UserData\u0026lt;br/\u0026gt;Bảng: Recipes\u0026lt;br/\u0026gt;Bảng: RecipeRatings\u0026lt;br/\u0026gt;Bảng: UserCookingHistory\u0026lt;br/\u0026gt;Bảng: MasterIngredients\u0026lt;br/\u0026gt;Bảng: AI_Suggestions\u0026lt;br/\u0026gt;Bảng: Privacy\u0026lt;br/\u0026gt;Bảng: Friendships\u0026lt;br/\u0026gt;Bảng: Posts\u0026lt;br/\u0026gt;Bảng: Comments\u0026lt;br/\u0026gt;Bảng: Reactions\u0026lt;br/\u0026gt;Bảng: Notifications]\rend\rsubgraph \u0026#34;Lưu Trữ\u0026#34;\rS3[Amazon S3\u0026lt;br/\u0026gt;User Uploads \u0026amp; Assets]\rend\rsubgraph \u0026#34;Giám Sát \u0026amp; Logging\u0026#34;\rCloudWatch[Amazon CloudWatch\u0026lt;br/\u0026gt;Logs \u0026amp; Metrics]\rXRay[AWS X-Ray\u0026lt;br/\u0026gt;Tracing]\rend\rsubgraph \u0026#34;Bảo Mật\u0026#34;\rWAF[AWS WAF\u0026lt;br/\u0026gt;Web Application Firewall]\rSecrets[AWS Secrets Manager\u0026lt;br/\u0026gt;API Keys]\rend\rWebApp --\u0026gt; CloudFront\rCloudFront --\u0026gt; Amplify\rWebApp --\u0026gt; APIGateway\rAPIGateway --\u0026gt; CognitoUser\rCognitoUser --\u0026gt; LambdaAuth\rCognitoIdentity --\u0026gt; S3\rAPIGateway --\u0026gt; LambdaRecipe\rAPIGateway --\u0026gt; LambdaAI\rAPIGateway --\u0026gt; LambdaProfile\rAPIGateway --\u0026gt; LambdaSocial\rAPIGateway --\u0026gt; LambdaPost\rAPIGateway --\u0026gt; LambdaNotification\rAPIGateway --\u0026gt; LambdaAdmin\rAPIGateway --\u0026gt; LambdaCooking\rAPIGateway --\u0026gt; LambdaRating\rAPIGateway --\u0026gt; LambdaIngredient\rLambdaAI --\u0026gt; Bedrock\rLambdaRecipe --\u0026gt; DynamoDB\rLambdaAI --\u0026gt; DynamoDB\rLambdaProfile --\u0026gt; DynamoDB\rLambdaSocial --\u0026gt; DynamoDB\rLambdaPost --\u0026gt; DynamoDB\rLambdaNotification --\u0026gt; DynamoDB\rLambdaAdmin --\u0026gt; DynamoDB\rLambdaCooking --\u0026gt; DynamoDB\rLambdaRating --\u0026gt; DynamoDB\rLambdaIngredient --\u0026gt; DynamoDB\rLambdaRecipe --\u0026gt; S3\rLambdaAuth --\u0026gt; CloudWatch\rLambdaRecipe --\u0026gt; CloudWatch\rLambdaAI --\u0026gt; CloudWatch\rLambdaCooking --\u0026gt; CloudWatch\rLambdaRating --\u0026gt; CloudWatch\rAPIGateway --\u0026gt; WAFPhân Tích Chi Tiết Các Dịch Vụ#\r1. Frontend \u0026amp; CDN#\rAWS Amplify:\nHost ứng dụng Node.js Pipeline CI/CD (tự động deploy từ GitHub) Custom domain \u0026amp; SSL certificates Chi phí: ~$15/tháng Amazon CloudFront:\nCDN toàn cầu cho phân phối nội dung nhanh chóng Cache các static assets Chi phí: ~$5-10/tháng (1TB data transfer) 2. Xác Thực \u0026amp; Phân Quyền#\rAmazon Cognito User Pool:\nĐăng ký \u0026amp; đăng nhập người dùng Xác minh email Khôi phục mật khẩu Hỗ trợ MFA (tương lai) Chi phí: MIỄN PHÍ (\u0026lt; 50,000 ) Cognito Identity Pool:\nThông tin xác thực AWS tạm thời để truy cập S3 Quyền IAM chi tiết 3. Tầng API#\rAmazon API Gateway (REST):\nRESTful API endpoints Validation request Quản lý API key Throttling \u0026amp; rate limiting Cấu hình CORS Chi phí: ~$3.50 trên triệu requests API Endpoints#\rPOST /auth/register\rPOST /auth/login\rGET /user/profile\rPUT /user/profile\rPOST /user/ingredients\rGET /user/ingredients\rDELETE /user/ingredients/{id}\rPUT /user/privacy\rGET /user/privacy\rPOST /friends/request\rGET /friends\rPUT /friends/{id}/accept\rPUT /friends/{id}/reject\rDELETE /friends/{id}\rPOST /recipes\rGET /recipes/{id}\rPUT /recipes/{id}\rDELETE /recipes/{id}\rGET /recipes/search\rPOST /recipes/{id}/rate\rPOST /ai/suggest\rGET /ai/suggestions\rPOST /ai/feedback\rPOST /cooking/start\rPUT /cooking/{id}/complete\rGET /user/cooking-history\rDELETE /cooking/{id}\rPUT /cooking/{id}/favorite\rPOST /ingredients/validate\rGET /ingredients/search\rPOST /posts\rGET /posts/{id}\rPUT /posts/{id}\rDELETE /posts/{id}\rGET /posts/feed\rGET /posts/user/{userId}\rPOST /posts/{id}/comments\rGET /posts/{id}/comments\rPUT /comments/{id}\rDELETE /comments/{id}\rPOST /reactions\rDELETE /reactions/{id}\rGET /reactions/{targetType}/{targetId}\rGET /notifications\rPUT /notifications/{id}/read\rPUT /notifications/read-all4. Lambda Functions#\rLambda 1: Auth Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: Cognito Post-Authentication Mục đích: Tạo profile người dùng khi đăng nhập lần đầu Lambda 2: Recipe CRUD#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway Mục đích: Tạo, đọc, cập nhật, xóa recipes Upload ảnh recipe lên S3 Query DynamoDB Lambda 3: AI Suggestion Engine ⭐#\rRuntime: Node.js 20 Memory: 1024MB Timeout: 60s Triggers: API Gateway Mục đích: Validate nguyên liệu với master_ingredients table Query 4 approved recipes từ DynamoDB Gọi Amazon Bedrock (Claude 3.5) cho 1 recipe mới Tạo gợi ý công thức Phân tích nguyên liệu người dùng Lưu gợi ý vào DynamoDB Chi phí: Lambda tốn kém nhất (~70% chi phí compute) Lambda 4: User Profile Manager#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý profile \u0026amp; preferences người dùng Cập nhật danh sách nguyên liệu Xử lý upload avatar Quản lý cài đặt riêng tư Lambda 5: Social/Friends Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý yêu cầu kết bạn Chấp nhận/từ chối yêu cầu kết bạn Liệt kê danh sách bạn bè Lọc dữ liệu theo privacy settings Lambda 6: Posts \u0026amp; Comments Handler#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway Mục đích: Tạo, đọc, cập nhật, xóa bài đăng Quản lý bình luận (nested replies) Upload ảnh posts lên S3 Cập nhật counters (likes_count, comments_count) Lọc theo privacy settings Lambda 7: Notifications Handler#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway, DynamoDB Streams Mục đích: Tạo thông báo khi có hoạt động (comment, like, friend request) Đánh dấu đã đọc/chưa đọc Lấy danh sách thông báo Push notifications (tương lai) Lambda 8: Admin Operations#\rRuntime: Node.js 20 Memory: 512MB Timeout: 30s Triggers: API Gateway (Chỉ Admin) Mục đích: Quản lý người dùng (ban/unban) Kiểm duyệt nội dung (posts, comments) Thống kê hệ thống Không cần phê duyệt recipes - Tự động approval dựa trên rating Lambda 9: Cooking History Handler ⭐ NEW#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Quản lý lịch sử nấu ăn cá nhân Start/complete cooking sessions Lấy lịch sử nấu ăn của user Đánh dấu món yêu thích Ghi chú cá nhân cho từng lần nấu Lambda 10: Rating \u0026amp; Approval Handler ⭐ NEW#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Lưu rating của user cho recipes Tính toán average rating Auto-approve recipes khi rating \u0026gt;= 4.0 sao Update recipe_ratings table Link rating với cooking history Lambda 11: Ingredient Validation Handler ⭐ NEW#\rRuntime: Node.js 20 Memory: 256MB Timeout: 10s Triggers: API Gateway Mục đích: Validate nguyên liệu với master_ingredients table Fuzzy search cho nguyên liệu tương tự Auto-correct tên nguyên liệu (bỏ dấu) Gợi ý nguyên liệu thay thế 5. Dịch Vụ AI/ML#\rAmazon Bedrock (Claude 3.5)#\rModel: Claude 3.5 Sonnet (hoặc Haiku để tiết kiệm chi phí) Use Case: AI agent gợi ý công thức Input: Profile người dùng + preferences + nguyên liệu Output: Gợi ý công thức với hướng dẫn Chi phí: Sonnet: $3 trên triệu input tokens, $15 trên triệu output tokens Haiku: $0.25 trên triệu input tokens, $1.25 trên triệu output tokens Ước tính: $25-50/tháng (1,000 users, 10 suggestions/user/tháng) Với Haiku: $3-7/tháng (tiết kiệm 70%) 6. Database#\rAmazon DynamoDB (NoSQL Database)#\rCác bảng:\nUsers (PK: user_id) - Tài khoản người dùng \u0026amp; roles UserData (PK: user_id, SK: data_type) - Preferences, nguyên liệu PrivacySettings (PK: user_id) - Cấu hình riêng tư Friendships (PK: user_id, SK: friend_id) - Kết nối mạng xã hội Recipes (PK: recipe_id, GSI: user_id) - Dữ liệu công thức RecipeRatings (PK: recipe_id, SK: user_id) - Đánh giá công thức cho auto-approval ⭐ UserCookingHistory (PK: user_id, SK: timestamp) - Lịch sử nấu ăn cá nhân ⭐ MasterIngredients (PK: ingredient_id) - Master list nguyên liệu để validate ⭐ AISuggestions (PK: user_id, SK: timestamp) - Lịch sử AI Posts (PK: post_id, GSI: user_id) - Bài đăng xã hội Comments (PK: post_id, SK: timestamp) - Bình luận Reactions (PK: target_id, SK: user_id) - Lượt thích Notifications (PK: user_id, SK: timestamp) - Thông báo Tính năng:\nAuto-scaling (on-demand mode) Point-in-time recovery (PITR) DynamoDB Streams (cho cập nhật real-time \u0026amp; notifications) Global Secondary Indexes (GSI) cho truy vấn Mã hóa at rest Chi phí: $35-45/tháng (on-demand pricing với cooking history \u0026amp; ratings) Tại sao chọn DynamoDB thay vì RDS?\n✅ Serverless (không cần quản lý server) ✅ Auto-scaling về zero cost khi idle ✅ Tích hợp tốt hơn với Lambda ✅ Độ trễ thấp hơn cho key-value access ✅ Tiết kiệm chi phí cho MVP ($15 vs $30+ cho RDS) 7. Lưu Trữ#\rAmazon S3#\rBuckets:\nrecipe-images-prod: Ảnh công thức user-avatars-prod: Ảnh đại diện post-images-prod: Ảnh bài đăng static-assets-prod: Assets ứng dụng Tính năng:\nVersioning enabled Lifecycle policies (xóa sau 90 ngày cho temp files) S3 Transfer Acceleration Chi phí: ~$10/tháng (100GB storage với social media images) 8. Bảo Mật#\rAWS WAF#\rBảo vệ:\nSQL injection XSS attacks Rate limiting (1000 requests/5min mỗi IP) Geographic restrictions (tùy chọn) Chi phí: $5/tháng + $1 trên triệu requests AWS Secrets Manager#\rSecrets:\nDatabase credentials (nếu dùng RDS) Third-party API keys (nếu cần) Chi phí: $0.40 mỗi secret mỗi tháng 9. Giám Sát \u0026amp; Logging#\rAmazon CloudWatch#\rLogs: Tất cả logs của Lambda functions Metrics: Metrics của API Gateway, Lambda, DynamoDB Alarms: Lambda errors \u0026gt; 1% API Gateway 5xx errors DynamoDB throttling Chi phí: ~$5-10/tháng AWS X-Ray#\rTracing: Tracing request từ đầu đến cuối Performance: Xác định bottlenecks Chi phí: $5 trên triệu traces (100k đầu miễn phí) Sơ Đồ Luồng Dữ Liệu#\rFlow 1: AI Recipe Suggestion (Enhanced - Flexible Mix)#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaAI\rparticipant DynamoDB\rparticipant Bedrock\rparticipant CloudWatch\rUser-\u0026gt;\u0026gt;APIGateway: POST /ai/suggest\u0026lt;br/\u0026gt;{ingredients, recipe_count: 3}\rAPIGateway-\u0026gt;\u0026gt;LambdaAI: Xử lý request\rNote over LambdaAI: STEP 1: Validate Ingredients\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Check master_ingredients\rDynamoDB--\u0026gt;\u0026gt;LambdaAI: Validation results\ralt Có nguyên liệu không hợp lệ\rLambdaAI-\u0026gt;\u0026gt;CloudWatch: Log invalid ingredients\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Increment report count\ralt Report count \u0026gt;= 5\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Notify admin\rend\rend\rNote over LambdaAI: STEP 2: Query DB với categories\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Query approved recipes\u0026lt;br/\u0026gt;(match ingredients + categories)\rDynamoDB--\u0026gt;\u0026gt;LambdaAI: Found: 2 món\rNote over LambdaAI: STEP 3: Calculate AI Gap\u0026lt;br/\u0026gt;Requested: 3, DB: 2, Gap: 1\rNote over LambdaAI: STEP 4: Generate AI (nếu cần)\rloop For each AI recipe (1 món)\rLambdaAI-\u0026gt;\u0026gt;Bedrock: Generate recipe\u0026lt;br/\u0026gt;(ingredients + diverse category)\rBedrock--\u0026gt;\u0026gt;LambdaAI: AI Recipe\rend\rNote over LambdaAI: STEP 5: Combine \u0026amp; Return\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Save suggestion history\rLambdaAI--\u0026gt;\u0026gt;User: 2 DB + 1 AI = 3 món ✅\u0026lt;br/\u0026gt;+ Warnings (if any)Key Improvements:\n✅ Flexible recipe count (1-5 món) ✅ Dynamic DB/AI mix (tiết kiệm cost) ✅ Invalid ingredient reporting system ✅ Category diversity (xào, canh, hấp\u0026hellip;) Flow 2: Recipe Auto-Approval (Rating-based)#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaRecipe\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: Nấu món (AI generated)\rUser-\u0026gt;\u0026gt;APIGateway: Click \u0026#34;Hoàn thành\u0026#34;\rAPIGateway-\u0026gt;\u0026gt;User: Hiển thị form đánh giá\rUser-\u0026gt;\u0026gt;APIGateway: POST /recipes/{id}/rate (rating + comment)\rAPIGateway-\u0026gt;\u0026gt;LambdaRecipe: Lưu rating\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Save rating\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Calculate average rating\ralt Rating \u0026gt;= 4 sao\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Set recipe.is_approved = true\rLambdaRecipe-\u0026gt;\u0026gt;DynamoDB: Add to public recipes\rLambdaRecipe-\u0026gt;\u0026gt;User: \u0026#34;Công thức đã được thêm vào database!\u0026#34;\relse Rating \u0026lt; 4 sao\rLambdaRecipe-\u0026gt;\u0026gt;User: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34;\rendFlow 3: Social Interaction#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaPost\rparticipant LambdaNotification\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: POST /posts (chia sẻ công thức)\rAPIGateway-\u0026gt;\u0026gt;LambdaPost: Tạo post\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Save post\rLambdaPost-\u0026gt;\u0026gt;User: Post created\rUser-\u0026gt;\u0026gt;APIGateway: POST /posts/{id}/comments\rAPIGateway-\u0026gt;\u0026gt;LambdaPost: Tạo comment\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Save comment\rLambdaPost-\u0026gt;\u0026gt;DynamoDB: Update comments_count\rLambdaPost-\u0026gt;\u0026gt;LambdaNotification: Trigger notification\rLambdaNotification-\u0026gt;\u0026gt;DynamoDB: Create notification for post owner\rLambdaNotification-\u0026gt;\u0026gt;User: Push notificationFlow 4: Error Handling - Invalid Ingredients#\rsequenceDiagram\rparticipant User\rparticipant APIGateway\rparticipant LambdaAI\rparticipant DynamoDB\rUser-\u0026gt;\u0026gt;APIGateway: POST /ai/suggest {\u0026#34;ingredients\u0026#34;: [\u0026#34;abc xyz\u0026#34;, \u0026#34;123\u0026#34;]}\rAPIGateway-\u0026gt;\u0026gt;LambdaAI: Validate ingredients\ralt Nguyên liệu không tồn tại\rLambdaAI-\u0026gt;\u0026gt;DynamoDB: Fuzzy search similar ingredients\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Không tìm thấy nguyên liệu. Bạn có muốn: [gà, cá, tôm]?\u0026#34;\relse Nguyên liệu sai format\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Tên nguyên liệu không hợp lệ. Vui lòng nhập lại.\u0026#34;\relse Nguyên liệu quá ít (\u0026lt; 2)\rLambdaAI-\u0026gt;\u0026gt;User: Error 400: \u0026#34;Cần ít nhất 2 nguyên liệu để tạo món ăn.\u0026#34;\rend"},{"id":1,"href":"/docs/summary/","title":"Summary","section":"Docs","content":"AWS Project Documentation#\rComplete documentation for Smart Cooking App project.\n"},{"id":2,"href":"/docs/summary/ai-agent-implementation/","title":"Kế Hoạch Triển Khai AI Agent","section":"Summary","content":"KẾ HOẠCH TRIỂN KHAI AI AGENT#\rHệ Thống Gợi Ý Công Thức Thông Minh\n📋 TỔNG QUAN#\rTính năng: AI Agent gợi ý món ăn thông minh dựa trên:\nThông tin cá nhân (giới tính, tuổi, quốc gia) Sở thích ẩm thực (món canh, món chiên, món hấp…) Nguyên liệu nhập đơn giản (chỉ tên, không quản lý số lượng/hạn dùng) Phạm vi:\n✅ User nhập danh sách nguyên liệu ✅ System check nguyên liệu hợp lệ ✅ Gợi ý 4 món từ database + 1 món AI tạo mới ✅ Auto-approval công thức dựa trên rating (\u0026gt;= 4 sao) ✅ Error handling cho nguyên liệu không hợp lệ Thời gian: 2 tuần (Tuần 3-4 trong deployment plan)\n🎯 LUỒNG NGƯỜI DÙNG#\rFlow 1: Gợi Ý Món Ăn Thông Minh (Smart Suggestion)#\r┌─────────────────────────────────────────────────────────┐\r│ ĐẦU VÀO NGƯỜI DÙNG │\r├─────────────────────────────────────────────────────────┤\r│ Người dùng A: │\r│ • Nam, 1990 (34 tuổi), Vietnam │\r│ • Thích ăn: canh, món hấp │\r│ • Nguyên liệu nhập: Cá rô, bông súng, gừng, hành │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ VALIDATE \u0026amp; PROCESS │\r├─────────────────────────────────────────────────────────┤\r│ 1. Check nguyên liệu hợp lệ: │\r│ ✅ \u0026#34;Cá rô\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Bông súng\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Gừng\u0026#34; → Có trong database │\r│ ✅ \u0026#34;Hành\u0026#34; → Có trong database │\r│ │\r│ 2. Tìm công thức: │\r│ - Query DynamoDB: 4 món match nguyên liệu │\r│ - Gọi AI Bedrock: 1 món mới sáng tạo │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ KẾT QUẢ GỢI Ý (5 MÓN) │\r├─────────────────────────────────────────────────────────┤\r│ 📦 Từ Database (4 món): │\r│ 1. Canh cá rô nấu bông súng │\r│ 2. Cá rô kho gừng │\r│ 3. Canh bông súng │\r│ 4. Cá rô chiên │\r│ │\r│ 🤖 AI Generated (1 món mới): │\r│ 5. Cá rô hấp bông súng gừng hành │\r│ (Món độc đáo từ AI) │\r└─────────────────────────────────────────────────────────┘Flow 2: Auto-Approval Công Thức (Rating-based)#\r┌─────────────────────────────────────────────────────────┐\r│ USER NẤU MÓN AI TẠO │\r├─────────────────────────────────────────────────────────┤\r│ 1. User chọn món: \u0026#34;Cá rô hấp bông súng gừng hành\u0026#34; │\r│ 2. Làm theo hướng dẫn │\r│ 3. Click \u0026#34;Hoàn thành\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ ĐÁNH GIÁ CÔNG THỨC │\r├─────────────────────────────────────────────────────────┤\r│ Popup hiển thị: │\r│ • Rating: ⭐⭐⭐⭐⭐ (1-5 sao) │\r│ • Comment: \u0026#34;Món này rất ngon!\u0026#34; │\r│ • Submit │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ XỬ LÝ RATING │\r├─────────────────────────────────────────────────────────┤\r│ IF rating \u0026gt;= 4 sao: │\r│ ✅ Set recipe.is_approved = true │\r│ ✅ Add to public recipes database │\r│ ✅ Notify: \u0026#34;Công thức đã được thêm vào database!\u0026#34; │\r│ │\r│ ELSE (rating \u0026lt; 4 sao): │\r│ ℹ️ Notify: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34; │\r│ ❌ Không thêm vào database │\r└─────────────────────────────────────────────────────────┘Flow 3: Error Handling - Nguyên Liệu Không Hợp Lệ#\r┌─────────────────────────────────────────────────────────┐\r│ USER NHẬP NGUYÊN LIỆU SAI │\r├─────────────────────────────────────────────────────────┤\r│ Input: \u0026#34;abc xyz\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;thit ga\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ VALIDATE TỪNG NGUYÊN LIỆU │\r├─────────────────────────────────────────────────────────┤\r│ 1. \u0026#34;abc xyz\u0026#34; → ❌ Không tồn tại │\r│ → Fuzzy search: Tìm nguyên liệu gần đúng │\r│ → Gợi ý: \u0026#34;Bạn có muốn: [gà, cá, bò]?\u0026#34; │\r│ │\r│ 2. \u0026#34;123\u0026#34; → ❌ Format không hợp lệ │\r│ → Error: \u0026#34;Tên nguyên liệu không hợp lệ\u0026#34; │\r│ │\r│ 3. \u0026#34;thit ga\u0026#34; → ✅ Fuzzy match: \u0026#34;thịt gà\u0026#34; │\r│ → Auto-correct: \u0026#34;Bạn muốn dùng \u0026#39;thịt gà\u0026#39;?\u0026#34; │\r└────────────────────┬────────────────────────────────────┘\r│\r▼\r┌─────────────────────────────────────────────────────────┐\r│ ERROR RESPONSES │\r├─────────────────────────────────────────────────────────┤\r│ Case 1: Nguyên liệu không tồn tại │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;ingredient_not_found\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Không tìm thấy nguyên liệu: abc xyz\u0026#34;, │\r│ \u0026#34;suggestions\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;] │\r│ } │\r│ │\r│ Case 2: Format không hợp lệ │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;invalid_format\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Tên nguyên liệu không hợp lệ: 123\u0026#34; │\r│ } │\r│ │\r│ Case 3: Quá ít nguyên liệu │\r│ → HTTP 400: { │\r│ \u0026#34;error\u0026#34;: \u0026#34;insufficient_ingredients\u0026#34;, │\r│ \u0026#34;message\u0026#34;: \u0026#34;Cần ít nhất 2 nguyên liệu\u0026#34; │\r│ } │\r│ │\r│ Case 4: Fuzzy match thành công │\r│ → HTTP 200: { │\r│ \u0026#34;corrected\u0026#34;: true, │\r│ \u0026#34;original\u0026#34;: \u0026#34;thit ga\u0026#34;, │\r│ \u0026#34;matched\u0026#34;: \u0026#34;thịt gà\u0026#34;, │\r│ \u0026#34;confidence\u0026#34;: 0.85 │\r│ } │\r└─────────────────────────────────────────────────────────┘🏗️ TRIỂN KHAI KỸ THUẬT#\rKiến Trúc Tables \u0026amp; Relationships#\rCác Tables Liên Kết:\nmaster_ingredients (nguyên liệu chuẩn)\r↓\r[VALIDATE]\r↓\ruser_ingredients (nguyên liệu người dùng nhập)\r↓\r[QUERY \u0026amp; MATCH]\r↓\r┌─────────────────┬─────────────────┐\r↓ ↓ ↓\rrecipes user_data user_preferences\r(is_approved) (sở thích) (năm sinh, giới tính, quốc gia)\r↓ ↓ ↓\r└─────────────────┴─────────────────┘\r↓\r[AI AGENT PROMPT]\r↓\r┌─────────────────┐\r↓ ↓\rDatabase Recipes AI Generated Recipe\r(4 món phù hợp) (1 món sáng tạo)Backend: Node.js 20 Lambda Functions#\rLambda AI Suggestion Engine:\n// Sử dụng AWS SDK v3 cho Bedrock const { BedrockRuntimeClient, InvokeModelCommand } = require(\u0026#39;@aws-sdk/client-bedrock-runtime\u0026#39;); const { DynamoDBClient } = require(\u0026#39;@aws-sdk/client-dynamodb\u0026#39;); const { DynamoDBDocumentClient, QueryCommand, PutCommand } = require(\u0026#39;@aws-sdk/lib-dynamodb\u0026#39;); const ddb = DynamoDBDocumentClient.from(new DynamoDBClient({})); // Flow mới: // 1. Validate ingredients với master_ingredients table // 2. Query 4 recipes từ DynamoDB (is_approved=true) // 3. Generate 1 recipe mới bằng Bedrock AI với context đầy đủ // 4. Return 5 suggestions (4 DB + 1 AI) async function suggestRecipes(userIngredients, userPreferences) { // Step 1: Validate ingredients với master_ingredients const validatedIngredients = await validateIngredientsWithMaster(userIngredients); if (!validatedIngredients.isValid) { return { statusCode: 400, body: { error: \u0026#39;ingredient_not_found\u0026#39;, message: \u0026#39;Một số nguyên liệu không hợp lệ\u0026#39;, invalid_ingredients: validatedIngredients.invalidItems, suggestions: validatedIngredients.suggestions } }; } // Step 2: Query user preferences từ user_data table const userContext = await getUserContext(userPreferences.userId); // Step 3: Query 4 approved recipes từ DynamoDB matching user preferences const dbRecipes = await queryApprovedRecipesByIngredientsAndPreferences( validatedIngredients.ingredients, userContext, 4 ); // Step 4: Generate 1 AI recipe với context đầy đủ const aiRecipe = await generateAIRecipe( validatedIngredients.ingredients, userContext ); // Step 5: Save AI suggestion to history await saveAISuggestion({ userId: userPreferences.userId, ingredients: validatedIngredients.ingredients, aiRecipe, dbRecipes }); // Step 6: Return combined results return { statusCode: 200, body: { recipes: [...dbRecipes, aiRecipe], stats: { database_recipes: dbRecipes.length, ai_recipes: 1 } } }; } // Lấy thông tin người dùng từ user_data \u0026amp; user_preferences async function getUserContext(userId) { // Query user_data cho sở thích món ăn const userDataResult = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND SK = :sk\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `USER#${userId}`, \u0026#39;:sk\u0026#39;: \u0026#39;PREFERENCES\u0026#39; } })); // Query user profile cho thông tin cá nhân (năm sinh, giới tính, quốc gia) const userProfileResult = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND SK = :sk\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `USER#${userId}`, \u0026#39;:sk\u0026#39;: \u0026#39;METADATA\u0026#39; } })); const userData = userDataResult.Items?.[0] || {}; const userProfile = userProfileResult.Items?.[0] || {}; return { // Sở thích món ăn preferred_cooking_methods: userData.preferred_cooking_methods || [], preferred_meal_types: userData.preferred_meal_types || [], favorite_cuisines: userData.favorite_cuisines || [], allergies: userData.allergies || [], // Thông tin cá nhân (cho personalization) birth_year: userProfile.birth_year, gender: userProfile.gender, country: userProfile.country, // Mở rộng: món yêu thích quốc gia // VD: nếu country = \u0026#34;Vietnam\u0026#34; → ưu tiên món Việt // nếu favorite_cuisines = [\u0026#34;Italy\u0026#34;] → ưu tiên món Ý cuisine_preference: determineCuisinePreference(userProfile, userData) }; } // Xác định ưu tiên món quốc gia function determineCuisinePreference(profile, userData) { // Ưu tiên 1: món yêu thích được chọn if (userData.favorite_cuisines \u0026amp;\u0026amp; userData.favorite_cuisines.length \u0026gt; 0) { return userData.favorite_cuisines; } // Ưu tiên 2: món của quốc gia người dùng if (profile.country) { const countryToCuisine = { \u0026#39;Vietnam\u0026#39;: [\u0026#39;Vietnamese\u0026#39;], \u0026#39;Italy\u0026#39;: [\u0026#39;Italian\u0026#39;], \u0026#39;Japan\u0026#39;: [\u0026#39;Japanese\u0026#39;], \u0026#39;Thailand\u0026#39;: [\u0026#39;Thai\u0026#39;], \u0026#39;Korea\u0026#39;: [\u0026#39;Korean\u0026#39;] }; return countryToCuisine[profile.country] || []; } return []; } // Validate ingredients với master_ingredients table async function validateIngredientsWithMaster(ingredients) { const validated = []; const invalid = []; const suggestions = []; for (const ing of ingredients) { // Normalize input const normalized = normalizeText(ing); // Check exact match trong master_ingredients const exactMatch = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, IndexName: \u0026#39;GSI1\u0026#39;, KeyConditionExpression: \u0026#39;GSI1PK = :pk AND begins_with(GSI1SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `INGREDIENT#SEARCH`, \u0026#39;:sk\u0026#39;: `NAME#${normalized}` } })); if (exactMatch.Items \u0026amp;\u0026amp; exactMatch.Items.length \u0026gt; 0) { validated.push(exactMatch.Items[0].name); } else { // Fuzzy search for similar ingredients const similar = await fuzzySearchIngredients(normalized); invalid.push(ing); suggestions.push({ original: ing, similar: similar.slice(0, 5) // Top 5 suggestions }); } } return { isValid: invalid.length === 0, ingredients: validated, invalidItems: invalid, suggestions }; } // Fuzzy search cho nguyên liệu tương tự async function fuzzySearchIngredients(searchTerm) { // Scan master_ingredients với filter const result = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, IndexName: \u0026#39;GSI1\u0026#39;, KeyConditionExpression: \u0026#39;GSI1PK = :pk\u0026#39;, FilterExpression: \u0026#39;contains(normalized_name, :term) OR contains(aliases, :term)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `INGREDIENT#ACTIVE`, \u0026#39;:term\u0026#39;: searchTerm } })); return result.Items.map(item =\u0026gt; item.name); } // Query approved recipes matching ingredients AND user preferences async function queryApprovedRecipesByIngredientsAndPreferences(ingredients, userContext, limit) { // Query recipes theo nguyên liệu và sở thích const recipes = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, IndexName: \u0026#39;GSI2\u0026#39;, KeyConditionExpression: \u0026#39;GSI2PK = :pk\u0026#39;, FilterExpression: \u0026#39;is_approved = :approved\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `RECIPES#APPROVED`, \u0026#39;:approved\u0026#39;: true }, ScanIndexForward: false // Sắp xếp theo rating cao nhất })); let filteredRecipes = recipes.Items || []; // Filter theo món yêu thích quốc gia (nếu có) if (userContext.cuisine_preference \u0026amp;\u0026amp; userContext.cuisine_preference.length \u0026gt; 0) { const cuisineMatches = filteredRecipes.filter(recipe =\u0026gt; userContext.cuisine_preference.includes(recipe.cuisine_type) ); // Nếu có món khớp quốc gia, ưu tiên chúng if (cuisineMatches.length \u0026gt; 0) { filteredRecipes = cuisineMatches; } } // Filter theo sở thích cooking methods (canh, món chiên, món hấp...) if (userContext.preferred_cooking_methods \u0026amp;\u0026amp; userContext.preferred_cooking_methods.length \u0026gt; 0) { filteredRecipes = filteredRecipes.filter(recipe =\u0026gt; userContext.preferred_cooking_methods.includes(recipe.cooking_method) ); } // Filter tránh dị ứng if (userContext.allergies \u0026amp;\u0026amp; userContext.allergies.length \u0026gt; 0) { filteredRecipes = filteredRecipes.filter(recipe =\u0026gt; { const recipeIngredients = recipe.ingredients || []; return !recipeIngredients.some(ing =\u0026gt; userContext.allergies.includes(ing.ingredient_name) ); }); } return filteredRecipes.slice(0, limit); } // Normalize text (bỏ dấu, lowercase) function normalizeText(text) { return text .toLowerCase() .normalize(\u0026#39;NFD\u0026#39;) .replace(/[\\u0300-\\u036f]/g, \u0026#39;\u0026#39;) .trim(); }AI Agent Prompt \u0026amp; Privacy Policy:\n// Generate AI recipe với context đầy đủ + privacy protection async function generateAIRecipe(ingredients, userContext) { const bedrockClient = new BedrockRuntimeClient({ region: \u0026#39;us-east-1\u0026#39; }); // ===== PRIVACY POLICY ===== // Dữ liệu được sử dụng cho personalization: // ✅ Năm sinh (birth_year) - để tính tuổi và khuyến nghị dinh dưỡng phù hợp // ✅ Giới tính (gender) - để khuyến nghị khẩu phần và dinh dưỡng // ✅ Quốc gia (country) - để gợi ý món ăn địa phương/quốc gia // ✅ Sở thích món (preferred_cooking_methods, favorite_cuisines) // ✅ Dị ứng (allergies) - QUAN TRỌNG để an toàn thực phẩm // // ❌ KHÔNG sử dụng: // - Email, số điện thoại, địa chỉ cụ thể // - Tên đầy đủ hoặc thông tin định danh cá nhân khác // // Mục đích: Cá nhân hóa gợi ý món ăn, KHÔNG theo dõi hoặc khai thác thông tin cá nhân // Tính tuổi từ năm sinh (nếu có) const age = userContext.birth_year ? new Date().getFullYear() - userContext.birth_year : null; // Tạo prompt cho AI với context đầy đủ const prompt = `Bạn là một đầu bếp chuyên nghiệp. Hãy tạo một công thức nấu ăn sáng tạo dựa trên thông tin sau: **Nguyên liệu có sẵn:** ${ingredients.map(ing =\u0026gt; `- ${ing}`).join(\u0026#39;\\n\u0026#39;)} **Thông tin người dùng (để cá nhân hóa):** ${age ? `- Tuổi: ${age} tuổi (khuyến nghị dinh dưỡng phù hợp)` : \u0026#39;\u0026#39;} ${userContext.gender ? `- Giới tính: ${userContext.gender} (khẩu phần phù hợp)` : \u0026#39;\u0026#39;} ${userContext.country ? `- Quốc gia: ${userContext.country} (gợi ý món địa phương)` : \u0026#39;\u0026#39;} **Sở thích món ăn:** ${userContext.preferred_cooking_methods?.length \u0026gt; 0 ? `- Thích: ${userContext.preferred_cooking_methods.join(\u0026#39;, \u0026#39;)}` : \u0026#39;- Không có sở thích cụ thể\u0026#39;} **Món yêu thích quốc gia:** ${userContext.cuisine_preference?.length \u0026gt; 0 ? `- Ưu tiên món: ${userContext.cuisine_preference.join(\u0026#39;, \u0026#39;)}` : \u0026#39;- Không có món quốc gia yêu thích\u0026#39;} **Dị ứng (TRÁNH TUYỆT ĐỐI):** ${userContext.allergies?.length \u0026gt; 0 ? userContext.allergies.map(a =\u0026gt; `- ❌ ${a}`).join(\u0026#39;\\n\u0026#39;) : \u0026#39;- Không có dị ứng\u0026#39;} **Yêu cầu:** 1. Sử dụng TOÀN BỘ hoặc phần lớn nguyên liệu đã cho 2. Nếu người dùng từ ${userContext.country}, ưu tiên phong cách nấu ăn địa phương 3. Nếu thích món ${userContext.cuisine_preference?.join(\u0026#39;/\u0026#39;)}, tạo món theo hướng đó 4. Nếu thích ${userContext.preferred_cooking_methods?.join(\u0026#39;/\u0026#39;)}, ưu tiên phương pháp đó 5. TUYỆT ĐỐI KHÔNG dùng nguyên liệu gây dị ứng: ${userContext.allergies?.join(\u0026#39;, \u0026#39;) || \u0026#39;Không\u0026#39;} 6. Phù hợp với tuổi ${age ? `${age} tuổi` : \u0026#39;người lớn\u0026#39;} 7. Món ăn sáng tạo, độc đáo, chưa có trong database **Trả về JSON format:** { \u0026#34;name\u0026#34;: \u0026#34;Tên món ăn\u0026#34;, \u0026#34;cuisine_type\u0026#34;: \u0026#34;${userContext.cuisine_preference?.[0] || \u0026#39;Vietnamese\u0026#39;}\u0026#34;, \u0026#34;cooking_method\u0026#34;: \u0026#34;${userContext.preferred_cooking_methods?.[0] || \u0026#39;nấu\u0026#39;}\u0026#34;, \u0026#34;meal_type\u0026#34;: \u0026#34;món chính/món phụ/canh\u0026#34;, \u0026#34;difficulty\u0026#34;: \u0026#34;dễ/trung bình/khó\u0026#34;, \u0026#34;cooking_time\u0026#34;: \u0026#34;30 phút\u0026#34;, \u0026#34;servings\u0026#34;: 2, \u0026#34;ingredients\u0026#34;: [ { \u0026#34;ingredient_name\u0026#34;: \u0026#34;Tên nguyên liệu\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;100g\u0026#34;, \u0026#34;preparation\u0026#34;: \u0026#34;Cắt nhỏ\u0026#34; } ], \u0026#34;instructions\u0026#34;: [ { \u0026#34;step_number\u0026#34;: 1, \u0026#34;description\u0026#34;: \u0026#34;Mô tả bước làm\u0026#34;, \u0026#34;duration\u0026#34;: \u0026#34;5 phút\u0026#34; } ], \u0026#34;nutritional_info\u0026#34;: { \u0026#34;calories\u0026#34;: 300, \u0026#34;protein\u0026#34;: \u0026#34;20g\u0026#34;, \u0026#34;carbs\u0026#34;: \u0026#34;30g\u0026#34;, \u0026#34;fat\u0026#34;: \u0026#34;10g\u0026#34; }, \u0026#34;tags\u0026#34;: [\u0026#34;healthy\u0026#34;, \u0026#34;quick\u0026#34;], \u0026#34;notes\u0026#34;: \u0026#34;Phù hợp cho người ${age ? `${age} tuổi` : \u0026#39;người lớn\u0026#39;}\u0026#34; }`; try { const response = await bedrockClient.send(new InvokeModelCommand({ modelId: \u0026#39;anthropic.claude-3-haiku-20240307-v1:0\u0026#39;, contentType: \u0026#39;application/json\u0026#39;, accept: \u0026#39;application/json\u0026#39;, body: JSON.stringify({ anthropic_version: \u0026#39;bedrock-2023-05-31\u0026#39;, max_tokens: 2048, messages: [ { role: \u0026#39;user\u0026#39;, content: prompt } ] }) })); const responseBody = JSON.parse(new TextDecoder().decode(response.body)); const aiRecipeJSON = JSON.parse(responseBody.content[0].text); // Thêm metadata cho AI-generated recipe const aiRecipe = { ...aiRecipeJSON, recipe_id: `ai-gen-${generateUUID()}`, source: \u0026#39;ai\u0026#39;, is_new: true, is_approved: false, created_by: \u0026#39;bedrock-ai\u0026#39;, created_at: new Date().toISOString(), // Privacy metadata: Log rằng đã sử dụng thông tin cá nhân (cho audit) personalization_used: { age_range: age ? `${Math.floor(age / 10) * 10}-${Math.floor(age / 10) * 10 + 9}` : null, gender: userContext.gender || null, country: userContext.country || null, cuisine_preference: userContext.cuisine_preference || [], allergies_avoided: userContext.allergies || [] } }; return aiRecipe; } catch (error) { console.error(\u0026#39;AI Recipe Generation Error:\u0026#39;, error); throw new Error(\u0026#39;Failed to generate AI recipe\u0026#39;); } }Lambda Recipe Rating Handler:\n// Auto-approval dựa trên rating (\u0026gt;= 4 sao) async function handleRecipeRating(recipeId, userId, rating, comment, historyId) { // Validate rating (1-5) if (rating \u0026lt; 1 || rating \u0026gt; 5) { return { statusCode: 400, body: { error: \u0026#39;Invalid rating. Must be 1-5.\u0026#39; } }; } // Step 1: Save rating to recipe_ratings table await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `RECIPE#${recipeId}`, SK: `RATING#${userId}`, rating_id: generateUUID(), recipe_id: recipeId, user_id: userId, rating, comment, history_id: historyId, is_verified_cook: historyId ? true : false, created_at: new Date().toISOString(), updated_at: new Date().toISOString() } })); // Step 2: Update user_cooking_history với personal_rating if (historyId) { await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `USER#${userId}`, SK: `COOKING#${historyId}`, personal_rating: rating, updated_at: new Date().toISOString() } })); } // Step 3: Calculate average rating cho recipe const avgRating = await calculateAverageRating(recipeId); const ratingCount = await getRatingCount(recipeId); // Step 4: Auto-approve if \u0026gt;= 4.0 stars if (avgRating \u0026gt;= 4.0) { await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `RECIPE#${recipeId}`, SK: \u0026#39;METADATA\u0026#39;, is_approved: true, is_public: true, approval_type: \u0026#39;auto_rating\u0026#39;, average_rating: avgRating, rating_count: ratingCount, approved_at: new Date().toISOString(), updated_at: new Date().toISOString() } })); return { statusCode: 200, body: { success: true, rating_saved: true, average_rating: avgRating, rating_count: ratingCount, auto_approved: true, message: \u0026#39;Công thức đã được thêm vào database tổng!\u0026#39; } }; } // Step 5: Rating \u0026lt; 4.0 - chỉ cảm ơn return { statusCode: 200, body: { success: true, rating_saved: true, average_rating: avgRating, rating_count: ratingCount, auto_approved: false, message: \u0026#39;Cảm ơn đánh giá của bạn!\u0026#39; } }; } // Calculate average rating async function calculateAverageRating(recipeId) { const result = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND begins_with(SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `RECIPE#${recipeId}`, \u0026#39;:sk\u0026#39;: \u0026#39;RATING#\u0026#39; } })); if (!result.Items || result.Items.length === 0) return 0; const total = result.Items.reduce((sum, item) =\u0026gt; sum + item.rating, 0); return (total / result.Items.length).toFixed(1); } // Get rating count async function getRatingCount(recipeId) { const result = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND begins_with(SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `RECIPE#${recipeId}`, \u0026#39;:sk\u0026#39;: \u0026#39;RATING#\u0026#39; }, Select: \u0026#39;COUNT\u0026#39; })); return result.Count || 0; }Lambda Cooking History Handler:\n// Quản lý lịch sử nấu ăn cá nhân async function startCooking(userId, recipeId, suggestionId) { const historyId = generateUUID(); await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `USER#${userId}`, SK: `COOKING#${new Date().toISOString()}#${historyId}`, history_id: historyId, user_id: userId, recipe_id: recipeId, suggestion_id: suggestionId, status: \u0026#39;cooking\u0026#39;, created_at: new Date().toISOString(), updated_at: new Date().toISOString() } })); return { statusCode: 200, body: { history_id: historyId, message: \u0026#39;Bắt đầu nấu ăn!\u0026#39; } }; } // Hoàn thành nấu ăn async function completeCooking(historyId, userId) { await ddb.send(new PutCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, Item: { PK: `USER#${userId}`, SK: `COOKING#${historyId}`, status: \u0026#39;completed\u0026#39;, cook_date: new Date().toISOString(), updated_at: new Date().toISOString() } })); return { statusCode: 200, body: { message: \u0026#39;Hoàn thành! Vui lòng đánh giá món ăn.\u0026#39;, show_rating_form: true } }; } // Lấy lịch sử nấu ăn async function getCookingHistory(userId) { const result = await ddb.send(new QueryCommand({ TableName: \u0026#39;smart-cooking-data\u0026#39;, KeyConditionExpression: \u0026#39;PK = :pk AND begins_with(SK, :sk)\u0026#39;, ExpressionAttributeValues: { \u0026#39;:pk\u0026#39;: `USER#${userId}`, \u0026#39;:sk\u0026#39;: \u0026#39;COOKING#\u0026#39; }, ScanIndexForward: false // Newest first })); return { statusCode: 200, body: { history: result.Items || [] } }; }Dịch Vụ Chính:\nAmazon Bedrock: Claude 3 Haiku model DynamoDB: Lưu trữ dữ liệu người dùng \u0026amp; gợi ý AI Lambda: Serverless compute (Node.js 20) API Gateway: REST API endpoints Cơ Sở Dữ Liệu: Amazon DynamoDB#\rCác Bảng Sử Dụng:\nUsers (PK: user_id) - Hồ sơ \u0026amp; vai trò UserData (PK: user_id, SK: PREFERENCES | INGREDIENTS) - Cài đặt người dùng Recipes (PK: recipe_id) - Công thức (có thêm field is_approved, approval_type, average_rating) RecipeRatings (PK: recipe_id, SK: user_id) - Đánh giá công thức cho auto-approval UserCookingHistory (PK: user_id, SK: timestamp) - Lịch sử nấu ăn cá nhân (thay thế favorites) MasterIngredients (PK: ingredient_id) - Master list nguyên liệu để validate PrivacySettings (PK: user_id) - Cấu hình quyền riêng tư Friendships (PK: user_id, SK: friend_id) - Kết nối xã hội AISuggestions (PK: user_id, SK: timestamp) - Lịch sử AI Triển Khai Quyền Riêng Tư:\n// Bộ lọc quyền riêng tư áp dụng trước khi trả về dữ liệu người dùng if (privacy.ingredients_visibility === \u0026#39;friends\u0026#39; \u0026amp;\u0026amp; !isFriend) { delete userProfile.ingredients; }API Endpoints#\rLuồng Gợi Ý AI (Enhanced - Flexible Mix):\nPOST /ai/suggest\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;ingredients\u0026#34;: [\u0026#34;thịt gà\u0026#34;, \u0026#34;cà chua\u0026#34;, \u0026#34;hành\u0026#34;],\r\u0026#34;recipe_count\u0026#34;: 3 // NEW: 1-5 món (default: 1)\r}\rResponse (Success - Flexible mix):\r{\r\u0026#34;suggestions\u0026#34;: [\r{\r\u0026#34;id\u0026#34;: \u0026#34;recipe-001\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Gà xào cà chua\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;,\r\u0026#34;cooking_method\u0026#34;: \u0026#34;xào\u0026#34;, // NEW\r\u0026#34;meal_type\u0026#34;: \u0026#34;món chính\u0026#34;, // NEW\r\u0026#34;match_score\u0026#34;: 0.95,\r\u0026#34;is_approved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 4.5\r},\r{\r\u0026#34;id\u0026#34;: \u0026#34;recipe-002\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Canh cà chua\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;database\u0026#34;,\r\u0026#34;cooking_method\u0026#34;: \u0026#34;canh\u0026#34;, // NEW - Diverse!\r\u0026#34;meal_type\u0026#34;: \u0026#34;canh\u0026#34;,\r\u0026#34;match_score\u0026#34;: 0.80,\r\u0026#34;is_approved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 4.2\r},\r{\r\u0026#34;id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Gà hấp cà chua hành\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;ai\u0026#34;,\r\u0026#34;cooking_method\u0026#34;: \u0026#34;hấp\u0026#34;, // NEW - Diverse!\r\u0026#34;meal_type\u0026#34;: \u0026#34;món chính\u0026#34;,\r\u0026#34;is_new\u0026#34;: true,\r\u0026#34;is_approved\u0026#34;: false,\r\u0026#34;ingredients\u0026#34;: [...],\r\u0026#34;instructions\u0026#34;: [...]\r}\r],\r\u0026#34;stats\u0026#34;: {\r\u0026#34;requested\u0026#34;: 3, // NEW\r\u0026#34;from_database\u0026#34;: 2, // NEW - Flexible!\r\u0026#34;from_ai\u0026#34;: 1 // NEW - Only 1 AI call needed!\r},\r\u0026#34;warnings\u0026#34;: [] // NEW - Empty if all ingredients valid\r}\rResponse (Warning - Invalid ingredient but still work):\r{\r\u0026#34;suggestions\u0026#34;: [...], // Still return results\r\u0026#34;stats\u0026#34;: {\r\u0026#34;requested\u0026#34;: 3,\r\u0026#34;from_database\u0026#34;: 0, // Not enough valid ingredients for DB\r\u0026#34;from_ai\u0026#34;: 3 // AI handles it\r},\r\u0026#34;warnings\u0026#34;: [ // NEW\r{\r\u0026#34;ingredient\u0026#34;: \u0026#34;abc xyz\u0026#34;,\r\u0026#34;message\u0026#34;: \u0026#34;Nguyên liệu không hợp lệ, AI sẽ cố gắng xử lý\u0026#34;,\r\u0026#34;suggestions\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;],\r\u0026#34;reported\u0026#34;: true // Đã log để admin review\r}\r]\r}\rResponse (Error - All invalid):\r{\r\u0026#34;error\u0026#34;: \u0026#34;all_ingredients_invalid\u0026#34;,\r\u0026#34;message\u0026#34;: \u0026#34;Tất cả nguyên liệu không hợp lệ. Vui lòng nhập lại.\u0026#34;,\r\u0026#34;invalid_ingredients\u0026#34;: [\u0026#34;abc\u0026#34;, \u0026#34;xyz\u0026#34;, \u0026#34;123\u0026#34;],\r\u0026#34;suggestions\u0026#34;: [\r{ \u0026#34;original\u0026#34;: \u0026#34;abc\u0026#34;, \u0026#34;similar\u0026#34;: [\u0026#34;cá\u0026#34;, \u0026#34;gà\u0026#34;] },\r{ \u0026#34;original\u0026#34;: \u0026#34;xyz\u0026#34;, \u0026#34;similar\u0026#34;: [\u0026#34;rau\u0026#34;, \u0026#34;củ\u0026#34;] }\r]\r}Luồng Cooking History:\nPOST /cooking/start\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;recipe_id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;suggestion_id\u0026#34;: \u0026#34;suggestion-123\u0026#34;\r}\rResponse:\r{\r\u0026#34;history_id\u0026#34;: \u0026#34;history-001\u0026#34;,\r\u0026#34;message\u0026#34;: \u0026#34;Bắt đầu nấu ăn!\u0026#34;\r}\rPUT /cooking/{history_id}/complete\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rResponse:\r{\r\u0026#34;message\u0026#34;: \u0026#34;Hoàn thành! Vui lòng đánh giá món ăn.\u0026#34;,\r\u0026#34;show_rating_form\u0026#34;: true\r}\rGET /user/cooking-history\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rResponse:\r{\r\u0026#34;history\u0026#34;: [\r{\r\u0026#34;history_id\u0026#34;: \u0026#34;history-001\u0026#34;,\r\u0026#34;recipe_id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;,\r\u0026#34;personal_rating\u0026#34;: 5,\r\u0026#34;is_favorite\u0026#34;: true,\r\u0026#34;cook_date\u0026#34;: \u0026#34;2025-10-03T10:30:00Z\u0026#34;\r},\r...\r]\r}Luồng Rating \u0026amp; Auto-Approval:\nPOST /recipes/{id}/rate\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;rating\u0026#34;: 5,\r\u0026#34;comment\u0026#34;: \u0026#34;Món này rất ngon!\u0026#34;,\r\u0026#34;history_id\u0026#34;: \u0026#34;history-001\u0026#34;\r}\rResponse (Auto-approved):\r{\r\u0026#34;success\u0026#34;: true,\r\u0026#34;rating_saved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 4.2,\r\u0026#34;rating_count\u0026#34;: 15,\r\u0026#34;auto_approved\u0026#34;: true,\r\u0026#34;message\u0026#34;: \u0026#34;Công thức đã được thêm vào database!\u0026#34;,\r\u0026#34;recipe\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;ai-gen-001\u0026#34;,\r\u0026#34;is_approved\u0026#34;: true,\r\u0026#34;is_public\u0026#34;: true,\r\u0026#34;approval_type\u0026#34;: \u0026#34;auto_rating\u0026#34;\r}\r}\rResponse (Not approved):\r{\r\u0026#34;success\u0026#34;: true,\r\u0026#34;rating_saved\u0026#34;: true,\r\u0026#34;average_rating\u0026#34;: 3.5,\r\u0026#34;rating_count\u0026#34;: 8,\r\u0026#34;auto_approved\u0026#34;: false,\r\u0026#34;message\u0026#34;: \u0026#34;Cảm ơn đánh giá của bạn!\u0026#34;\r}Luồng Validate Ingredients:\nPOST /ingredients/validate\rAuthorization: Bearer \u0026lt;JWT\u0026gt;\rBody: {\r\u0026#34;ingredients\u0026#34;: [\u0026#34;cá rô\u0026#34;, \u0026#34;abc xyz\u0026#34;, \u0026#34;thit ga\u0026#34;]\r}\rResponse:\r{\r\u0026#34;valid\u0026#34;: [\u0026#34;cá rô\u0026#34;],\r\u0026#34;invalid\u0026#34;: [\u0026#34;abc xyz\u0026#34;],\r\u0026#34;corrected\u0026#34;: [\r{\r\u0026#34;original\u0026#34;: \u0026#34;thit ga\u0026#34;,\r\u0026#34;matched\u0026#34;: \u0026#34;thịt gà\u0026#34;,\r\u0026#34;confidence\u0026#34;: 0.85\r}\r],\r\u0026#34;suggestions\u0026#34;: [\r{\r\u0026#34;original\u0026#34;: \u0026#34;abc xyz\u0026#34;,\r\u0026#34;similar\u0026#34;: [\u0026#34;gà\u0026#34;, \u0026#34;cá\u0026#34;, \u0026#34;bò\u0026#34;, \u0026#34;tôm\u0026#34;, \u0026#34;mực\u0026#34;]\r}\r]\r}Endpoints Quyền Riêng Tư \u0026amp; Xã Hội:\nPUT /user/privacy - Cập nhật cài đặt quyền riêng tư\rGET /user/profile/{userId} - Lấy hồ sơ (đã lọc quyền riêng tư)\rPOST /friends/request - Gửi yêu cầu kết bạn\rGET /friends - Danh sách bạn bèEndpoints Quản Trị:\nGET /admin/users - Danh sách tất cả người dùng (chỉ admin)\rPUT /admin/users/{id}/ban - Cấm người dùng (chỉ admin)\rGET /admin/statistics - Thống kê hệ thống (chỉ admin)\rGET /admin/recipes/pending - Công thức chờ approval (ít sử dụng do auto-approval)Endpoints Mới - Social Features:\nPOST /posts - Tạo bài đăng\rGET /posts/feed - Lấy newsfeed\rPOST /posts/{id}/comments - Bình luận\rPOST /reactions - Thêm reaction\rGET /notifications - Lấy thông báo🔒 QUYỀN RIÊNG TƯ \u0026amp; BẢO MẬT#\rCác Mức Quyền Riêng Tư#\rPublic: Mọi người có thể xem Friends: Chỉ bạn bè đã chấp nhận có thể xem Private: Chỉ người dùng có thể xem Thuộc Tính Được Kiểm Soát Quyền Riêng Tư#\rEmail (mặc định: private) Ngày sinh (mặc định: friends) Giới tính (mặc định: public) Quốc gia (mặc định: public) Công thức (mặc định: public) Nguyên liệu (mặc định: friends) Sở thích (mặc định: friends) Kiểm Soát Truy Cập Theo Vai Trò#\rUser: Truy cập thông thường Admin: Truy cập đầy đủ + công cụ quản trị Thời Gian \u0026amp; Mốc Quan Trọng#\rXem Hướng Dẫn Triển Khai Khách Hàng để biết thời gian chi tiết.\n"},{"id":3,"href":"/docs/summary/database-diagram/","title":"Database Schema Diagram","section":"Summary","content":"Sơ Đồ Cấu Trúc Cơ Sở Dữ Liệu#\rERD (Sơ Đồ Quan Hệ Thực Thể)#\r// Bảng Người Dùng (AI sử dụng: birth_year, gender, country)\rTable users {\ruser_id varchar(36) [pk, note: \u0026#39;UUID từ Cognito\u0026#39;]\remail varchar(255) [unique, not null]\rusername varchar(50) [unique, not null]\rfull_name varchar(100)\rdate_of_birth date [note: \u0026#39;AI dùng để tính tuổi → khuyến nghị dinh dưỡng phù hợp\u0026#39;]\rgender enum(\u0026#39;male\u0026#39;, \u0026#39;female\u0026#39;, \u0026#39;other\u0026#39;) [note: \u0026#39;AI dùng để khuyến nghị khẩu phần\u0026#39;]\rcountry varchar(50) [note: \u0026#39;AI ưu tiên món ăn địa phương (VD: Vietnam → món Việt)\u0026#39;]\ravatar_url varchar(500)\rrole enum(\u0026#39;user\u0026#39;, \u0026#39;admin\u0026#39;) [default: \u0026#39;user\u0026#39;]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rlast_login timestamp\rindexes {\remail\rusername\rrole\r}\rNote: \u0026#39;\u0026#39;\u0026#39;\r**AI Agent Privacy Policy:**\rAI chỉ sử dụng: năm sinh (age range), giới tính, quốc gia\rMục đích: Cá nhân hóa gợi ý món ăn\rKHÔNG sử dụng: Email, tên đầy đủ, địa chỉ cụ thể\r\u0026#39;\u0026#39;\u0026#39;\r}\r// Tùy Chọn Người Dùng (Sử dụng bởi AI Agent)\rTable user_preferences {\rpreference_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rdietary_restrictions json [note: \u0026#39;chay, thuần chay, halal, kosher, v.v.\u0026#39;]\rallergies json [note: \u0026#39;Danh sách dị ứng - AI TRÁNH TUYỆT ĐỐI các nguyên liệu này\u0026#39;]\rfavorite_cuisines json [note: \u0026#39;Ý, Việt Nam, Nhật Bản - AI ưu tiên món quốc gia này\u0026#39;]\rpreferred_cooking_methods json [note: \u0026#39;xào, hấp, canh, kho, chiên - AI ưu tiên phương pháp này khi suggest\u0026#39;]\rpreferred_recipe_count int [default: 1, note: \u0026#39;1-5 món muốn nấu mỗi lần, FREE: 1, PREMIUM: 5\u0026#39;]\rspice_level enum(\u0026#39;none\u0026#39;, \u0026#39;mild\u0026#39;, \u0026#39;medium\u0026#39;, \u0026#39;hot\u0026#39;, \u0026#39;very_hot\u0026#39;)\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rNote: \u0026#39;\u0026#39;\u0026#39;\r**AI Agent sử dụng fields:**\r- allergies: Filter recipe ingredients (bảo vệ an toàn thực phẩm)\r- favorite_cuisines: Ưu tiên món Ý/Việt/... (personalization)\r- preferred_cooking_methods: Ưu tiên canh/hấp/chiên/... (đa dạng món)\r**Privacy Policy:**\r- Chỉ sử dụng cho personalization gợi ý món ăn\r- KHÔNG chia sẻ hoặc khai thác thông tin cá nhân\r\u0026#39;\u0026#39;\u0026#39;\r}\r// Cài Đặt Quyền Riêng Tư\rTable privacy_settings {\rsetting_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null, unique]\rprofile_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;, note: \u0026#39;Ai có thể xem hồ sơ\u0026#39;]\remail_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;private\u0026#39;]\rdate_of_birth_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rgender_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rcountry_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\rrecipes_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;public\u0026#39;]\ringredients_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rpreferences_visibility enum(\u0026#39;public\u0026#39;, \u0026#39;friends\u0026#39;, \u0026#39;private\u0026#39;) [default: \u0026#39;friends\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\r}\r}\r// Quan Hệ Bạn Bè\rTable friendships {\rfriendship_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rfriend_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rstatus enum(\u0026#39;pending\u0026#39;, \u0026#39;accepted\u0026#39;, \u0026#39;blocked\u0026#39;) [default: \u0026#39;pending\u0026#39;]\rrequested_at timestamp [default: `now()`]\rresponded_at timestamp\rindexes {\r(user_id, friend_id) [unique]\ruser_id\rfriend_id\rstatus\r}\r}\r// Nguyên Liệu Người Dùng (Danh sách đơn giản - không theo dõi số lượng)\rTable user_ingredients {\ringredient_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ringredient_name varchar(256) [not null]\radded_at timestamp [default: `now()`]\rindexes {\r(user_id, ingredient_name) [unique]\r}\r}\r// Công Thức (Do người dùng tạo \u0026amp; AI tạo)\rTable recipes {\rrecipe_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, note: \u0026#39;Người tạo - null nếu là công thức hệ thống\u0026#39;]\rtitle varchar(200) [not null]\rnormalized_title varchar(200) [note: \u0026#39;Chữ thường, không dấu để tìm kiếm\u0026#39;]\rdescription text\rcuisine_type varchar(50)\rcooking_method varchar(50) [note: \u0026#39;xào, hấp, luộc, chiên, nướng, kho, rim, trộn, canh, lẩu\u0026#39;]\rmeal_type varchar(50) [note: \u0026#39;món chính, món phụ, canh, khai vị, tráng miệng\u0026#39;]\rprep_time_minutes int\rcook_time_minutes int\rservings int\rcalories_per_serving int\rinstructions json [note: \u0026#39;Mảng các đối tượng bước\u0026#39;]\ris_public boolean [default: false]\ris_ai_generated boolean [default: false]\ris_approved boolean [default: false, note: \u0026#39;Auto-approved nếu rating \u0026gt;= 4 sao\u0026#39;]\rapproval_type enum(\u0026#39;manual\u0026#39;, \u0026#39;auto_rating\u0026#39;, \u0026#39;auto_popular\u0026#39;, \u0026#39;system\u0026#39;) [note: \u0026#39;Cách thức approval\u0026#39;]\raverage_rating decimal(2,1) [default: 0.0, note: \u0026#39;Rating trung bình\u0026#39;]\rrating_count int [default: 0, note: \u0026#39;Số lượng đánh giá\u0026#39;]\rai_cache_hit_count int [default: 0, note: \u0026#39;Số lần tái sử dụng từ cache\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rapproved_at timestamp [note: \u0026#39;Thời điểm được approve\u0026#39;]\rindexes {\ruser_id\rnormalized_title\rcuisine_type\rcooking_method\rmeal_type\ris_approved\raverage_rating\r}\r}\r// Bộ Nhớ Cache Công Thức (Công thức AI tạo để tái sử dụng)\rTable recipe_cache {\rcache_id varchar(36) [pk]\rrecipe_name varchar(200) [not null]\rnormalized_name varchar(200) [unique, not null, note: \u0026#39;Khóa tìm kiếm\u0026#39;]\rrecipe_data json [note: \u0026#39;JSON công thức đầy đủ từ AI\u0026#39;]\ringredients_hash varchar(64) [note: \u0026#39;Hash của danh sách nguyên liệu\u0026#39;]\rcuisine_type varchar(50)\rhit_count int [default: 0, note: \u0026#39;Bộ đếm tái sử dụng\u0026#39;]\rlast_accessed timestamp\rcreated_at timestamp [default: `now()`]\rindexes {\rnormalized_name\ringredients_hash\rcuisine_type\r}\r}\r// Nguyên Liệu Công Thức\rTable recipe_ingredients {\rid varchar(36) [pk]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\ringredient_name varchar(100) [not null]\rquantity varchar(50) [note: \u0026#39;2 chén, 500g, v.v.\u0026#39;]\runit varchar(20)\ris_optional boolean [default: false]\rindexes {\rrecipe_id\r}\r}\r// Lịch Sử Gợi Ý AI (Enhanced)\rTable ai_suggestions {\rsuggestion_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id]\rcache_id varchar(36) [ref: \u0026gt; recipe_cache.cache_id, note: \u0026#39;Nếu từ cache\u0026#39;]\rprompt_text text [note: \u0026#39;Đầu vào của người dùng cho AI\u0026#39;]\ringredients_used json [note: \u0026#39;Danh sách nguyên liệu từ user_ingredients\u0026#39;]\rrequested_recipe_count int [default: 1, note: \u0026#39;1-5 món user yêu cầu\u0026#39;]\rrecipes_from_db int [default: 0, note: \u0026#39;Số món từ database\u0026#39;]\rrecipes_from_ai int [default: 0, note: \u0026#39;Số món AI tạo mới\u0026#39;]\rinvalid_ingredients json [note: \u0026#39;Nguyên liệu không hợp lệ - logged\u0026#39;]\rai_response json [note: \u0026#39;Phản hồi AI đầy đủ\u0026#39;]\rwas_from_cache boolean [default: false, note: \u0026#39;True nếu tái sử dụng từ cache\u0026#39;]\rwas_accepted boolean [default: false]\rfeedback_rating int [note: \u0026#39;1-5 sao\u0026#39;]\rfeedback_comment text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\rcache_id\r}\r}\r// Lịch Sử Nấu Ăn Cá Nhân (Thay thế favorites - mở rộng hơn)\rTable user_cooking_history {\rhistory_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rsuggestion_id varchar(36) [ref: \u0026gt; ai_suggestions.suggestion_id, note: \u0026#39;Nếu từ AI suggestion\u0026#39;]\rstatus enum(\u0026#39;planned\u0026#39;, \u0026#39;cooking\u0026#39;, \u0026#39;completed\u0026#39;, \u0026#39;failed\u0026#39;) [default: \u0026#39;planned\u0026#39;]\rpersonal_rating int [note: \u0026#39;1-5 sao - đánh giá cá nhân\u0026#39;]\rpersonal_notes text [note: \u0026#39;Ghi chú cá nhân\u0026#39;]\ris_favorite boolean [default: false, note: \u0026#39;Đánh dấu yêu thích\u0026#39;]\rcook_date timestamp [note: \u0026#39;Ngày nấu thực tế\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\rrecipe_id\rstatus\ris_favorite\rcook_date\r(user_id, recipe_id) [note: \u0026#39;Cho phép multiple entries - lịch sử nấu nhiều lần\u0026#39;]\r}\r}\r// Đánh Giá Công Thức (Cho auto-approval system)\rTable recipe_ratings {\rrating_id varchar(36) [pk]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rhistory_id varchar(36) [ref: \u0026gt; user_cooking_history.history_id, note: \u0026#39;Link đến lịch sử nấu\u0026#39;]\rrating int [not null, note: \u0026#39;1-5 sao\u0026#39;]\rcomment text\ris_verified_cook boolean [default: false, note: \u0026#39;User đã thực sự nấu món này\u0026#39;]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\rrecipe_id\ruser_id\rrating\r(recipe_id, user_id) [unique, note: \u0026#39;Mỗi user chỉ rate 1 lần mỗi recipe\u0026#39;]\r}\r}\r// Kế Hoạch Bữa Ăn\rTable meal_plans {\rplan_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rplan_name varchar(100)\rstart_date date [not null]\rend_date date [not null]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rstart_date\r}\r}\r// Mục Kế Hoạch Bữa Ăn\rTable meal_plan_items {\ritem_id varchar(36) [pk]\rplan_id varchar(36) [ref: \u0026gt; meal_plans.plan_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, not null]\rmeal_date date [not null]\rmeal_type enum(\u0026#39;breakfast\u0026#39;, \u0026#39;lunch\u0026#39;, \u0026#39;dinner\u0026#39;, \u0026#39;snack\u0026#39;)\rnotes text\rindexes {\rplan_id\rmeal_date\r}\r}\r// Master Ingredients (Danh sách nguyên liệu hợp lệ cho AI validation)\rTable master_ingredients {\ringredient_id varchar(36) [pk]\rname varchar(256) [unique, not null]\rnormalized_name varchar(256) [unique, not null, note: \u0026#39;Không dấu, chữ thường - cho fuzzy search\u0026#39;]\rcategory varchar(50) [note: \u0026#39;thịt, rau, gia vị, sữa, v.v.\u0026#39;]\raliases json [note: \u0026#39;Các tên gọi khác: [\u0026#34;thịt bò\u0026#34;, \u0026#34;bò\u0026#34;, \u0026#34;beef\u0026#34;] - hỗ trợ auto-correct\u0026#39;]\ris_active boolean [default: true]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\rnormalized_name\rcategory\ris_active\r}\rNote: \u0026#39;\u0026#39;\u0026#39;\r**AI Agent Validation Flow:**\r1. User nhập nguyên liệu → normalize (bỏ dấu, lowercase)\r2. Check exact match với normalized_name\r3. Nếu không match → fuzzy search trong aliases\r4. Nếu vẫn không → gợi ý nguyên liệu tương tự (category match)\r5. Log invalid ingredients → report cho admin\r**Kết nối với AI Agent:**\r- validateIngredientsWithMaster() function\r- Tránh AI hallucination về tên nguyên liệu\r- Đảm bảo recipe accuracy\r\u0026#39;\u0026#39;\u0026#39;\r}\r// Nhật Ký Hoạt Động Người Dùng (Enhanced với invalid ingredient tracking)\rTable activity_logs {\rlog_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ractivity_type enum(\u0026#39;login\u0026#39;, \u0026#39;recipe_view\u0026#39;, \u0026#39;recipe_create\u0026#39;, \u0026#39;ai_suggestion\u0026#39;, \u0026#39;ingredient_add\u0026#39;, \u0026#39;recipe_cook\u0026#39;, \u0026#39;recipe_rate\u0026#39;, \u0026#39;invalid_ingredient\u0026#39;)\ractivity_data json\rip_address varchar(45)\ruser_agent text\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\rcreated_at\ractivity_type\r}\r}\r// Invalid Ingredients Reports (Optional - Post MVP)\rTable invalid_ingredients_reports {\rreport_id varchar(36) [pk]\ringredient_name varchar(256) [not null]\rnormalized_name varchar(256) [not null, note: \u0026#39;Chữ thường, không dấu\u0026#39;]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ruser_report_count int [default: 1, note: \u0026#39;Số lần user này report\u0026#39;]\rtotal_reports int [default: 1, note: \u0026#39;Tổng số reports từ tất cả users\u0026#39;]\rstatus enum(\u0026#39;pending\u0026#39;, \u0026#39;reviewed\u0026#39;, \u0026#39;added_to_master\u0026#39;, \u0026#39;spam\u0026#39;) [default: \u0026#39;pending\u0026#39;]\radmin_notes text\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\r(normalized_name, user_id) [unique]\rtotal_reports\rstatus\r}\r}\r// Bài Đăng (Posts)\rTable posts {\rpost_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rrecipe_id varchar(36) [ref: \u0026gt; recipes.recipe_id, note: \u0026#39;Optional - nếu chia sẻ công thức\u0026#39;]\rcontent text [note: \u0026#39;Nội dung bài đăng\u0026#39;]\rimages json [note: \u0026#39;Mảng URLs ảnh\u0026#39;]\ris_public boolean [default: true]\rlikes_count int [default: 0]\rcomments_count int [default: 0]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\ruser_id\rrecipe_id\rcreated_at\ris_public\r}\r}\r// Bình Luận (Comments)\rTable comments {\rcomment_id varchar(36) [pk]\rpost_id varchar(36) [ref: \u0026gt; posts.post_id, not null]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rparent_comment_id varchar(36) [ref: \u0026gt; comments.comment_id, note: \u0026#39;Cho reply/thread\u0026#39;]\rcontent text [not null]\rcreated_at timestamp [default: `now()`]\rupdated_at timestamp [default: `now()`]\rindexes {\rpost_id\ruser_id\rparent_comment_id\rcreated_at\r}\r}\r// Lượt Thích/Reactions\rTable reactions {\rreaction_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\rtarget_type enum(\u0026#39;post\u0026#39;, \u0026#39;recipe\u0026#39;, \u0026#39;comment\u0026#39;) [not null]\rtarget_id varchar(36) [not null, note: \u0026#39;ID của post/recipe/comment\u0026#39;]\rreaction_type enum(\u0026#39;like\u0026#39;, \u0026#39;love\u0026#39;, \u0026#39;wow\u0026#39;, \u0026#39;sad\u0026#39;, \u0026#39;angry\u0026#39;) [default: \u0026#39;like\u0026#39;]\rcreated_at timestamp [default: `now()`]\rindexes {\r(user_id, target_type, target_id) [unique]\rtarget_type\rtarget_id\ruser_id\r}\r}\r// Thông Báo (Notifications)\rTable notifications {\rnotification_id varchar(36) [pk]\ruser_id varchar(36) [ref: \u0026gt; users.user_id, not null]\ractor_id varchar(36) [ref: \u0026gt; users.user_id, note: \u0026#39;Người thực hiện hành động\u0026#39;]\rtype enum(\u0026#39;friend_request\u0026#39;, \u0026#39;friend_accept\u0026#39;, \u0026#39;comment\u0026#39;, \u0026#39;like\u0026#39;, \u0026#39;mention\u0026#39;, \u0026#39;recipe_share\u0026#39;) [not null]\rtarget_type enum(\u0026#39;post\u0026#39;, \u0026#39;recipe\u0026#39;, \u0026#39;comment\u0026#39;, \u0026#39;friend_request\u0026#39;) [not null]\rtarget_id varchar(36) [not null]\rcontent text [note: \u0026#39;Nội dung thông báo\u0026#39;]\ris_read boolean [default: false]\rcreated_at timestamp [default: `now()`]\rindexes {\ruser_id\ris_read\rcreated_at\rtype\r}\r}\r// Người Theo Dõi (Followers) - Nếu muốn mô hình follow ngoài friendship\rTable user_followers {\rfollow_id varchar(36) [pk]\rfollower_id varchar(36) [ref: \u0026gt; users.user_id, not null, note: \u0026#39;Người theo dõi\u0026#39;]\rfollowing_id varchar(36) [ref: \u0026gt; users.user_id, not null, note: \u0026#39;Người được theo dõi\u0026#39;]\rcreated_at timestamp [default: `now()`]\rindexes {\r(follower_id, following_id) [unique]\rfollower_id\rfollowing_id\r}\r}Công Nghệ Cơ Sở Dữ Liệu#\rCơ Sở Dữ Liệu Chính: Amazon DynamoDB (NoSQL)\nKhả năng mở rộng cao Độ trễ thấp Serverless (không cần quản lý hạ tầng) Hiệu quả chi phí cho khối lượng công việc đọc nhiều Phương Án Thay Thế: Amazon RDS PostgreSQL\nNếu cần các truy vấn quan hệ phức tạp Tốt hơn cho phân tích và báo cáo Mẫu Truy Cập Dữ Liệu#\rMẫu Truy Cập Chính (Enhanced)#\rLấy Hồ Sơ Người Dùng: users.user_id → Dữ liệu người dùng + vai trò Lấy Tùy Chọn Người Dùng: user_preferences.user_id → Tùy chọn + preferred_recipe_count Lấy Nguyên Liệu Người Dùng: user_ingredients.user_id → Danh sách nguyên liệu Validate Nguyên Liệu: master_ingredients.normalized_name → Kiểm tra hợp lệ Lấy Cài Đặt Quyền Riêng Tư: privacy_settings.user_id → Cấu hình riêng tư Kiểm Tra Quan Hệ Bạn Bè: friendships(user_id, friend_id) → Trạng thái bạn bè Lấy Danh Sách Bạn Bè: friendships.user_id → Tất cả bạn bè Lấy Chi Tiết Công Thức: recipes.recipe_id → Công thức + Nguyên liệu Lấy Công Thức Đã Duyệt: recipes.is_approved=true → Công thức công khai Query Recipes by Category: recipes.cooking_method + meal_type → Diverse suggestions ⭐ Lấy Gợi Ý AI: ai_suggestions.user_id + created_at → Gợi ý gần đây Lấy Lịch Sử Nấu Ăn: user_cooking_history.user_id → Lịch sử cá nhân Lấy Món Yêu Thích: user_cooking_history.user_id + is_favorite=true → Món yêu thích Lấy Đánh Giá Công Thức: recipe_ratings.recipe_id → Tất cả rating Tính Toán Auto-Approval: recipe_ratings.recipe_id + rating\u0026gt;=4 → Kiểm tra điều kiện Log Invalid Ingredients: activity_logs.activity_type=\u0026lsquo;invalid_ingredient\u0026rsquo; → CloudWatch ⭐ Admin: Top Invalid Reports: invalid_ingredients_reports.total_reports → Admin dashboard ⭐ Lấy Bài Đăng Người Dùng: posts.user_id + created_at → Danh sách bài đăng Lấy Newsfeed: posts(bạn bè) + created_at → Bài đăng của bạn bè Lấy Bình Luận: comments.post_id + created_at → Bình luận của bài đăng Lấy Reactions: reactions(target_type, target_id) → Lượt thích/reactions Lấy Thông Báo: notifications.user_id + is_read → Thông báo chưa đọc Lấy Followers: user_followers.following_id → Danh sách người theo dõi Mẫu Thứ Cấp#\rTìm kiếm công thức theo món ăn/phương pháp (với lọc quyền riêng tư) Lấy công thức công khai phổ biến Quản trị: Lấy tất cả người dùng với bộ lọc vai trò Quản trị: Lấy thống kê người dùng Truy vấn phân tích (nhật ký hoạt động) Thiết Kế Bảng DynamoDB (Mẫu Bảng Đơn)#\rBảng Chính: smart-cooking-data#\rNgười Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PROFILE Thuộc tính: email, username, full_name, role, is_active, v.v. GSI1PK: ROLE#\u0026lt;role\u0026gt; (cho truy vấn quản trị) Tùy Chọn Người Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PREFERENCES Thuộc tính: dietary_restrictions, allergies, favorite_cuisines, v.v. Cài Đặt Quyền Riêng Tư#\rPK: USER#\u0026lt;user_id\u0026gt; SK: PRIVACY Thuộc tính: profile_visibility, email_visibility, v.v. Nguyên Liệu Người Dùng#\rPK: USER#\u0026lt;user_id\u0026gt; SK: INGREDIENT#\u0026lt;ingredient_name\u0026gt; Thuộc tính: category, added_at Quan Hệ Bạn Bè#\rPK: USER#\u0026lt;user_id\u0026gt; SK: FRIEND#\u0026lt;friend_id\u0026gt; Thuộc tính: status, requested_at, responded_at GSI1PK: USER#\u0026lt;friend_id\u0026gt; (để tra cứu ngược) GSI1SK: FRIEND#\u0026lt;user_id\u0026gt; Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: METADATA Thuộc tính: title, description, cuisine_type, difficulty, v.v. GSI1PK: USER#\u0026lt;user_id\u0026gt; (công thức của người dùng) GSI1SK: RECIPE#\u0026lt;created_at\u0026gt; Nguyên Liệu Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: INGREDIENT#\u0026lt;number\u0026gt; Thuộc tính: ingredient_name, quantity, unit Gợi Ý AI#\rPK: USER#\u0026lt;user_id\u0026gt; SK: SUGGESTION#\u0026lt;timestamp\u0026gt; Thuộc tính: recipe_id, prompt_text, ai_response, was_accepted Lịch Sử Nấu Ăn#\rPK: USER#\u0026lt;user_id\u0026gt; SK: COOKING#\u0026lt;timestamp\u0026gt;#\u0026lt;history_id\u0026gt; Thuộc tính: recipe_id, status, personal_rating, is_favorite, cook_date GSI1PK: USER#\u0026lt;user_id\u0026gt;#FAVORITE (nếu is_favorite=true) GSI1SK: COOKING#\u0026lt;cook_date\u0026gt; Đánh Giá Công Thức#\rPK: RECIPE#\u0026lt;recipe_id\u0026gt; SK: RATING#\u0026lt;user_id\u0026gt; Thuộc tính: rating, comment, is_verified_cook, history_id GSI1PK: USER#\u0026lt;user_id\u0026gt; (ratings của user) GSI1SK: RATING#\u0026lt;created_at\u0026gt; Master Ingredients#\rPK: INGREDIENT#\u0026lt;ingredient_id\u0026gt; SK: METADATA Thuộc tính: name, normalized_name, category, aliases GSI1PK: CATEGORY#\u0026lt;category\u0026gt; GSI1SK: INGREDIENT#\u0026lt;name\u0026gt; Bài Đăng (Posts)#\rPK: POST#\u0026lt;post_id\u0026gt; SK: METADATA Thuộc tính: user_id, recipe_id, content, images, is_public, likes_count, comments_count GSI1PK: USER#\u0026lt;user_id\u0026gt; (bài đăng của người dùng) GSI1SK: POST#\u0026lt;created_at\u0026gt; Bình Luận (Comments)#\rPK: POST#\u0026lt;post_id\u0026gt; SK: COMMENT#\u0026lt;timestamp\u0026gt;#\u0026lt;comment_id\u0026gt; Thuộc tính: user_id, parent_comment_id, content GSI1PK: USER#\u0026lt;user_id\u0026gt; (bình luận của người dùng) GSI1SK: COMMENT#\u0026lt;timestamp\u0026gt; Reactions (Lượt thích)#\rPK: \u0026lt;target_type\u0026gt;#\u0026lt;target_id\u0026gt; (ví dụ: POST#123, RECIPE#456) SK: REACTION#\u0026lt;user_id\u0026gt; Thuộc tính: reaction_type, created_at GSI1PK: USER#\u0026lt;user_id\u0026gt; (reactions của người dùng) GSI1SK: REACTION#\u0026lt;created_at\u0026gt; Thông Báo (Notifications)#\rPK: USER#\u0026lt;user_id\u0026gt; SK: NOTIFICATION#\u0026lt;timestamp\u0026gt;#\u0026lt;notification_id\u0026gt; Thuộc tính: actor_id, type, target_type, target_id, content, is_read GSI1PK: USER#\u0026lt;user_id\u0026gt;#UNREAD (nếu is_read=false) GSI1SK: NOTIFICATION#\u0026lt;timestamp\u0026gt; Followers#\rPK: USER#\u0026lt;following_id\u0026gt; SK: FOLLOWER#\u0026lt;follower_id\u0026gt; Thuộc tính: created_at GSI1PK: USER#\u0026lt;follower_id\u0026gt; (tra cứu ngược - ai người này đang follow) GSI1SK: FOLLOWING#\u0026lt;following_id\u0026gt; Chỉ Mục Thứ Cấp Toàn Cục (GSI)#\rGSI1: Truy vấn dựa trên người dùng\nPK: GSI1PK (ví dụ: ROLE#admin, USER#\u0026lt;user_id\u0026gt;) SK: GSI1SK (ví dụ: timestamp, RECIPE#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Lấy tất cả quản trị viên Lấy công thức của người dùng sắp xếp theo ngày Lấy quan hệ bạn bè (tra cứu ngược) Lấy bài đăng của người dùng Lấy bình luận của người dùng Lấy reactions của người dùng Lấy thông báo chưa đọc Lấy danh sách following GSI2: Tìm kiếm \u0026amp; khám phá công thức (Enhanced)\nPK: GSI2PK (ví dụ: CUISINE#\u0026lt;type\u0026gt;, METHOD#\u0026lt;cooking_method\u0026gt;, MEALTYPE#\u0026lt;meal_type\u0026gt;) ⭐ SK: GSI2SK (ví dụ: RECIPE#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Tìm kiếm công thức theo món ăn Tìm kiếm công thức theo phương pháp nấu (xào, hấp, canh\u0026hellip;) ⭐ Tìm kiếm theo loại món (món chính, món phụ\u0026hellip;) ⭐ Lấy công thức phổ biến Diverse recipe suggestions ⭐ GSI3: Social Feed \u0026amp; Discovery\nPK: GSI3PK (ví dụ: FEED#\u0026lt;user_id\u0026gt;, PUBLIC) SK: GSI3SK (ví dụ: POST#\u0026lt;created_at\u0026gt;) Trường hợp sử dụng: Lấy newsfeed (bài đăng của bạn bè) Lấy bài đăng công khai (explore feed) Lấy bài đăng trending Ước Tính Dung Lượng Lưu Trữ \u0026amp; Chi Phí#\rGiả Định#\r1.000 người dùng hoạt động Trung bình 20 nguyên liệu mỗi người dùng Trung bình 5 công thức đã lưu mỗi người dùng Trung bình 10 gợi ý AI mỗi người dùng mỗi tháng Trung bình 10 bài đăng mỗi người dùng Trung bình 30 bình luận mỗi người dùng Trung bình 100 reactions mỗi người dùng Trung bình 50 thông báo mỗi người dùng Trung bình 20 followers mỗi người dùng Ước Tính Dung Lượng (Enhanced)#\rNgười dùng (with preferences): 1.000 × 1.2KB = 1.2MB Nguyên liệu người dùng: 1.000 × 20 × 0.5KB = 10MB Master ingredients: 5.000 × 0.8KB = 4MB Công thức (with categories): 5.000 × 5.5KB = 27.5MB ⭐ Lịch sử nấu ăn: 1.000 × 50 × 0.8KB = 40MB Đánh giá công thức: 10.000 × 0.5KB = 5MB Gợi ý AI (enhanced): 10.000 × 2.5KB = 25MB ⭐ Invalid reports (optional): 500 × 0.5KB = 0.25MB ⭐ Bài đăng: 10.000 × 3KB = 30MB Bình luận: 30.000 × 0.5KB = 15MB Reactions: 100.000 × 0.2KB = 20MB Thông báo: 50.000 × 0.5KB = 25MB Followers: 20.000 × 0.3KB = 6MB Tổng cộng: ~209MB Chi Phí DynamoDB (Hàng Tháng) - Enhanced#\rLưu trữ: 209MB × $0.25/GB = ~$0.05 Khả năng đọc: ~$15-20 (tăng do category queries) ⭐ Khả năng ghi: ~$15-20 (tăng do invalid logging, enhanced suggestions) ⭐ GSI (4 indexes): ~$10-15 (tăng do GSI2 category index) ⭐ Tổng cộng: ~$40-55/tháng (vs $32-48 trước đó) "},{"id":4,"href":"/docs/summary/cost-analysis/","title":"Phân Tích Chi Phí","section":"Summary","content":"PHÂN TÍCH CHI PHÍ DỰ ÁN#\r💰 Chi Phí Hàng Tháng (1,000 users) - ENHANCED#\rDịch Vụ Chi Phí Ước Tính Ghi Chú AWS Amplify $15 Hosting Next.js + CI/CD Amazon CloudFront $8 CDN, 1TB data transfer Amazon API Gateway $10 ~180K requests/tháng AWS Lambda Functions $25 11 Lambda functions Amazon Bedrock (Flexible) $12-30 FLEXIBLE mix (60% DB coverage) ⭐ Amazon DynamoDB $45 On-demand với categories, invalid reports ⭐ Amazon S3 $10 100GB storage Amazon Cognito FREE \u0026lt; 50,000 MAU Amazon CloudWatch $12 Enhanced logging với invalid ingredients ⭐ AWS WAF $6 Web Application Firewall AWS Secrets Manager $2 API keys storage Tổng Chi Phí (Enhanced)#\rKịch Bản Chi Phí/Tháng Note Best Case (DB đủ 80%) ~$135 Tiết kiệm AI ✅ Average Case (DB 60%) ~$150 Recommended ✅ Worst Case (DB rỗng) ~$180 Cold start 💡 Khuyến nghị:\nSử dụng Claude 3 Haiku Flexible mix tự động tiết kiệm cost khi DB đủ Average stable cost: $150/tháng (vs $168 fixed trước đó) 📊 Phân Tích Chi Phí Theo Quy Mô (Enhanced)#\rKịch Bản 1: MVP (1,000 users)#\rChi phí: $135-180/tháng (flexible based on DB coverage) Chi phí/user: $0.135-0.180/tháng Doanh thu cần: $450-600/tháng (ROI 3-4x) Kịch Bản 2: Tăng Trưởng (10,000 users)#\rChi phí: $380-500/tháng Chi phí/user: $0.038-0.050/tháng Doanh thu cần: $1,500-2,000/tháng Kịch Bản 3: Scale (100,000 users)#\rChi phí: $2,000-2,800/tháng Chi phí/user: $0.020-0.028/tháng Doanh thu cần: $8,000-11,000/tháng 💡 Chiến Lược Tối Ưu Chi Phí#\r1. AI/ML Costs (40-50% tổng chi phí) - ENHANCED ⭐#\r✅ Flexible DB/AI Mix → Tiết kiệm 30-70% tùy DB coverage ⭐ ✅ Sử dụng Claude 3 Haiku thay vì Sonnet → Tiết kiệm 70% ✅ Auto-build DB từ popular AI recipes → DB coverage tăng từ 0% → 80% ⭐ ✅ Cache AI responses → Giảm 20-30% duplicate calls ✅ Prompt optimization → Giảm token usage 15% ✅ Rate limiting \u0026amp; Freemium tiers → Control abuse ⭐ Tiết kiệm ước tính: $50-80/tháng (vs $40-50 trước đó)\n2. Database Costs (25-30% tổng chi phí)#\r✅ DynamoDB on-demand → Chỉ trả khi sử dụng ✅ TTL cho old AI suggestions → Giảm storage ✅ TTL cho old cooking history → Tự động xóa sau 1 năm (optional) ✅ Batch operations → Giảm write units ✅ Compression cho JSON fields → Giảm storage 30% ✅ Optimize GSI usage → Giảm chi phí index cho social features ✅ Cache master_ingredients → Giảm read operations cho validation Tiết kiệm ước tính: $10-15/tháng\n3. CDN \u0026amp; Hosting (15-20% tổng chi phí)#\r✅ CloudFront caching → Giảm origin requests ✅ Image optimization → Giảm bandwidth ✅ Gzip compression → Giảm 60% transfer size ✅ Lazy loading → Giảm initial load Tiết kiệm ước tính: $5-8/tháng\n4. Lambda Costs (12-15% tổng chi phí)#\r✅ Reserved concurrency → Ngăn runaway costs ✅ Memory optimization → Giảm execution cost ✅ Connection pooling → Giảm cold starts ✅ Code minification → Giảm package size ✅ Optimize Posts/Notifications Lambda → Batch processing ✅ Optimize Cooking History Lambda → Minimal compute ✅ Optimize Rating Lambda → Efficient calculation logic Tiết kiệm ước tính: $5-8/tháng\n5. Storage Costs (8-10% tổng chi phí)#\r✅ S3 Intelligent-Tiering → Auto-optimize ✅ Lifecycle policies → Xóa temp files sau 90 ngày ✅ Image compression → WebP format ✅ Thumbnail generation → Giảm storage ✅ Posts image optimization → Compress trước khi upload Tiết kiệm ước tính: $3-5/tháng\n📈 Chi Phí Dự Kiến Theo Thời Gian#\rNăm 1#\rTháng Users Chi Phí Revenue Target 1-3 100 $90 $280 (Beta) 4-6 500 $110 $400 7-9 1,500 $145 $550 10-12 3,000 $200 $750 Năm 2#\rQuarter Users Chi Phí Revenue Target Q1 5,000 $250 $1,100 Q2 8,000 $320 $1,600 Q3 12,000 $400 $2,400 Q4 20,000 $580 $3,800 🎯 Break-Even Analysis#\rMô Hình Freemium#\rFree tier: Giới hạn 10 AI suggestions/tháng Premium tier: $4.99/tháng (unlimited) Conversion rate target: 5% Tháng 1-3 (1,000 users)#\rPremium users: 50 (5%) Revenue: $250/tháng Cost: $133/tháng Profit: $117/tháng ✅ Tháng 12 (10,000 users)#\rPremium users: 500 (5%) Revenue: $2,500/tháng Cost: $400/tháng Profit: $2,100/tháng ✅ Mô Hình Ads (Alternative)#\rAd revenue: $0.50-1.00/user/tháng 1,000 users = $500-1,000/tháng Cost: $133/tháng Profit: $367-867/tháng ✅ 🔒 Chi Phí Bảo Mật \u0026amp; Compliance#\rItem Chi Phí/Tháng AWS WAF $6 AWS Secrets Manager $2 SSL/TLS Certificates FREE (ACM) DDoS Protection (Shield Standard) FREE Encryption at Rest FREE CloudWatch Alarms $1 Total $9 🚀 Chi Phí Tăng Trưởng Dự Kiến#\rMarketing \u0026amp; Growth (Ngoài AWS)#\rMarketing: $500-1,000/tháng (Facebook Ads, Google Ads) Support: $200-500/tháng (Zendesk/Intercom) Analytics: $50-100/tháng (Mixpanel/Amplitude) Payment Processing: 2.9% + $0.30/transaction (Stripe) Total Operating Costs (Tháng 12)#\rAWS Infrastructure: $200 Marketing: $800 Support: $300 Analytics: $75 Payment Processing: $75 (3% × $2,500) Total: $1,450/tháng 📊 ROI Projection#\rYear 1#\rTotal Investment: $10,000 (dev) + $1,800 (AWS) = $11,800 Revenue Year 1: $20,000 (average $1,667/tháng) ROI: 70% ✅ Year 2#\rTotal Investment: $5,000 (maintenance) + $4,000 (AWS) Revenue Year 2: $70,000 (average $5,833/tháng) ROI: 680% ✅✅ 💰 Khuyến Nghị Cuối Cùng#\rGiai Đoạn MVP (0-3 tháng) - ENHANCED#\r✅ Sử dụng Claude 3 Haiku ✅ Implement Flexible DB/AI mix ⭐ ✅ Enable CloudFront caching ✅ Set billing alarms tại $140, $170, $200 ⭐ ✅ Freemium tier: Free (1 món), Premium (5 món) ⭐ ✅ Cache master_ingredients in-memory ✅ Simple invalid logging (CloudWatch only) ✅ Category-based diverse suggestions ⭐ Chi phí target: $135-160/tháng (vs $90-130 MVP basic)\nGiai Đoạn Growth (4-12 tháng) - ENHANCED#\r✅ Monitor DB coverage % growth → Target 60-80% ⭐ ✅ Auto-approve popular AI recipes → Build DB automatically ⭐ ✅ Scale DynamoDB capacity dần dần ✅ Consider Reserved Instances khi stable ✅ Implement advanced caching strategies ✅ Optimize category distribution in AI suggestions ⭐ ✅ Full invalid reporting system với admin dashboard ⭐ ✅ TTL policies cho cooking history (optional) Chi phí target: $150-400/tháng (giảm dần khi DB tăng)\nGiai Đoạn Scale (Year 2+)#\r✅ Negotiate Enterprise Pricing với AWS ✅ Consider Savings Plans (20-40% discount) ✅ Optimize architecture dựa trên real data ✅ Automate cost monitoring \u0026amp; alerts Chi phí target: \u0026lt; $0.02/user/tháng\n"}]